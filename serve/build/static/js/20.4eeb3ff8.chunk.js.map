{"version":3,"sources":["webpack:///./src/pages/user/index.less?cb88","pages/user/index.less","pages/user/userlist.tsx"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","UserTypeList","IsAuthentList","StatusList","UserList","state","files","updateId","selectedRowKeys","selectedPetKeys","selectedPetTypeKeys","loading","filteredInfo","sortedInfo","visible","editVisible","value","imageUrl","defaultProductName","defalutSizeValue","editSizeVisible","tableData","resTableData","resPetTypeTableData","showImage","imageSrc","selectedPetOtherTypeKeys","total","searchText","getUserList","page","size","That","Object","E_pet_admin_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","_this","apiGetUserList","then","res","data","length","map","item","index","key","id","userType","type","userName","username","nickName","nickname","phone","authent","icon","status","regtime","moment","parseInt","format","lastlogintime","operation","setState","goodList","onSelectChange","handleChange","pagination","filters","sorter","props","history","concat","current","pageSize","console","log","handleDelete","addGoodType","showDrawer","editGoodType","record","name","deleteGoodType","axios","method","url","ids","message","success","setTimeout","window","location","reload","error","this","match","params","imgSrc","_this2","_this$state","columns","title","dataIndex","filteredValue","onFilter","toString","includes","render","text","split","react__WEBPACK_IMPORTED_MODULE_6__","href","onClick","rowSelection","onChange","antd__WEBPACK_IMPORTED_MODULE_8__","style","textAlign","marginBottom","Item","antd__WEBPACK_IMPORTED_MODULE_9__","dataSource","defaultCurrent","locale","filterConfirm","filterReset","emptyText","antd__WEBPACK_IMPORTED_MODULE_10__","onCancel","footer","src","alt","width","React"],"mappings":"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","file":"static/js/20.4eeb3ff8.chunk.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../../node_modules/postcss-loader/src/index.js??postcss!../../../node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./index.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../../node_modules/postcss-loader/src/index.js??postcss!../../../node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./index.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../../../node_modules/postcss-loader/src/index.js??postcss!../../../node_modules/_less-loader@5.0.0@less-loader/dist/cjs.js!./index.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".cardMsgs {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n.cardMsgs .photos {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n}\\n.cardMsgs .photos p {\\n  width: 30%;\\n}\\n.cardMsgs .msgs {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-around;\\n  flex-wrap: wrap;\\n}\\n.cardMsgs .msgs p {\\n  width: 50%;\\n}\\n\", \"\"]);\n\n","import * as React from 'react';\r\nimport {\r\n    Table, message, Breadcrumb, Modal \r\n} from 'antd';\r\nimport './index.less';\r\nimport moment from 'moment'\r\nimport axios from '../../util/Axios';\r\nimport { apiGetUserList } from '../api';\r\n\r\nconst UserTypeList = [\"普通用户\", \"商户\", \"企业用户\"]\r\n\r\nconst IsAuthentList = [\"否\", \"是\"]\r\n\r\nconst StatusList = [\"正常\", \"停用\"]\r\n\r\nconst PopImage = (imgSrc: string) => (\r\n    <img src={imgSrc} alt=\"\" style={{ width: \"100%\" }} />\r\n)\r\n\r\nexport default class UserList extends React.Component<any, any> {\r\n\r\n    public state = {\r\n        files: [],\r\n        updateId: 1, // edit id 要更新的id\r\n        selectedRowKeys: [], // Check here to configure the default column\r\n        selectedPetKeys: [],\r\n        selectedPetTypeKeys: [],\r\n        loading: false,\r\n        filteredInfo: null,\r\n        sortedInfo: \"\",\r\n        visible: false,\r\n        editVisible: false,\r\n        value: 2,  // 默认选择的一级分类\r\n        imageUrl: \"\",\r\n        defaultProductName: \"\", // 编辑商品名字\r\n        defalutSizeValue: 6, // 编辑商品体型\r\n        editSizeVisible: false,  // 编辑商品体型选项是否显示\r\n        tableData: [],\r\n        resTableData: [],\r\n        resPetTypeTableData: [],\r\n        showImage: false,\r\n        imageSrc: \"\",\r\n        selectedPetOtherTypeKeys: [],\r\n        total: 0,\r\n        searchText:\"\"\r\n    };\r\n\r\n    public getUserList = (page: number, size: number) => {\r\n        const That = this\r\n        apiGetUserList(page, size).then((res: any) => {\r\n            if (res && res.data.length > 0) {\r\n                const tableData = res.data.map((item: any, index: number) => {\r\n                    return {\r\n                        key: item.id,  // key 应带对应data id \r\n                        userType: item.type ? UserTypeList[item.type] : UserTypeList[0],\r\n                        userName: item.username,\r\n                        nickName: item.nickname,\r\n                        phone: item.phone ? item.phone : \"----\",\r\n                        authent: item.authent ? IsAuthentList[item.authent] : IsAuthentList[0],\r\n                        icon: item.icon ? item.icon : \"----\",\r\n                        status: item.status ? StatusList[item.status] : StatusList[0],\r\n                        regtime: item.regtime ? moment(parseInt(item.regtime, 10)).format('YYYY-MM-DD H:mm:ss') : \"----\",\r\n                        lastlogintime: item.lastlogintime ? moment(parseInt(item.lastlogintime, 10)).format('YYYY-MM-DD H:mm:ss') : \"----\",\r\n                        operation: \"\"\r\n                    }\r\n                })\r\n                That.setState({\r\n                    \"tableData\": tableData,\r\n                    resTableData: res.goodList,\r\n                    total: res.total\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const { page } = this.props.match.params\r\n        this.getUserList(page, 10)\r\n    }\r\n\r\n    public onSelectChange = (selectedRowKeys: any) => {\r\n        this.setState({ selectedRowKeys });\r\n    }\r\n\r\n    public handleChange = (pagination: any, filters: any, sorter: any) => {\r\n        this.props.history.push(`/home/userlist/${pagination.current}`)\r\n        this.getUserList(pagination.current, pagination.pageSize)\r\n        console.log('Various parameters', pagination, filters, sorter);\r\n        this.setState({\r\n            filteredInfo: filters,\r\n            sortedInfo: sorter,\r\n        });\r\n    }\r\n\r\n    public handleDelete = (key: any) => {\r\n        console.log(key)\r\n    }\r\n\r\n    public addGoodType = () => {\r\n        this.showDrawer()\r\n    }\r\n\r\n    public editGoodType = (record: any) => {\r\n        console.log(record.size === \"----\", record)\r\n        this.setState({\r\n            editVisible: true,\r\n            editSizeVisible: record.size !== \"----\",\r\n            defaultProductName: record.name,\r\n            updateId: record.key,\r\n        })\r\n    }\r\n\r\n    public showDrawer = () => {\r\n        this.setState({\r\n            visible: true,\r\n        });\r\n    };\r\n\r\n    public deleteGoodType = () => {\r\n\r\n        const selectedRowKeys = this.state.selectedRowKeys\r\n\r\n        axios({\r\n            method: \"post\",\r\n            url: \"/good/delete\",\r\n            data: {\r\n                ids: selectedRowKeys\r\n            }\r\n        }).then((res: any) => {\r\n            if (res) {\r\n                message.success(\"删除成功\")\r\n                setTimeout(() => {\r\n                    window.location.reload()\r\n                }, 500);\r\n            } else {\r\n                message.error(\"删除失败\")\r\n            }\r\n        })\r\n\r\n    }\r\n    public render() {\r\n\r\n        const { selectedRowKeys, tableData, total } = this.state;\r\n\r\n        const That = this\r\n\r\n        let { filteredInfo }: any = this.state;\r\n\r\n        filteredInfo = filteredInfo || {};\r\n\r\n        const columns = [{\r\n            title: '用户类型',\r\n            dataIndex: 'userType',\r\n            key: 'userType',\r\n        }, {\r\n            title: '用户名',\r\n            dataIndex: 'userName',\r\n            key: 'userName',\r\n        }, {\r\n            title: '昵称',\r\n            dataIndex: 'nickName',\r\n            key: 'nickName',\r\n            filteredValue: filteredInfo.nickName || null,\r\n            onFilter: (value: string, record: any) => {\r\n                return record.nickName.toString().includes(value)\r\n            },\r\n        }, {\r\n            title: '头像',\r\n            dataIndex: 'icon',\r\n            key: 'icon',\r\n            render: (text: any, record: any) => {\r\n\r\n                if (record.icon !== \"\") {\r\n\r\n                    const imageUrlList = record.icon.split(',')\r\n\r\n                    const images = imageUrlList.map((item: string, index: number) => (\r\n                        <a href=\"javascript:void(0);\" key={index} onClick={() => {\r\n                            That.setState({\r\n                                showImage: true,\r\n                                imageSrc: item\r\n                            })\r\n                        }}>点击查看</a>\r\n                    ))\r\n\r\n                    return images\r\n\r\n                } else {\r\n\r\n                    return <span>暂无</span>\r\n\r\n                }\r\n\r\n            }\r\n        }, {\r\n            title: '手机号',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n        }, {\r\n            title: '注册时间',\r\n            dataIndex: 'regtime',\r\n            key: 'regtime',\r\n        }, {\r\n            title: '最后登陆时间',\r\n            dataIndex: 'lastlogintime',\r\n            key: 'lastlogintime',\r\n        }, {\r\n            title: '实名认证',\r\n            dataIndex: 'authent',\r\n            key: 'authent',\r\n        }, {\r\n            title: '状态',\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n        },\r\n            // {\r\n            //     title: '操作',\r\n            //     dataIndex: 'operation',\r\n            //     key: 'operation',\r\n            //     render: (text: any, record: any) => {\r\n            //         return (\r\n            //             <a href=\"javascript:;\" onClick={this.editGoodType.bind(this, record)}>详细</a>\r\n            //         )\r\n            //     }\r\n            // }\r\n        ];\r\n\r\n        const rowSelection = {\r\n            selectedRowKeys,\r\n            onChange: this.onSelectChange\r\n        };\r\n\r\n        // const hasSelected = selectedRowKeys.length > 0\r\n        const { page } = this.props.match.params\r\n        return (\r\n            <div>\r\n                <Breadcrumb style={{ textAlign: \"left\", marginBottom: 25 }}>\r\n                    <Breadcrumb.Item>用户管理</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>\r\n                        <a href=\"\">用户列表</a>\r\n                    </Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                {/* <div style={{ marginBottom: 16, textAlign: \"left\" }}>\r\n                    <Button type=\"primary\" onClick={this.addGoodType.bind(this)} style={{ marginRight: 20 }}>\r\n                        添加\r\n                    </Button>\r\n                    <Button type=\"danger\" disabled={!hasSelected} onClick={() => {\r\n                        this.deleteGoodType()\r\n                    }}>\r\n                        删除\r\n                    </Button>\r\n\r\n                    <span style={{ marginLeft: 8 }}>\r\n                        {hasSelected ? `选择了${selectedRowKeys.length}项` : ''}\r\n                    </span>\r\n                </div> */}\r\n                <div>\r\n                    <Table rowSelection={rowSelection} columns={columns} dataSource={tableData}\r\n                        pagination={{ pageSize: 10, \"total\": total, defaultCurrent: parseInt(page, 10) }}\r\n                        onChange={this.handleChange}\r\n                        locale={{ filterConfirm: \"确定\", filterReset: \"重置\", emptyText: \"暂无数据\" }}\r\n                    />\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.showImage}\r\n                    onCancel={() => this.setState({ showImage: false })}\r\n                    footer={null}\r\n                >\r\n                    {PopImage(this.state.imageSrc)}\r\n                </Modal>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}