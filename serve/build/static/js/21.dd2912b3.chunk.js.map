{"version":3,"sources":["pages/businessRound/index.tsx"],"names":["BreadTitle","react__WEBPACK_IMPORTED_MODULE_1__","antd__WEBPACK_IMPORTED_MODULE_2__","style","textAlign","marginBottom","Item","href","BusinessRound","Form","create","name","props","_useState","useState","area","Object","E_pet_admin_web_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","_useState3","_useState4","round","setRound","_useState5","cityCode","cityName","_useState6","rounds","setRounds","useEffect","apiGetBusinessRound","then","res","fieldsError","roundsWrap","map","item","index","antd__WEBPACK_IMPORTED_MODULE_4__","closable","onClose","id","apiDeleteBusinessRound","key","border","antd__WEBPACK_IMPORTED_MODULE_5__","Button","value","tradingAreaName","antd__WEBPACK_IMPORTED_MODULE_6__","assign","labelCol","span","wrapperCol","onSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","businessArea","console","log","apiPublishBusinessArea","message","success","setTimeout","window","location","reload","error","label","hasFeedback","getFieldDecorator","initialValue","setFieldsValue","rules","required","antd__WEBPACK_IMPORTED_MODULE_7__","options","children","placeholder","antd__WEBPACK_IMPORTED_MODULE_8__","onChange","target","Group","buttonStyle","antd__WEBPACK_IMPORTED_MODULE_9__","type","block","htmlType","className","marginLeft","disabled","getFieldsError","keys","some","field"],"mappings":"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","file":"static/js/21.dd2912b3.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { useEffect, useState } from 'react'\r\nimport {\r\n    Breadcrumb, Form, Input, Cascader, Button, message, Radio, Tag\r\n} from 'antd';\r\nimport { apiPublishBusinessArea, apiGetBusinessRound, apiDeleteBusinessRound } from '../api';\r\n\r\n\r\ninterface IBusinessRoundProps {\r\n    title?: string,\r\n    form: {\r\n        getFieldDecorator: any\r\n        getFieldsError: any\r\n        validateFieldsAndScroll: any\r\n    }\r\n}\r\n\r\nconst BreadTitle = (\r\n    <Breadcrumb style={{ textAlign: \"left\", marginBottom: 25 }}>\r\n        <Breadcrumb.Item>商圈管理</Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n            <a href=\"\">发布商圈</a>\r\n        </Breadcrumb.Item>\r\n    </Breadcrumb>\r\n)\r\n\r\nfunction hasErrors(fieldsError: any) {\r\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n\r\nconst BusinessRoundWrap = (props: IBusinessRoundProps) => {\r\n    const [area,] = useState(\"321001\");\r\n    const [round, setRound] = useState(\"\")\r\n    const [rounds, setRounds] = useState([{\r\n        cityCode: \"\",\r\n        cityName: \"\"\r\n    }])\r\n    const formItemLayout = {\r\n        labelCol: { span: 2 },\r\n        wrapperCol: { span: 4 },\r\n    };\r\n\r\n    const options = [\r\n        {\r\n            value: '321000',\r\n            label: '扬州',\r\n            children: [\r\n                {\r\n                    value: '321001',\r\n                    label: '全市',\r\n                },\r\n                {\r\n                    value: '321002',\r\n                    label: '广陵区',\r\n                },\r\n                {\r\n                    value: '321003',\r\n                    label: '邗江区',\r\n                },\r\n                {\r\n                    value: '321012',\r\n                    label: '江都区',\r\n                },\r\n                {\r\n                    value: '321023',\r\n                    label: '宝应县',\r\n                },\r\n                {\r\n                    value: '321081',\r\n                    label: '仪征市',\r\n                },\r\n                {\r\n                    value: '321084',\r\n                    label: '高邮市',\r\n                },\r\n            ],\r\n        },\r\n    ]\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        props.form.validateFieldsAndScroll((err: any, values: { businessArea: string[] }) => {\r\n            const { businessArea } = values\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                apiPublishBusinessArea(businessArea, round).then((res: any) => {\r\n                    if (res) {\r\n                        message.success(\"发布成功\")\r\n                        setTimeout(() => {\r\n                            window.location.reload()\r\n                        }, 500);\r\n                    } else {\r\n                        message.error(\"发布失败\")\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    const deleteBusiness = (id:number)=>{\r\n        apiDeleteBusinessRound(id).then((res:any)=>{\r\n            if(res){\r\n                setRounds(res)\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        apiGetBusinessRound().then((res: any) => {\r\n            if (res) {\r\n                setRounds(res)\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    const roundsWrap = rounds.map((item: any, index: number) => {\r\n        return (\r\n            // <Radio.Button key={index} value={item.tradingAreaName}>{item.tradingAreaName}</Radio.Button>\r\n            <Tag closable={true} onClose={() => deleteBusiness(item.id)} key={index} style={{border:\"none\"}}>\r\n                <Radio.Button key={index} value={item.tradingAreaName}>{item.tradingAreaName}</Radio.Button>\r\n            </Tag>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {BreadTitle}\r\n            <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n                <Form.Item label=\"地区\" hasFeedback={true}>\r\n                    {props.form.getFieldDecorator('businessArea', {\r\n                        initialValue: [\"321000\", area],\r\n                        setFieldsValue: area,\r\n                        rules: [{ required: true, message: '请输入商圈!' }],\r\n                    })(\r\n                        <Cascader\r\n                            style={{ textAlign: \"left\" }}\r\n                            options={options}\r\n                            placeholder=\"请选择地区\" />\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item label=\"商圈\" hasFeedback={true}>\r\n                    <Input required={true} placeholder=\"商圈\" value={round} onChange={(e: any) => setRound(e.target.value)} />\r\n                </Form.Item>\r\n                <Form.Item label=\"已有商圈\"\r\n                    style={{\r\n                        textAlign: \"left\"\r\n                    }}\r\n                    wrapperCol={{\r\n                        span: 12\r\n                    }}>\r\n                    <Radio.Group value={round} buttonStyle=\"solid\" onChange={(e: any) => setRound(e.target.value)}>\r\n                        {\r\n                            roundsWrap\r\n                        }\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" block={true} htmlType=\"submit\"\r\n                        className=\"login-form-button\" style={{ marginLeft: \"50%\" }}\r\n                        disabled={hasErrors(props.form.getFieldsError())}>\r\n                        确认\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst BusinessRound = Form.create({ name: 'validate_other' })(BusinessRoundWrap);\r\n\r\nexport default BusinessRound"],"sourceRoot":""}