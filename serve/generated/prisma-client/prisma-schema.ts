// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AdminUser {
  id: Int!
  name: String
  pwd: String
  createdAt: DateTime!
  realName: String
  phone: String
  role: Role
  lastLoginAt: DateTime!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type AdminUserConnection {
  pageInfo: PageInfo!
  edges: [AdminUserEdge]!
  aggregate: AggregateAdminUser!
}

input AdminUserCreateInput {
  id: Int
  name: String
  pwd: String
  realName: String
  phone: String
  role: RoleCreateOneInput
  posts: PostCreateManyWithoutAuthorInput
}

input AdminUserCreateOneInput {
  create: AdminUserCreateInput
  connect: AdminUserWhereUniqueInput
}

input AdminUserCreateOneWithoutPostsInput {
  create: AdminUserCreateWithoutPostsInput
  connect: AdminUserWhereUniqueInput
}

input AdminUserCreateWithoutPostsInput {
  id: Int
  name: String
  pwd: String
  realName: String
  phone: String
  role: RoleCreateOneInput
}

type AdminUserEdge {
  node: AdminUser!
  cursor: String!
}

enum AdminUserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  pwd_ASC
  pwd_DESC
  createdAt_ASC
  createdAt_DESC
  realName_ASC
  realName_DESC
  phone_ASC
  phone_DESC
  lastLoginAt_ASC
  lastLoginAt_DESC
}

type AdminUserPreviousValues {
  id: Int!
  name: String
  pwd: String
  createdAt: DateTime!
  realName: String
  phone: String
  lastLoginAt: DateTime!
}

type AdminUserSubscriptionPayload {
  mutation: MutationType!
  node: AdminUser
  updatedFields: [String!]
  previousValues: AdminUserPreviousValues
}

input AdminUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminUserWhereInput
  AND: [AdminUserSubscriptionWhereInput!]
  OR: [AdminUserSubscriptionWhereInput!]
  NOT: [AdminUserSubscriptionWhereInput!]
}

input AdminUserUpdateDataInput {
  name: String
  pwd: String
  realName: String
  phone: String
  role: RoleUpdateOneInput
  posts: PostUpdateManyWithoutAuthorInput
}

input AdminUserUpdateInput {
  name: String
  pwd: String
  realName: String
  phone: String
  role: RoleUpdateOneInput
  posts: PostUpdateManyWithoutAuthorInput
}

input AdminUserUpdateManyMutationInput {
  name: String
  pwd: String
  realName: String
  phone: String
}

input AdminUserUpdateOneInput {
  create: AdminUserCreateInput
  update: AdminUserUpdateDataInput
  upsert: AdminUserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AdminUserWhereUniqueInput
}

input AdminUserUpdateOneRequiredWithoutPostsInput {
  create: AdminUserCreateWithoutPostsInput
  update: AdminUserUpdateWithoutPostsDataInput
  upsert: AdminUserUpsertWithoutPostsInput
  connect: AdminUserWhereUniqueInput
}

input AdminUserUpdateWithoutPostsDataInput {
  name: String
  pwd: String
  realName: String
  phone: String
  role: RoleUpdateOneInput
}

input AdminUserUpsertNestedInput {
  update: AdminUserUpdateDataInput!
  create: AdminUserCreateInput!
}

input AdminUserUpsertWithoutPostsInput {
  update: AdminUserUpdateWithoutPostsDataInput!
  create: AdminUserCreateWithoutPostsInput!
}

input AdminUserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  pwd: String
  pwd_not: String
  pwd_in: [String!]
  pwd_not_in: [String!]
  pwd_lt: String
  pwd_lte: String
  pwd_gt: String
  pwd_gte: String
  pwd_contains: String
  pwd_not_contains: String
  pwd_starts_with: String
  pwd_not_starts_with: String
  pwd_ends_with: String
  pwd_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  realName: String
  realName_not: String
  realName_in: [String!]
  realName_not_in: [String!]
  realName_lt: String
  realName_lte: String
  realName_gt: String
  realName_gte: String
  realName_contains: String
  realName_not_contains: String
  realName_starts_with: String
  realName_not_starts_with: String
  realName_ends_with: String
  realName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  role: RoleWhereInput
  lastLoginAt: DateTime
  lastLoginAt_not: DateTime
  lastLoginAt_in: [DateTime!]
  lastLoginAt_not_in: [DateTime!]
  lastLoginAt_lt: DateTime
  lastLoginAt_lte: DateTime
  lastLoginAt_gt: DateTime
  lastLoginAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [AdminUserWhereInput!]
  OR: [AdminUserWhereInput!]
  NOT: [AdminUserWhereInput!]
}

input AdminUserWhereUniqueInput {
  id: Int
}

type AggregateAdminUser {
  count: Int!
}

type AggregateMsg {
  count: Int!
}

type AggregatePics {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Msg {
  id: Int!
  name: String!
  phone: String!
  message: String!
  createdAt: DateTime!
  remarks: String
  cuser: AdminUser
  deal: Boolean
  dealTime: DateTime
}

type MsgConnection {
  pageInfo: PageInfo!
  edges: [MsgEdge]!
  aggregate: AggregateMsg!
}

input MsgCreateInput {
  id: Int
  name: String!
  phone: String!
  message: String!
  remarks: String
  cuser: AdminUserCreateOneInput
  deal: Boolean
  dealTime: DateTime
}

type MsgEdge {
  node: Msg!
  cursor: String!
}

enum MsgOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  message_ASC
  message_DESC
  createdAt_ASC
  createdAt_DESC
  remarks_ASC
  remarks_DESC
  deal_ASC
  deal_DESC
  dealTime_ASC
  dealTime_DESC
}

type MsgPreviousValues {
  id: Int!
  name: String!
  phone: String!
  message: String!
  createdAt: DateTime!
  remarks: String
  deal: Boolean
  dealTime: DateTime
}

type MsgSubscriptionPayload {
  mutation: MutationType!
  node: Msg
  updatedFields: [String!]
  previousValues: MsgPreviousValues
}

input MsgSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MsgWhereInput
  AND: [MsgSubscriptionWhereInput!]
  OR: [MsgSubscriptionWhereInput!]
  NOT: [MsgSubscriptionWhereInput!]
}

input MsgUpdateInput {
  name: String
  phone: String
  message: String
  remarks: String
  cuser: AdminUserUpdateOneInput
  deal: Boolean
  dealTime: DateTime
}

input MsgUpdateManyMutationInput {
  name: String
  phone: String
  message: String
  remarks: String
  deal: Boolean
  dealTime: DateTime
}

input MsgWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  remarks: String
  remarks_not: String
  remarks_in: [String!]
  remarks_not_in: [String!]
  remarks_lt: String
  remarks_lte: String
  remarks_gt: String
  remarks_gte: String
  remarks_contains: String
  remarks_not_contains: String
  remarks_starts_with: String
  remarks_not_starts_with: String
  remarks_ends_with: String
  remarks_not_ends_with: String
  cuser: AdminUserWhereInput
  deal: Boolean
  deal_not: Boolean
  dealTime: DateTime
  dealTime_not: DateTime
  dealTime_in: [DateTime!]
  dealTime_not_in: [DateTime!]
  dealTime_lt: DateTime
  dealTime_lte: DateTime
  dealTime_gt: DateTime
  dealTime_gte: DateTime
  AND: [MsgWhereInput!]
  OR: [MsgWhereInput!]
  NOT: [MsgWhereInput!]
}

input MsgWhereUniqueInput {
  id: Int
}

type Mutation {
  createAdminUser(data: AdminUserCreateInput!): AdminUser!
  updateAdminUser(data: AdminUserUpdateInput!, where: AdminUserWhereUniqueInput!): AdminUser
  updateManyAdminUsers(data: AdminUserUpdateManyMutationInput!, where: AdminUserWhereInput): BatchPayload!
  upsertAdminUser(where: AdminUserWhereUniqueInput!, create: AdminUserCreateInput!, update: AdminUserUpdateInput!): AdminUser!
  deleteAdminUser(where: AdminUserWhereUniqueInput!): AdminUser
  deleteManyAdminUsers(where: AdminUserWhereInput): BatchPayload!
  createMsg(data: MsgCreateInput!): Msg!
  updateMsg(data: MsgUpdateInput!, where: MsgWhereUniqueInput!): Msg
  updateManyMsgs(data: MsgUpdateManyMutationInput!, where: MsgWhereInput): BatchPayload!
  upsertMsg(where: MsgWhereUniqueInput!, create: MsgCreateInput!, update: MsgUpdateInput!): Msg!
  deleteMsg(where: MsgWhereUniqueInput!): Msg
  deleteManyMsgs(where: MsgWhereInput): BatchPayload!
  createPics(data: PicsCreateInput!): Pics!
  updatePics(data: PicsUpdateInput!, where: PicsWhereUniqueInput!): Pics
  updateManyPicses(data: PicsUpdateManyMutationInput!, where: PicsWhereInput): BatchPayload!
  upsertPics(where: PicsWhereUniqueInput!, create: PicsCreateInput!, update: PicsUpdateInput!): Pics!
  deletePics(where: PicsWhereUniqueInput!): Pics
  deleteManyPicses(where: PicsWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pics {
  id: Int!
  page: Int!
  type: Int!
  imgSrc: String
  title: String
  text: String
  cuser: AdminUser
  createdAt: DateTime!
  lastModifiedAt: DateTime!
}

type PicsConnection {
  pageInfo: PageInfo!
  edges: [PicsEdge]!
  aggregate: AggregatePics!
}

input PicsCreateInput {
  id: Int
  page: Int!
  type: Int!
  imgSrc: String
  title: String
  text: String
  cuser: AdminUserCreateOneInput
}

type PicsEdge {
  node: Pics!
  cursor: String!
}

enum PicsOrderByInput {
  id_ASC
  id_DESC
  page_ASC
  page_DESC
  type_ASC
  type_DESC
  imgSrc_ASC
  imgSrc_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  lastModifiedAt_ASC
  lastModifiedAt_DESC
}

type PicsPreviousValues {
  id: Int!
  page: Int!
  type: Int!
  imgSrc: String
  title: String
  text: String
  createdAt: DateTime!
  lastModifiedAt: DateTime!
}

type PicsSubscriptionPayload {
  mutation: MutationType!
  node: Pics
  updatedFields: [String!]
  previousValues: PicsPreviousValues
}

input PicsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PicsWhereInput
  AND: [PicsSubscriptionWhereInput!]
  OR: [PicsSubscriptionWhereInput!]
  NOT: [PicsSubscriptionWhereInput!]
}

input PicsUpdateInput {
  page: Int
  type: Int
  imgSrc: String
  title: String
  text: String
  cuser: AdminUserUpdateOneInput
}

input PicsUpdateManyMutationInput {
  page: Int
  type: Int
  imgSrc: String
  title: String
  text: String
}

input PicsWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  page: Int
  page_not: Int
  page_in: [Int!]
  page_not_in: [Int!]
  page_lt: Int
  page_lte: Int
  page_gt: Int
  page_gte: Int
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  imgSrc: String
  imgSrc_not: String
  imgSrc_in: [String!]
  imgSrc_not_in: [String!]
  imgSrc_lt: String
  imgSrc_lte: String
  imgSrc_gt: String
  imgSrc_gte: String
  imgSrc_contains: String
  imgSrc_not_contains: String
  imgSrc_starts_with: String
  imgSrc_not_starts_with: String
  imgSrc_ends_with: String
  imgSrc_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  cuser: AdminUserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastModifiedAt: DateTime
  lastModifiedAt_not: DateTime
  lastModifiedAt_in: [DateTime!]
  lastModifiedAt_not_in: [DateTime!]
  lastModifiedAt_lt: DateTime
  lastModifiedAt_lte: DateTime
  lastModifiedAt_gt: DateTime
  lastModifiedAt_gte: DateTime
  AND: [PicsWhereInput!]
  OR: [PicsWhereInput!]
  NOT: [PicsWhereInput!]
}

input PicsWhereUniqueInput {
  id: Int
}

type Post {
  id: ID!
  createdAt: DateTime!
  title: String!
  published: Boolean!
  author: AdminUser!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  published: Boolean
  author: AdminUserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  published: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  author: AdminUserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: AdminUserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  adminUser(where: AdminUserWhereUniqueInput!): AdminUser
  adminUsers(where: AdminUserWhereInput, orderBy: AdminUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminUser]!
  adminUsersConnection(where: AdminUserWhereInput, orderBy: AdminUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminUserConnection!
  msg(where: MsgWhereUniqueInput!): Msg
  msgs(where: MsgWhereInput, orderBy: MsgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Msg]!
  msgsConnection(where: MsgWhereInput, orderBy: MsgOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MsgConnection!
  pics(where: PicsWhereUniqueInput!): Pics
  picses(where: PicsWhereInput, orderBy: PicsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pics]!
  picsesConnection(where: PicsWhereInput, orderBy: PicsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PicsConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  node(id: ID!): Node
}

type Role {
  id: Int!
  name: String
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  id: Int
  name: String
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type RolePreviousValues {
  id: Int!
  name: String
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  name: String
}

input RoleUpdateInput {
  name: String
}

input RoleUpdateManyMutationInput {
  name: String
}

input RoleUpdateOneInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RoleWhereUniqueInput
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: Int
}

type Subscription {
  adminUser(where: AdminUserSubscriptionWhereInput): AdminUserSubscriptionPayload
  msg(where: MsgSubscriptionWhereInput): MsgSubscriptionPayload
  pics(where: PicsSubscriptionWhereInput): PicsSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
}
`