// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  chongduAccount: (where?: ChongduAccountWhereInput) => Promise<boolean>;
  chongduAddress: (where?: ChongduAddressWhereInput) => Promise<boolean>;
  chongduAddressRelation: (
    where?: ChongduAddressRelationWhereInput
  ) => Promise<boolean>;
  chongduAdmin: (where?: ChongduAdminWhereInput) => Promise<boolean>;
  chongduAdminRole: (where?: ChongduAdminRoleWhereInput) => Promise<boolean>;
  chongduAdvertisement: (
    where?: ChongduAdvertisementWhereInput
  ) => Promise<boolean>;
  chongduAdvice: (where?: ChongduAdviceWhereInput) => Promise<boolean>;
  chongduAgent: (where?: ChongduAgentWhereInput) => Promise<boolean>;
  chongduAppVersion: (where?: ChongduAppVersionWhereInput) => Promise<boolean>;
  chongduAppointment: (
    where?: ChongduAppointmentWhereInput
  ) => Promise<boolean>;
  chongduCart: (where?: ChongduCartWhereInput) => Promise<boolean>;
  chongduCity: (where?: ChongduCityWhereInput) => Promise<boolean>;
  chongduComment: (where?: ChongduCommentWhereInput) => Promise<boolean>;
  chongduCommentPraise: (
    where?: ChongduCommentPraiseWhereInput
  ) => Promise<boolean>;
  chongduCommentReply: (
    where?: ChongduCommentReplyWhereInput
  ) => Promise<boolean>;
  chongduCommentReview: (
    where?: ChongduCommentReviewWhereInput
  ) => Promise<boolean>;
  chongduCompanyauthent: (
    where?: ChongduCompanyauthentWhereInput
  ) => Promise<boolean>;
  chongduCompanyauthentLog: (
    where?: ChongduCompanyauthentLogWhereInput
  ) => Promise<boolean>;
  chongduCompanyrecommend: (
    where?: ChongduCompanyrecommendWhereInput
  ) => Promise<boolean>;
  chongduCorrelation: (
    where?: ChongduCorrelationWhereInput
  ) => Promise<boolean>;
  chongduDataVersion: (
    where?: ChongduDataVersionWhereInput
  ) => Promise<boolean>;
  chongduDiscuss: (where?: ChongduDiscussWhereInput) => Promise<boolean>;
  chongduFilemanage: (where?: ChongduFilemanageWhereInput) => Promise<boolean>;
  chongduFocusing: (where?: ChongduFocusingWhereInput) => Promise<boolean>;
  chongduInform: (where?: ChongduInformWhereInput) => Promise<boolean>;
  chongduLock: (where?: ChongduLockWhereInput) => Promise<boolean>;
  chongduLog: (where?: ChongduLogWhereInput) => Promise<boolean>;
  chongduLoginLog: (where?: ChongduLoginLogWhereInput) => Promise<boolean>;
  chongduMenu: (where?: ChongduMenuWhereInput) => Promise<boolean>;
  chongduMerchant: (where?: ChongduMerchantWhereInput) => Promise<boolean>;
  chongduMerchantImg: (
    where?: ChongduMerchantImgWhereInput
  ) => Promise<boolean>;
  chongduMerchantstatistic: (
    where?: ChongduMerchantstatisticWhereInput
  ) => Promise<boolean>;
  chongduMessage: (where?: ChongduMessageWhereInput) => Promise<boolean>;
  chongduModel: (where?: ChongduModelWhereInput) => Promise<boolean>;
  chongduModeldetail: (
    where?: ChongduModeldetailWhereInput
  ) => Promise<boolean>;
  chongduOrder: (where?: ChongduOrderWhereInput) => Promise<boolean>;
  chongduOrderItem: (where?: ChongduOrderItemWhereInput) => Promise<boolean>;
  chongduOrderinvoice: (
    where?: ChongduOrderinvoiceWhereInput
  ) => Promise<boolean>;
  chongduOrderinvoicedetail: (
    where?: ChongduOrderinvoicedetailWhereInput
  ) => Promise<boolean>;
  chongduOrderserial: (
    where?: ChongduOrderserialWhereInput
  ) => Promise<boolean>;
  chongduOrderstatistic: (
    where?: ChongduOrderstatisticWhereInput
  ) => Promise<boolean>;
  chongduPayInfo: (where?: ChongduPayInfoWhereInput) => Promise<boolean>;
  chongduPermission: (where?: ChongduPermissionWhereInput) => Promise<boolean>;
  chongduPet: (where?: ChongduPetWhereInput) => Promise<boolean>;
  chongduPetCard: (where?: ChongduPetCardWhereInput) => Promise<boolean>;
  chongduPetImg: (where?: ChongduPetImgWhereInput) => Promise<boolean>;
  chongduPetRecommend: (
    where?: ChongduPetRecommendWhereInput
  ) => Promise<boolean>;
  chongduPetType: (where?: ChongduPetTypeWhereInput) => Promise<boolean>;
  chongduPetauthentLog: (
    where?: ChongduPetauthentLogWhereInput
  ) => Promise<boolean>;
  chongduPetauthentdetail: (
    where?: ChongduPetauthentdetailWhereInput
  ) => Promise<boolean>;
  chongduPlatformBusiness: (
    where?: ChongduPlatformBusinessWhereInput
  ) => Promise<boolean>;
  chongduPlatformExecute: (
    where?: ChongduPlatformExecuteWhereInput
  ) => Promise<boolean>;
  chongduProduct: (where?: ChongduProductWhereInput) => Promise<boolean>;
  chongduProductAuthentdetail: (
    where?: ChongduProductAuthentdetailWhereInput
  ) => Promise<boolean>;
  chongduProductBrand: (
    where?: ChongduProductBrandWhereInput
  ) => Promise<boolean>;
  chongduProductImg: (where?: ChongduProductImgWhereInput) => Promise<boolean>;
  chongduProductPettype: (
    where?: ChongduProductPettypeWhereInput
  ) => Promise<boolean>;
  chongduProductRecommend: (
    where?: ChongduProductRecommendWhereInput
  ) => Promise<boolean>;
  chongduProductSku: (where?: ChongduProductSkuWhereInput) => Promise<boolean>;
  chongduProductType: (
    where?: ChongduProductTypeWhereInput
  ) => Promise<boolean>;
  chongduProductauthentLog: (
    where?: ChongduProductauthentLogWhereInput
  ) => Promise<boolean>;
  chongduRecommend: (where?: ChongduRecommendWhereInput) => Promise<boolean>;
  chongduRefresh: (where?: ChongduRefreshWhereInput) => Promise<boolean>;
  chongduRepellent: (where?: ChongduRepellentWhereInput) => Promise<boolean>;
  chongduRole: (where?: ChongduRoleWhereInput) => Promise<boolean>;
  chongduRoleAuth: (where?: ChongduRoleAuthWhereInput) => Promise<boolean>;
  chongduRoleDetail: (where?: ChongduRoleDetailWhereInput) => Promise<boolean>;
  chongduRoleGroup: (where?: ChongduRoleGroupWhereInput) => Promise<boolean>;
  chongduRoleMenu: (where?: ChongduRoleMenuWhereInput) => Promise<boolean>;
  chongduRoleMenuChildren: (
    where?: ChongduRoleMenuChildrenWhereInput
  ) => Promise<boolean>;
  chongduSearchthink: (
    where?: ChongduSearchthinkWhereInput
  ) => Promise<boolean>;
  chongduService: (where?: ChongduServiceWhereInput) => Promise<boolean>;
  chongduServiceAuthentdetail: (
    where?: ChongduServiceAuthentdetailWhereInput
  ) => Promise<boolean>;
  chongduServiceImg: (where?: ChongduServiceImgWhereInput) => Promise<boolean>;
  chongduServicePettype: (
    where?: ChongduServicePettypeWhereInput
  ) => Promise<boolean>;
  chongduServiceRecommend: (
    where?: ChongduServiceRecommendWhereInput
  ) => Promise<boolean>;
  chongduServiceType: (
    where?: ChongduServiceTypeWhereInput
  ) => Promise<boolean>;
  chongduServiceauthentLog: (
    where?: ChongduServiceauthentLogWhereInput
  ) => Promise<boolean>;
  chongduStat: (where?: ChongduStatWhereInput) => Promise<boolean>;
  chongduTag: (where?: ChongduTagWhereInput) => Promise<boolean>;
  chongduTagDetail: (where?: ChongduTagDetailWhereInput) => Promise<boolean>;
  chongduTradingArea: (
    where?: ChongduTradingAreaWhereInput
  ) => Promise<boolean>;
  chongduUser: (where?: ChongduUserWhereInput) => Promise<boolean>;
  chongduUserFavourite: (
    where?: ChongduUserFavouriteWhereInput
  ) => Promise<boolean>;
  chongduUserauthent: (
    where?: ChongduUserauthentWhereInput
  ) => Promise<boolean>;
  chongduUserauthentLog: (
    where?: ChongduUserauthentLogWhereInput
  ) => Promise<boolean>;
  chongduUserbind: (where?: ChongduUserbindWhereInput) => Promise<boolean>;
  chongduUserdetail: (where?: ChongduUserdetailWhereInput) => Promise<boolean>;
  chongduUserstatistic: (
    where?: ChongduUserstatisticWhereInput
  ) => Promise<boolean>;
  chongduVaccine: (where?: ChongduVaccineWhereInput) => Promise<boolean>;
  chongduVaccineBrand: (
    where?: ChongduVaccineBrandWhereInput
  ) => Promise<boolean>;
  chongduValidate: (where?: ChongduValidateWhereInput) => Promise<boolean>;
  chongduVersion: (where?: ChongduVersionWhereInput) => Promise<boolean>;
  chongduViewcount: (where?: ChongduViewcountWhereInput) => Promise<boolean>;
  chongduWorld: (where?: ChongduWorldWhereInput) => Promise<boolean>;
  chongduWorldComment: (
    where?: ChongduWorldCommentWhereInput
  ) => Promise<boolean>;
  chongduWorldJoin: (where?: ChongduWorldJoinWhereInput) => Promise<boolean>;
  chongduWorldLike: (where?: ChongduWorldLikeWhereInput) => Promise<boolean>;
  chongduWorldReply: (where?: ChongduWorldReplyWhereInput) => Promise<boolean>;
  chongduWorldShield: (
    where?: ChongduWorldShieldWhereInput
  ) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  chongduAccount: (
    where: ChongduAccountWhereUniqueInput
  ) => ChongduAccountNullablePromise;
  chongduAccounts: (args?: {
    where?: ChongduAccountWhereInput;
    orderBy?: ChongduAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAccount>;
  chongduAccountsConnection: (args?: {
    where?: ChongduAccountWhereInput;
    orderBy?: ChongduAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAccountConnectionPromise;
  chongduAddress: (
    where: ChongduAddressWhereUniqueInput
  ) => ChongduAddressNullablePromise;
  chongduAddresses: (args?: {
    where?: ChongduAddressWhereInput;
    orderBy?: ChongduAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAddress>;
  chongduAddressesConnection: (args?: {
    where?: ChongduAddressWhereInput;
    orderBy?: ChongduAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAddressConnectionPromise;
  chongduAddressRelation: (
    where: ChongduAddressRelationWhereUniqueInput
  ) => ChongduAddressRelationNullablePromise;
  chongduAddressRelations: (args?: {
    where?: ChongduAddressRelationWhereInput;
    orderBy?: ChongduAddressRelationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAddressRelation>;
  chongduAddressRelationsConnection: (args?: {
    where?: ChongduAddressRelationWhereInput;
    orderBy?: ChongduAddressRelationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAddressRelationConnectionPromise;
  chongduAdmin: (
    where: ChongduAdminWhereUniqueInput
  ) => ChongduAdminNullablePromise;
  chongduAdmins: (args?: {
    where?: ChongduAdminWhereInput;
    orderBy?: ChongduAdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAdmin>;
  chongduAdminsConnection: (args?: {
    where?: ChongduAdminWhereInput;
    orderBy?: ChongduAdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAdminConnectionPromise;
  chongduAdminRole: (
    where: ChongduAdminRoleWhereUniqueInput
  ) => ChongduAdminRoleNullablePromise;
  chongduAdminRoles: (args?: {
    where?: ChongduAdminRoleWhereInput;
    orderBy?: ChongduAdminRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAdminRole>;
  chongduAdminRolesConnection: (args?: {
    where?: ChongduAdminRoleWhereInput;
    orderBy?: ChongduAdminRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAdminRoleConnectionPromise;
  chongduAdvertisement: (
    where: ChongduAdvertisementWhereUniqueInput
  ) => ChongduAdvertisementNullablePromise;
  chongduAdvertisements: (args?: {
    where?: ChongduAdvertisementWhereInput;
    orderBy?: ChongduAdvertisementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAdvertisement>;
  chongduAdvertisementsConnection: (args?: {
    where?: ChongduAdvertisementWhereInput;
    orderBy?: ChongduAdvertisementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAdvertisementConnectionPromise;
  chongduAdvice: (
    where: ChongduAdviceWhereUniqueInput
  ) => ChongduAdviceNullablePromise;
  chongduAdvices: (args?: {
    where?: ChongduAdviceWhereInput;
    orderBy?: ChongduAdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAdvice>;
  chongduAdvicesConnection: (args?: {
    where?: ChongduAdviceWhereInput;
    orderBy?: ChongduAdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAdviceConnectionPromise;
  chongduAgent: (
    where: ChongduAgentWhereUniqueInput
  ) => ChongduAgentNullablePromise;
  chongduAgents: (args?: {
    where?: ChongduAgentWhereInput;
    orderBy?: ChongduAgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAgent>;
  chongduAgentsConnection: (args?: {
    where?: ChongduAgentWhereInput;
    orderBy?: ChongduAgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAgentConnectionPromise;
  chongduAppVersion: (
    where: ChongduAppVersionWhereUniqueInput
  ) => ChongduAppVersionNullablePromise;
  chongduAppVersions: (args?: {
    where?: ChongduAppVersionWhereInput;
    orderBy?: ChongduAppVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAppVersion>;
  chongduAppVersionsConnection: (args?: {
    where?: ChongduAppVersionWhereInput;
    orderBy?: ChongduAppVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAppVersionConnectionPromise;
  chongduAppointment: (
    where: ChongduAppointmentWhereUniqueInput
  ) => ChongduAppointmentNullablePromise;
  chongduAppointments: (args?: {
    where?: ChongduAppointmentWhereInput;
    orderBy?: ChongduAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduAppointment>;
  chongduAppointmentsConnection: (args?: {
    where?: ChongduAppointmentWhereInput;
    orderBy?: ChongduAppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduAppointmentConnectionPromise;
  chongduCart: (
    where: ChongduCartWhereUniqueInput
  ) => ChongduCartNullablePromise;
  chongduCarts: (args?: {
    where?: ChongduCartWhereInput;
    orderBy?: ChongduCartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCart>;
  chongduCartsConnection: (args?: {
    where?: ChongduCartWhereInput;
    orderBy?: ChongduCartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCartConnectionPromise;
  chongduCity: (
    where: ChongduCityWhereUniqueInput
  ) => ChongduCityNullablePromise;
  chongduCities: (args?: {
    where?: ChongduCityWhereInput;
    orderBy?: ChongduCityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCity>;
  chongduCitiesConnection: (args?: {
    where?: ChongduCityWhereInput;
    orderBy?: ChongduCityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCityConnectionPromise;
  chongduComment: (
    where: ChongduCommentWhereUniqueInput
  ) => ChongduCommentNullablePromise;
  chongduComments: (args?: {
    where?: ChongduCommentWhereInput;
    orderBy?: ChongduCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduComment>;
  chongduCommentsConnection: (args?: {
    where?: ChongduCommentWhereInput;
    orderBy?: ChongduCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCommentConnectionPromise;
  chongduCommentPraise: (
    where: ChongduCommentPraiseWhereUniqueInput
  ) => ChongduCommentPraiseNullablePromise;
  chongduCommentPraises: (args?: {
    where?: ChongduCommentPraiseWhereInput;
    orderBy?: ChongduCommentPraiseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCommentPraise>;
  chongduCommentPraisesConnection: (args?: {
    where?: ChongduCommentPraiseWhereInput;
    orderBy?: ChongduCommentPraiseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCommentPraiseConnectionPromise;
  chongduCommentReply: (
    where: ChongduCommentReplyWhereUniqueInput
  ) => ChongduCommentReplyNullablePromise;
  chongduCommentReplies: (args?: {
    where?: ChongduCommentReplyWhereInput;
    orderBy?: ChongduCommentReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCommentReply>;
  chongduCommentRepliesConnection: (args?: {
    where?: ChongduCommentReplyWhereInput;
    orderBy?: ChongduCommentReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCommentReplyConnectionPromise;
  chongduCommentReview: (
    where: ChongduCommentReviewWhereUniqueInput
  ) => ChongduCommentReviewNullablePromise;
  chongduCommentReviews: (args?: {
    where?: ChongduCommentReviewWhereInput;
    orderBy?: ChongduCommentReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCommentReview>;
  chongduCommentReviewsConnection: (args?: {
    where?: ChongduCommentReviewWhereInput;
    orderBy?: ChongduCommentReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCommentReviewConnectionPromise;
  chongduCompanyauthent: (
    where: ChongduCompanyauthentWhereUniqueInput
  ) => ChongduCompanyauthentNullablePromise;
  chongduCompanyauthents: (args?: {
    where?: ChongduCompanyauthentWhereInput;
    orderBy?: ChongduCompanyauthentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCompanyauthent>;
  chongduCompanyauthentsConnection: (args?: {
    where?: ChongduCompanyauthentWhereInput;
    orderBy?: ChongduCompanyauthentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCompanyauthentConnectionPromise;
  chongduCompanyauthentLog: (
    where: ChongduCompanyauthentLogWhereUniqueInput
  ) => ChongduCompanyauthentLogNullablePromise;
  chongduCompanyauthentLogs: (args?: {
    where?: ChongduCompanyauthentLogWhereInput;
    orderBy?: ChongduCompanyauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCompanyauthentLog>;
  chongduCompanyauthentLogsConnection: (args?: {
    where?: ChongduCompanyauthentLogWhereInput;
    orderBy?: ChongduCompanyauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCompanyauthentLogConnectionPromise;
  chongduCompanyrecommend: (
    where: ChongduCompanyrecommendWhereUniqueInput
  ) => ChongduCompanyrecommendNullablePromise;
  chongduCompanyrecommends: (args?: {
    where?: ChongduCompanyrecommendWhereInput;
    orderBy?: ChongduCompanyrecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCompanyrecommend>;
  chongduCompanyrecommendsConnection: (args?: {
    where?: ChongduCompanyrecommendWhereInput;
    orderBy?: ChongduCompanyrecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCompanyrecommendConnectionPromise;
  chongduCorrelation: (
    where: ChongduCorrelationWhereUniqueInput
  ) => ChongduCorrelationNullablePromise;
  chongduCorrelations: (args?: {
    where?: ChongduCorrelationWhereInput;
    orderBy?: ChongduCorrelationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduCorrelation>;
  chongduCorrelationsConnection: (args?: {
    where?: ChongduCorrelationWhereInput;
    orderBy?: ChongduCorrelationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduCorrelationConnectionPromise;
  chongduDataVersion: (
    where: ChongduDataVersionWhereUniqueInput
  ) => ChongduDataVersionNullablePromise;
  chongduDataVersions: (args?: {
    where?: ChongduDataVersionWhereInput;
    orderBy?: ChongduDataVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduDataVersion>;
  chongduDataVersionsConnection: (args?: {
    where?: ChongduDataVersionWhereInput;
    orderBy?: ChongduDataVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduDataVersionConnectionPromise;
  chongduDiscuss: (
    where: ChongduDiscussWhereUniqueInput
  ) => ChongduDiscussNullablePromise;
  chongduDiscusses: (args?: {
    where?: ChongduDiscussWhereInput;
    orderBy?: ChongduDiscussOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduDiscuss>;
  chongduDiscussesConnection: (args?: {
    where?: ChongduDiscussWhereInput;
    orderBy?: ChongduDiscussOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduDiscussConnectionPromise;
  chongduFilemanage: (
    where: ChongduFilemanageWhereUniqueInput
  ) => ChongduFilemanageNullablePromise;
  chongduFilemanages: (args?: {
    where?: ChongduFilemanageWhereInput;
    orderBy?: ChongduFilemanageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduFilemanage>;
  chongduFilemanagesConnection: (args?: {
    where?: ChongduFilemanageWhereInput;
    orderBy?: ChongduFilemanageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduFilemanageConnectionPromise;
  chongduFocusing: (
    where: ChongduFocusingWhereUniqueInput
  ) => ChongduFocusingNullablePromise;
  chongduFocusings: (args?: {
    where?: ChongduFocusingWhereInput;
    orderBy?: ChongduFocusingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduFocusing>;
  chongduFocusingsConnection: (args?: {
    where?: ChongduFocusingWhereInput;
    orderBy?: ChongduFocusingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduFocusingConnectionPromise;
  chongduInform: (
    where: ChongduInformWhereUniqueInput
  ) => ChongduInformNullablePromise;
  chongduInforms: (args?: {
    where?: ChongduInformWhereInput;
    orderBy?: ChongduInformOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduInform>;
  chongduInformsConnection: (args?: {
    where?: ChongduInformWhereInput;
    orderBy?: ChongduInformOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduInformConnectionPromise;
  chongduLock: (
    where: ChongduLockWhereUniqueInput
  ) => ChongduLockNullablePromise;
  chongduLocks: (args?: {
    where?: ChongduLockWhereInput;
    orderBy?: ChongduLockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduLock>;
  chongduLocksConnection: (args?: {
    where?: ChongduLockWhereInput;
    orderBy?: ChongduLockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduLockConnectionPromise;
  chongduLog: (where: ChongduLogWhereUniqueInput) => ChongduLogNullablePromise;
  chongduLogs: (args?: {
    where?: ChongduLogWhereInput;
    orderBy?: ChongduLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduLog>;
  chongduLogsConnection: (args?: {
    where?: ChongduLogWhereInput;
    orderBy?: ChongduLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduLogConnectionPromise;
  chongduLoginLog: (
    where: ChongduLoginLogWhereUniqueInput
  ) => ChongduLoginLogNullablePromise;
  chongduLoginLogs: (args?: {
    where?: ChongduLoginLogWhereInput;
    orderBy?: ChongduLoginLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduLoginLog>;
  chongduLoginLogsConnection: (args?: {
    where?: ChongduLoginLogWhereInput;
    orderBy?: ChongduLoginLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduLoginLogConnectionPromise;
  chongduMenu: (
    where: ChongduMenuWhereUniqueInput
  ) => ChongduMenuNullablePromise;
  chongduMenus: (args?: {
    where?: ChongduMenuWhereInput;
    orderBy?: ChongduMenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduMenu>;
  chongduMenusConnection: (args?: {
    where?: ChongduMenuWhereInput;
    orderBy?: ChongduMenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduMenuConnectionPromise;
  chongduMerchant: (
    where: ChongduMerchantWhereUniqueInput
  ) => ChongduMerchantNullablePromise;
  chongduMerchants: (args?: {
    where?: ChongduMerchantWhereInput;
    orderBy?: ChongduMerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduMerchant>;
  chongduMerchantsConnection: (args?: {
    where?: ChongduMerchantWhereInput;
    orderBy?: ChongduMerchantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduMerchantConnectionPromise;
  chongduMerchantImg: (
    where: ChongduMerchantImgWhereUniqueInput
  ) => ChongduMerchantImgNullablePromise;
  chongduMerchantImgs: (args?: {
    where?: ChongduMerchantImgWhereInput;
    orderBy?: ChongduMerchantImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduMerchantImg>;
  chongduMerchantImgsConnection: (args?: {
    where?: ChongduMerchantImgWhereInput;
    orderBy?: ChongduMerchantImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduMerchantImgConnectionPromise;
  chongduMerchantstatistic: (
    where: ChongduMerchantstatisticWhereUniqueInput
  ) => ChongduMerchantstatisticNullablePromise;
  chongduMerchantstatistics: (args?: {
    where?: ChongduMerchantstatisticWhereInput;
    orderBy?: ChongduMerchantstatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduMerchantstatistic>;
  chongduMerchantstatisticsConnection: (args?: {
    where?: ChongduMerchantstatisticWhereInput;
    orderBy?: ChongduMerchantstatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduMerchantstatisticConnectionPromise;
  chongduMessage: (
    where: ChongduMessageWhereUniqueInput
  ) => ChongduMessageNullablePromise;
  chongduMessages: (args?: {
    where?: ChongduMessageWhereInput;
    orderBy?: ChongduMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduMessage>;
  chongduMessagesConnection: (args?: {
    where?: ChongduMessageWhereInput;
    orderBy?: ChongduMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduMessageConnectionPromise;
  chongduModel: (
    where: ChongduModelWhereUniqueInput
  ) => ChongduModelNullablePromise;
  chongduModels: (args?: {
    where?: ChongduModelWhereInput;
    orderBy?: ChongduModelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduModel>;
  chongduModelsConnection: (args?: {
    where?: ChongduModelWhereInput;
    orderBy?: ChongduModelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduModelConnectionPromise;
  chongduModeldetail: (
    where: ChongduModeldetailWhereUniqueInput
  ) => ChongduModeldetailNullablePromise;
  chongduModeldetails: (args?: {
    where?: ChongduModeldetailWhereInput;
    orderBy?: ChongduModeldetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduModeldetail>;
  chongduModeldetailsConnection: (args?: {
    where?: ChongduModeldetailWhereInput;
    orderBy?: ChongduModeldetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduModeldetailConnectionPromise;
  chongduOrder: (
    where: ChongduOrderWhereUniqueInput
  ) => ChongduOrderNullablePromise;
  chongduOrders: (args?: {
    where?: ChongduOrderWhereInput;
    orderBy?: ChongduOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduOrder>;
  chongduOrdersConnection: (args?: {
    where?: ChongduOrderWhereInput;
    orderBy?: ChongduOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduOrderConnectionPromise;
  chongduOrderItem: (
    where: ChongduOrderItemWhereUniqueInput
  ) => ChongduOrderItemNullablePromise;
  chongduOrderItems: (args?: {
    where?: ChongduOrderItemWhereInput;
    orderBy?: ChongduOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduOrderItem>;
  chongduOrderItemsConnection: (args?: {
    where?: ChongduOrderItemWhereInput;
    orderBy?: ChongduOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduOrderItemConnectionPromise;
  chongduOrderinvoice: (
    where: ChongduOrderinvoiceWhereUniqueInput
  ) => ChongduOrderinvoiceNullablePromise;
  chongduOrderinvoices: (args?: {
    where?: ChongduOrderinvoiceWhereInput;
    orderBy?: ChongduOrderinvoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduOrderinvoice>;
  chongduOrderinvoicesConnection: (args?: {
    where?: ChongduOrderinvoiceWhereInput;
    orderBy?: ChongduOrderinvoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduOrderinvoiceConnectionPromise;
  chongduOrderinvoicedetail: (
    where: ChongduOrderinvoicedetailWhereUniqueInput
  ) => ChongduOrderinvoicedetailNullablePromise;
  chongduOrderinvoicedetails: (args?: {
    where?: ChongduOrderinvoicedetailWhereInput;
    orderBy?: ChongduOrderinvoicedetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduOrderinvoicedetail>;
  chongduOrderinvoicedetailsConnection: (args?: {
    where?: ChongduOrderinvoicedetailWhereInput;
    orderBy?: ChongduOrderinvoicedetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduOrderinvoicedetailConnectionPromise;
  chongduOrderserial: (
    where: ChongduOrderserialWhereUniqueInput
  ) => ChongduOrderserialNullablePromise;
  chongduOrderserials: (args?: {
    where?: ChongduOrderserialWhereInput;
    orderBy?: ChongduOrderserialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduOrderserial>;
  chongduOrderserialsConnection: (args?: {
    where?: ChongduOrderserialWhereInput;
    orderBy?: ChongduOrderserialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduOrderserialConnectionPromise;
  chongduOrderstatistic: (
    where: ChongduOrderstatisticWhereUniqueInput
  ) => ChongduOrderstatisticNullablePromise;
  chongduOrderstatistics: (args?: {
    where?: ChongduOrderstatisticWhereInput;
    orderBy?: ChongduOrderstatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduOrderstatistic>;
  chongduOrderstatisticsConnection: (args?: {
    where?: ChongduOrderstatisticWhereInput;
    orderBy?: ChongduOrderstatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduOrderstatisticConnectionPromise;
  chongduPayInfo: (
    where: ChongduPayInfoWhereUniqueInput
  ) => ChongduPayInfoNullablePromise;
  chongduPayInfoes: (args?: {
    where?: ChongduPayInfoWhereInput;
    orderBy?: ChongduPayInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPayInfo>;
  chongduPayInfoesConnection: (args?: {
    where?: ChongduPayInfoWhereInput;
    orderBy?: ChongduPayInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPayInfoConnectionPromise;
  chongduPermission: (
    where: ChongduPermissionWhereUniqueInput
  ) => ChongduPermissionNullablePromise;
  chongduPermissions: (args?: {
    where?: ChongduPermissionWhereInput;
    orderBy?: ChongduPermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPermission>;
  chongduPermissionsConnection: (args?: {
    where?: ChongduPermissionWhereInput;
    orderBy?: ChongduPermissionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPermissionConnectionPromise;
  chongduPet: (where: ChongduPetWhereUniqueInput) => ChongduPetNullablePromise;
  chongduPets: (args?: {
    where?: ChongduPetWhereInput;
    orderBy?: ChongduPetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPet>;
  chongduPetsConnection: (args?: {
    where?: ChongduPetWhereInput;
    orderBy?: ChongduPetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetConnectionPromise;
  chongduPetCard: (
    where: ChongduPetCardWhereUniqueInput
  ) => ChongduPetCardNullablePromise;
  chongduPetCards: (args?: {
    where?: ChongduPetCardWhereInput;
    orderBy?: ChongduPetCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPetCard>;
  chongduPetCardsConnection: (args?: {
    where?: ChongduPetCardWhereInput;
    orderBy?: ChongduPetCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetCardConnectionPromise;
  chongduPetImg: (
    where: ChongduPetImgWhereUniqueInput
  ) => ChongduPetImgNullablePromise;
  chongduPetImgs: (args?: {
    where?: ChongduPetImgWhereInput;
    orderBy?: ChongduPetImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPetImg>;
  chongduPetImgsConnection: (args?: {
    where?: ChongduPetImgWhereInput;
    orderBy?: ChongduPetImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetImgConnectionPromise;
  chongduPetRecommend: (
    where: ChongduPetRecommendWhereUniqueInput
  ) => ChongduPetRecommendNullablePromise;
  chongduPetRecommends: (args?: {
    where?: ChongduPetRecommendWhereInput;
    orderBy?: ChongduPetRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPetRecommend>;
  chongduPetRecommendsConnection: (args?: {
    where?: ChongduPetRecommendWhereInput;
    orderBy?: ChongduPetRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetRecommendConnectionPromise;
  chongduPetType: (
    where: ChongduPetTypeWhereUniqueInput
  ) => ChongduPetTypeNullablePromise;
  chongduPetTypes: (args?: {
    where?: ChongduPetTypeWhereInput;
    orderBy?: ChongduPetTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPetType>;
  chongduPetTypesConnection: (args?: {
    where?: ChongduPetTypeWhereInput;
    orderBy?: ChongduPetTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetTypeConnectionPromise;
  chongduPetauthentLog: (
    where: ChongduPetauthentLogWhereUniqueInput
  ) => ChongduPetauthentLogNullablePromise;
  chongduPetauthentLogs: (args?: {
    where?: ChongduPetauthentLogWhereInput;
    orderBy?: ChongduPetauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPetauthentLog>;
  chongduPetauthentLogsConnection: (args?: {
    where?: ChongduPetauthentLogWhereInput;
    orderBy?: ChongduPetauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetauthentLogConnectionPromise;
  chongduPetauthentdetail: (
    where: ChongduPetauthentdetailWhereUniqueInput
  ) => ChongduPetauthentdetailNullablePromise;
  chongduPetauthentdetails: (args?: {
    where?: ChongduPetauthentdetailWhereInput;
    orderBy?: ChongduPetauthentdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPetauthentdetail>;
  chongduPetauthentdetailsConnection: (args?: {
    where?: ChongduPetauthentdetailWhereInput;
    orderBy?: ChongduPetauthentdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPetauthentdetailConnectionPromise;
  chongduPlatformBusiness: (
    where: ChongduPlatformBusinessWhereUniqueInput
  ) => ChongduPlatformBusinessNullablePromise;
  chongduPlatformBusinesses: (args?: {
    where?: ChongduPlatformBusinessWhereInput;
    orderBy?: ChongduPlatformBusinessOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPlatformBusiness>;
  chongduPlatformBusinessesConnection: (args?: {
    where?: ChongduPlatformBusinessWhereInput;
    orderBy?: ChongduPlatformBusinessOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPlatformBusinessConnectionPromise;
  chongduPlatformExecute: (
    where: ChongduPlatformExecuteWhereUniqueInput
  ) => ChongduPlatformExecuteNullablePromise;
  chongduPlatformExecutes: (args?: {
    where?: ChongduPlatformExecuteWhereInput;
    orderBy?: ChongduPlatformExecuteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduPlatformExecute>;
  chongduPlatformExecutesConnection: (args?: {
    where?: ChongduPlatformExecuteWhereInput;
    orderBy?: ChongduPlatformExecuteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduPlatformExecuteConnectionPromise;
  chongduProduct: (
    where: ChongduProductWhereUniqueInput
  ) => ChongduProductNullablePromise;
  chongduProducts: (args?: {
    where?: ChongduProductWhereInput;
    orderBy?: ChongduProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProduct>;
  chongduProductsConnection: (args?: {
    where?: ChongduProductWhereInput;
    orderBy?: ChongduProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductConnectionPromise;
  chongduProductAuthentdetail: (
    where: ChongduProductAuthentdetailWhereUniqueInput
  ) => ChongduProductAuthentdetailNullablePromise;
  chongduProductAuthentdetails: (args?: {
    where?: ChongduProductAuthentdetailWhereInput;
    orderBy?: ChongduProductAuthentdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductAuthentdetail>;
  chongduProductAuthentdetailsConnection: (args?: {
    where?: ChongduProductAuthentdetailWhereInput;
    orderBy?: ChongduProductAuthentdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductAuthentdetailConnectionPromise;
  chongduProductBrand: (
    where: ChongduProductBrandWhereUniqueInput
  ) => ChongduProductBrandNullablePromise;
  chongduProductBrands: (args?: {
    where?: ChongduProductBrandWhereInput;
    orderBy?: ChongduProductBrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductBrand>;
  chongduProductBrandsConnection: (args?: {
    where?: ChongduProductBrandWhereInput;
    orderBy?: ChongduProductBrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductBrandConnectionPromise;
  chongduProductImg: (
    where: ChongduProductImgWhereUniqueInput
  ) => ChongduProductImgNullablePromise;
  chongduProductImgs: (args?: {
    where?: ChongduProductImgWhereInput;
    orderBy?: ChongduProductImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductImg>;
  chongduProductImgsConnection: (args?: {
    where?: ChongduProductImgWhereInput;
    orderBy?: ChongduProductImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductImgConnectionPromise;
  chongduProductPettype: (
    where: ChongduProductPettypeWhereUniqueInput
  ) => ChongduProductPettypeNullablePromise;
  chongduProductPettypes: (args?: {
    where?: ChongduProductPettypeWhereInput;
    orderBy?: ChongduProductPettypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductPettype>;
  chongduProductPettypesConnection: (args?: {
    where?: ChongduProductPettypeWhereInput;
    orderBy?: ChongduProductPettypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductPettypeConnectionPromise;
  chongduProductRecommend: (
    where: ChongduProductRecommendWhereUniqueInput
  ) => ChongduProductRecommendNullablePromise;
  chongduProductRecommends: (args?: {
    where?: ChongduProductRecommendWhereInput;
    orderBy?: ChongduProductRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductRecommend>;
  chongduProductRecommendsConnection: (args?: {
    where?: ChongduProductRecommendWhereInput;
    orderBy?: ChongduProductRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductRecommendConnectionPromise;
  chongduProductSku: (
    where: ChongduProductSkuWhereUniqueInput
  ) => ChongduProductSkuNullablePromise;
  chongduProductSkus: (args?: {
    where?: ChongduProductSkuWhereInput;
    orderBy?: ChongduProductSkuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductSku>;
  chongduProductSkusConnection: (args?: {
    where?: ChongduProductSkuWhereInput;
    orderBy?: ChongduProductSkuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductSkuConnectionPromise;
  chongduProductType: (
    where: ChongduProductTypeWhereUniqueInput
  ) => ChongduProductTypeNullablePromise;
  chongduProductTypes: (args?: {
    where?: ChongduProductTypeWhereInput;
    orderBy?: ChongduProductTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductType>;
  chongduProductTypesConnection: (args?: {
    where?: ChongduProductTypeWhereInput;
    orderBy?: ChongduProductTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductTypeConnectionPromise;
  chongduProductauthentLog: (
    where: ChongduProductauthentLogWhereUniqueInput
  ) => ChongduProductauthentLogNullablePromise;
  chongduProductauthentLogs: (args?: {
    where?: ChongduProductauthentLogWhereInput;
    orderBy?: ChongduProductauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduProductauthentLog>;
  chongduProductauthentLogsConnection: (args?: {
    where?: ChongduProductauthentLogWhereInput;
    orderBy?: ChongduProductauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduProductauthentLogConnectionPromise;
  chongduRecommend: (
    where: ChongduRecommendWhereUniqueInput
  ) => ChongduRecommendNullablePromise;
  chongduRecommends: (args?: {
    where?: ChongduRecommendWhereInput;
    orderBy?: ChongduRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRecommend>;
  chongduRecommendsConnection: (args?: {
    where?: ChongduRecommendWhereInput;
    orderBy?: ChongduRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRecommendConnectionPromise;
  chongduRefresh: (
    where: ChongduRefreshWhereUniqueInput
  ) => ChongduRefreshNullablePromise;
  chongduRefreshes: (args?: {
    where?: ChongduRefreshWhereInput;
    orderBy?: ChongduRefreshOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRefresh>;
  chongduRefreshesConnection: (args?: {
    where?: ChongduRefreshWhereInput;
    orderBy?: ChongduRefreshOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRefreshConnectionPromise;
  chongduRepellent: (
    where: ChongduRepellentWhereUniqueInput
  ) => ChongduRepellentNullablePromise;
  chongduRepellents: (args?: {
    where?: ChongduRepellentWhereInput;
    orderBy?: ChongduRepellentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRepellent>;
  chongduRepellentsConnection: (args?: {
    where?: ChongduRepellentWhereInput;
    orderBy?: ChongduRepellentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRepellentConnectionPromise;
  chongduRole: (
    where: ChongduRoleWhereUniqueInput
  ) => ChongduRoleNullablePromise;
  chongduRoles: (args?: {
    where?: ChongduRoleWhereInput;
    orderBy?: ChongduRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRole>;
  chongduRolesConnection: (args?: {
    where?: ChongduRoleWhereInput;
    orderBy?: ChongduRoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRoleConnectionPromise;
  chongduRoleAuth: (
    where: ChongduRoleAuthWhereUniqueInput
  ) => ChongduRoleAuthNullablePromise;
  chongduRoleAuths: (args?: {
    where?: ChongduRoleAuthWhereInput;
    orderBy?: ChongduRoleAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRoleAuth>;
  chongduRoleAuthsConnection: (args?: {
    where?: ChongduRoleAuthWhereInput;
    orderBy?: ChongduRoleAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRoleAuthConnectionPromise;
  chongduRoleDetail: (
    where: ChongduRoleDetailWhereUniqueInput
  ) => ChongduRoleDetailNullablePromise;
  chongduRoleDetails: (args?: {
    where?: ChongduRoleDetailWhereInput;
    orderBy?: ChongduRoleDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRoleDetail>;
  chongduRoleDetailsConnection: (args?: {
    where?: ChongduRoleDetailWhereInput;
    orderBy?: ChongduRoleDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRoleDetailConnectionPromise;
  chongduRoleGroup: (
    where: ChongduRoleGroupWhereUniqueInput
  ) => ChongduRoleGroupNullablePromise;
  chongduRoleGroups: (args?: {
    where?: ChongduRoleGroupWhereInput;
    orderBy?: ChongduRoleGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRoleGroup>;
  chongduRoleGroupsConnection: (args?: {
    where?: ChongduRoleGroupWhereInput;
    orderBy?: ChongduRoleGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRoleGroupConnectionPromise;
  chongduRoleMenu: (
    where: ChongduRoleMenuWhereUniqueInput
  ) => ChongduRoleMenuNullablePromise;
  chongduRoleMenus: (args?: {
    where?: ChongduRoleMenuWhereInput;
    orderBy?: ChongduRoleMenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRoleMenu>;
  chongduRoleMenusConnection: (args?: {
    where?: ChongduRoleMenuWhereInput;
    orderBy?: ChongduRoleMenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRoleMenuConnectionPromise;
  chongduRoleMenuChildren: (
    where: ChongduRoleMenuChildrenWhereUniqueInput
  ) => ChongduRoleMenuChildrenNullablePromise;
  chongduRoleMenuChildrens: (args?: {
    where?: ChongduRoleMenuChildrenWhereInput;
    orderBy?: ChongduRoleMenuChildrenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduRoleMenuChildren>;
  chongduRoleMenuChildrensConnection: (args?: {
    where?: ChongduRoleMenuChildrenWhereInput;
    orderBy?: ChongduRoleMenuChildrenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduRoleMenuChildrenConnectionPromise;
  chongduSearchthink: (
    where: ChongduSearchthinkWhereUniqueInput
  ) => ChongduSearchthinkNullablePromise;
  chongduSearchthinks: (args?: {
    where?: ChongduSearchthinkWhereInput;
    orderBy?: ChongduSearchthinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduSearchthink>;
  chongduSearchthinksConnection: (args?: {
    where?: ChongduSearchthinkWhereInput;
    orderBy?: ChongduSearchthinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduSearchthinkConnectionPromise;
  chongduService: (
    where: ChongduServiceWhereUniqueInput
  ) => ChongduServiceNullablePromise;
  chongduServices: (args?: {
    where?: ChongduServiceWhereInput;
    orderBy?: ChongduServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduService>;
  chongduServicesConnection: (args?: {
    where?: ChongduServiceWhereInput;
    orderBy?: ChongduServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServiceConnectionPromise;
  chongduServiceAuthentdetail: (
    where: ChongduServiceAuthentdetailWhereUniqueInput
  ) => ChongduServiceAuthentdetailNullablePromise;
  chongduServiceAuthentdetails: (args?: {
    where?: ChongduServiceAuthentdetailWhereInput;
    orderBy?: ChongduServiceAuthentdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduServiceAuthentdetail>;
  chongduServiceAuthentdetailsConnection: (args?: {
    where?: ChongduServiceAuthentdetailWhereInput;
    orderBy?: ChongduServiceAuthentdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServiceAuthentdetailConnectionPromise;
  chongduServiceImg: (
    where: ChongduServiceImgWhereUniqueInput
  ) => ChongduServiceImgNullablePromise;
  chongduServiceImgs: (args?: {
    where?: ChongduServiceImgWhereInput;
    orderBy?: ChongduServiceImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduServiceImg>;
  chongduServiceImgsConnection: (args?: {
    where?: ChongduServiceImgWhereInput;
    orderBy?: ChongduServiceImgOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServiceImgConnectionPromise;
  chongduServicePettype: (
    where: ChongduServicePettypeWhereUniqueInput
  ) => ChongduServicePettypeNullablePromise;
  chongduServicePettypes: (args?: {
    where?: ChongduServicePettypeWhereInput;
    orderBy?: ChongduServicePettypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduServicePettype>;
  chongduServicePettypesConnection: (args?: {
    where?: ChongduServicePettypeWhereInput;
    orderBy?: ChongduServicePettypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServicePettypeConnectionPromise;
  chongduServiceRecommend: (
    where: ChongduServiceRecommendWhereUniqueInput
  ) => ChongduServiceRecommendNullablePromise;
  chongduServiceRecommends: (args?: {
    where?: ChongduServiceRecommendWhereInput;
    orderBy?: ChongduServiceRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduServiceRecommend>;
  chongduServiceRecommendsConnection: (args?: {
    where?: ChongduServiceRecommendWhereInput;
    orderBy?: ChongduServiceRecommendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServiceRecommendConnectionPromise;
  chongduServiceType: (
    where: ChongduServiceTypeWhereUniqueInput
  ) => ChongduServiceTypeNullablePromise;
  chongduServiceTypes: (args?: {
    where?: ChongduServiceTypeWhereInput;
    orderBy?: ChongduServiceTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduServiceType>;
  chongduServiceTypesConnection: (args?: {
    where?: ChongduServiceTypeWhereInput;
    orderBy?: ChongduServiceTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServiceTypeConnectionPromise;
  chongduServiceauthentLog: (
    where: ChongduServiceauthentLogWhereUniqueInput
  ) => ChongduServiceauthentLogNullablePromise;
  chongduServiceauthentLogs: (args?: {
    where?: ChongduServiceauthentLogWhereInput;
    orderBy?: ChongduServiceauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduServiceauthentLog>;
  chongduServiceauthentLogsConnection: (args?: {
    where?: ChongduServiceauthentLogWhereInput;
    orderBy?: ChongduServiceauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduServiceauthentLogConnectionPromise;
  chongduStat: (
    where: ChongduStatWhereUniqueInput
  ) => ChongduStatNullablePromise;
  chongduStats: (args?: {
    where?: ChongduStatWhereInput;
    orderBy?: ChongduStatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduStat>;
  chongduStatsConnection: (args?: {
    where?: ChongduStatWhereInput;
    orderBy?: ChongduStatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduStatConnectionPromise;
  chongduTag: (where: ChongduTagWhereUniqueInput) => ChongduTagNullablePromise;
  chongduTags: (args?: {
    where?: ChongduTagWhereInput;
    orderBy?: ChongduTagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduTag>;
  chongduTagsConnection: (args?: {
    where?: ChongduTagWhereInput;
    orderBy?: ChongduTagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduTagConnectionPromise;
  chongduTagDetail: (
    where: ChongduTagDetailWhereUniqueInput
  ) => ChongduTagDetailNullablePromise;
  chongduTagDetails: (args?: {
    where?: ChongduTagDetailWhereInput;
    orderBy?: ChongduTagDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduTagDetail>;
  chongduTagDetailsConnection: (args?: {
    where?: ChongduTagDetailWhereInput;
    orderBy?: ChongduTagDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduTagDetailConnectionPromise;
  chongduTradingArea: (
    where: ChongduTradingAreaWhereUniqueInput
  ) => ChongduTradingAreaNullablePromise;
  chongduTradingAreas: (args?: {
    where?: ChongduTradingAreaWhereInput;
    orderBy?: ChongduTradingAreaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduTradingArea>;
  chongduTradingAreasConnection: (args?: {
    where?: ChongduTradingAreaWhereInput;
    orderBy?: ChongduTradingAreaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduTradingAreaConnectionPromise;
  chongduUser: (
    where: ChongduUserWhereUniqueInput
  ) => ChongduUserNullablePromise;
  chongduUsers: (args?: {
    where?: ChongduUserWhereInput;
    orderBy?: ChongduUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUser>;
  chongduUsersConnection: (args?: {
    where?: ChongduUserWhereInput;
    orderBy?: ChongduUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserConnectionPromise;
  chongduUserFavourite: (
    where: ChongduUserFavouriteWhereUniqueInput
  ) => ChongduUserFavouriteNullablePromise;
  chongduUserFavourites: (args?: {
    where?: ChongduUserFavouriteWhereInput;
    orderBy?: ChongduUserFavouriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUserFavourite>;
  chongduUserFavouritesConnection: (args?: {
    where?: ChongduUserFavouriteWhereInput;
    orderBy?: ChongduUserFavouriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserFavouriteConnectionPromise;
  chongduUserauthent: (
    where: ChongduUserauthentWhereUniqueInput
  ) => ChongduUserauthentNullablePromise;
  chongduUserauthents: (args?: {
    where?: ChongduUserauthentWhereInput;
    orderBy?: ChongduUserauthentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUserauthent>;
  chongduUserauthentsConnection: (args?: {
    where?: ChongduUserauthentWhereInput;
    orderBy?: ChongduUserauthentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserauthentConnectionPromise;
  chongduUserauthentLog: (
    where: ChongduUserauthentLogWhereUniqueInput
  ) => ChongduUserauthentLogNullablePromise;
  chongduUserauthentLogs: (args?: {
    where?: ChongduUserauthentLogWhereInput;
    orderBy?: ChongduUserauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUserauthentLog>;
  chongduUserauthentLogsConnection: (args?: {
    where?: ChongduUserauthentLogWhereInput;
    orderBy?: ChongduUserauthentLogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserauthentLogConnectionPromise;
  chongduUserbind: (
    where: ChongduUserbindWhereUniqueInput
  ) => ChongduUserbindNullablePromise;
  chongduUserbinds: (args?: {
    where?: ChongduUserbindWhereInput;
    orderBy?: ChongduUserbindOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUserbind>;
  chongduUserbindsConnection: (args?: {
    where?: ChongduUserbindWhereInput;
    orderBy?: ChongduUserbindOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserbindConnectionPromise;
  chongduUserdetail: (
    where: ChongduUserdetailWhereUniqueInput
  ) => ChongduUserdetailNullablePromise;
  chongduUserdetails: (args?: {
    where?: ChongduUserdetailWhereInput;
    orderBy?: ChongduUserdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUserdetail>;
  chongduUserdetailsConnection: (args?: {
    where?: ChongduUserdetailWhereInput;
    orderBy?: ChongduUserdetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserdetailConnectionPromise;
  chongduUserstatistic: (
    where: ChongduUserstatisticWhereUniqueInput
  ) => ChongduUserstatisticNullablePromise;
  chongduUserstatistics: (args?: {
    where?: ChongduUserstatisticWhereInput;
    orderBy?: ChongduUserstatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduUserstatistic>;
  chongduUserstatisticsConnection: (args?: {
    where?: ChongduUserstatisticWhereInput;
    orderBy?: ChongduUserstatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduUserstatisticConnectionPromise;
  chongduVaccine: (
    where: ChongduVaccineWhereUniqueInput
  ) => ChongduVaccineNullablePromise;
  chongduVaccines: (args?: {
    where?: ChongduVaccineWhereInput;
    orderBy?: ChongduVaccineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduVaccine>;
  chongduVaccinesConnection: (args?: {
    where?: ChongduVaccineWhereInput;
    orderBy?: ChongduVaccineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduVaccineConnectionPromise;
  chongduVaccineBrand: (
    where: ChongduVaccineBrandWhereUniqueInput
  ) => ChongduVaccineBrandNullablePromise;
  chongduVaccineBrands: (args?: {
    where?: ChongduVaccineBrandWhereInput;
    orderBy?: ChongduVaccineBrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduVaccineBrand>;
  chongduVaccineBrandsConnection: (args?: {
    where?: ChongduVaccineBrandWhereInput;
    orderBy?: ChongduVaccineBrandOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduVaccineBrandConnectionPromise;
  chongduValidate: (
    where: ChongduValidateWhereUniqueInput
  ) => ChongduValidateNullablePromise;
  chongduValidates: (args?: {
    where?: ChongduValidateWhereInput;
    orderBy?: ChongduValidateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduValidate>;
  chongduValidatesConnection: (args?: {
    where?: ChongduValidateWhereInput;
    orderBy?: ChongduValidateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduValidateConnectionPromise;
  chongduVersion: (
    where: ChongduVersionWhereUniqueInput
  ) => ChongduVersionNullablePromise;
  chongduVersions: (args?: {
    where?: ChongduVersionWhereInput;
    orderBy?: ChongduVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduVersion>;
  chongduVersionsConnection: (args?: {
    where?: ChongduVersionWhereInput;
    orderBy?: ChongduVersionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduVersionConnectionPromise;
  chongduViewcount: (
    where: ChongduViewcountWhereUniqueInput
  ) => ChongduViewcountNullablePromise;
  chongduViewcounts: (args?: {
    where?: ChongduViewcountWhereInput;
    orderBy?: ChongduViewcountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduViewcount>;
  chongduViewcountsConnection: (args?: {
    where?: ChongduViewcountWhereInput;
    orderBy?: ChongduViewcountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduViewcountConnectionPromise;
  chongduWorld: (
    where: ChongduWorldWhereUniqueInput
  ) => ChongduWorldNullablePromise;
  chongduWorlds: (args?: {
    where?: ChongduWorldWhereInput;
    orderBy?: ChongduWorldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduWorld>;
  chongduWorldsConnection: (args?: {
    where?: ChongduWorldWhereInput;
    orderBy?: ChongduWorldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduWorldConnectionPromise;
  chongduWorldComment: (
    where: ChongduWorldCommentWhereUniqueInput
  ) => ChongduWorldCommentNullablePromise;
  chongduWorldComments: (args?: {
    where?: ChongduWorldCommentWhereInput;
    orderBy?: ChongduWorldCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduWorldComment>;
  chongduWorldCommentsConnection: (args?: {
    where?: ChongduWorldCommentWhereInput;
    orderBy?: ChongduWorldCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduWorldCommentConnectionPromise;
  chongduWorldJoin: (
    where: ChongduWorldJoinWhereUniqueInput
  ) => ChongduWorldJoinNullablePromise;
  chongduWorldJoins: (args?: {
    where?: ChongduWorldJoinWhereInput;
    orderBy?: ChongduWorldJoinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduWorldJoin>;
  chongduWorldJoinsConnection: (args?: {
    where?: ChongduWorldJoinWhereInput;
    orderBy?: ChongduWorldJoinOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduWorldJoinConnectionPromise;
  chongduWorldLike: (
    where: ChongduWorldLikeWhereUniqueInput
  ) => ChongduWorldLikeNullablePromise;
  chongduWorldLikes: (args?: {
    where?: ChongduWorldLikeWhereInput;
    orderBy?: ChongduWorldLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduWorldLike>;
  chongduWorldLikesConnection: (args?: {
    where?: ChongduWorldLikeWhereInput;
    orderBy?: ChongduWorldLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduWorldLikeConnectionPromise;
  chongduWorldReply: (
    where: ChongduWorldReplyWhereUniqueInput
  ) => ChongduWorldReplyNullablePromise;
  chongduWorldReplies: (args?: {
    where?: ChongduWorldReplyWhereInput;
    orderBy?: ChongduWorldReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduWorldReply>;
  chongduWorldRepliesConnection: (args?: {
    where?: ChongduWorldReplyWhereInput;
    orderBy?: ChongduWorldReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduWorldReplyConnectionPromise;
  chongduWorldShield: (
    where: ChongduWorldShieldWhereUniqueInput
  ) => ChongduWorldShieldNullablePromise;
  chongduWorldShields: (args?: {
    where?: ChongduWorldShieldWhereInput;
    orderBy?: ChongduWorldShieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChongduWorldShield>;
  chongduWorldShieldsConnection: (args?: {
    where?: ChongduWorldShieldWhereInput;
    orderBy?: ChongduWorldShieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChongduWorldShieldConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChongduAccount: (
    data: ChongduAccountCreateInput
  ) => ChongduAccountPromise;
  updateChongduAccount: (args: {
    data: ChongduAccountUpdateInput;
    where: ChongduAccountWhereUniqueInput;
  }) => ChongduAccountPromise;
  updateManyChongduAccounts: (args: {
    data: ChongduAccountUpdateManyMutationInput;
    where?: ChongduAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAccount: (args: {
    where: ChongduAccountWhereUniqueInput;
    create: ChongduAccountCreateInput;
    update: ChongduAccountUpdateInput;
  }) => ChongduAccountPromise;
  deleteChongduAccount: (
    where: ChongduAccountWhereUniqueInput
  ) => ChongduAccountPromise;
  deleteManyChongduAccounts: (
    where?: ChongduAccountWhereInput
  ) => BatchPayloadPromise;
  createChongduAddress: (
    data: ChongduAddressCreateInput
  ) => ChongduAddressPromise;
  updateChongduAddress: (args: {
    data: ChongduAddressUpdateInput;
    where: ChongduAddressWhereUniqueInput;
  }) => ChongduAddressPromise;
  updateManyChongduAddresses: (args: {
    data: ChongduAddressUpdateManyMutationInput;
    where?: ChongduAddressWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAddress: (args: {
    where: ChongduAddressWhereUniqueInput;
    create: ChongduAddressCreateInput;
    update: ChongduAddressUpdateInput;
  }) => ChongduAddressPromise;
  deleteChongduAddress: (
    where: ChongduAddressWhereUniqueInput
  ) => ChongduAddressPromise;
  deleteManyChongduAddresses: (
    where?: ChongduAddressWhereInput
  ) => BatchPayloadPromise;
  createChongduAddressRelation: (
    data: ChongduAddressRelationCreateInput
  ) => ChongduAddressRelationPromise;
  updateChongduAddressRelation: (args: {
    data: ChongduAddressRelationUpdateInput;
    where: ChongduAddressRelationWhereUniqueInput;
  }) => ChongduAddressRelationPromise;
  updateManyChongduAddressRelations: (args: {
    data: ChongduAddressRelationUpdateManyMutationInput;
    where?: ChongduAddressRelationWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAddressRelation: (args: {
    where: ChongduAddressRelationWhereUniqueInput;
    create: ChongduAddressRelationCreateInput;
    update: ChongduAddressRelationUpdateInput;
  }) => ChongduAddressRelationPromise;
  deleteChongduAddressRelation: (
    where: ChongduAddressRelationWhereUniqueInput
  ) => ChongduAddressRelationPromise;
  deleteManyChongduAddressRelations: (
    where?: ChongduAddressRelationWhereInput
  ) => BatchPayloadPromise;
  createChongduAdmin: (data: ChongduAdminCreateInput) => ChongduAdminPromise;
  updateChongduAdmin: (args: {
    data: ChongduAdminUpdateInput;
    where: ChongduAdminWhereUniqueInput;
  }) => ChongduAdminPromise;
  updateManyChongduAdmins: (args: {
    data: ChongduAdminUpdateManyMutationInput;
    where?: ChongduAdminWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAdmin: (args: {
    where: ChongduAdminWhereUniqueInput;
    create: ChongduAdminCreateInput;
    update: ChongduAdminUpdateInput;
  }) => ChongduAdminPromise;
  deleteChongduAdmin: (
    where: ChongduAdminWhereUniqueInput
  ) => ChongduAdminPromise;
  deleteManyChongduAdmins: (
    where?: ChongduAdminWhereInput
  ) => BatchPayloadPromise;
  createChongduAdminRole: (
    data: ChongduAdminRoleCreateInput
  ) => ChongduAdminRolePromise;
  updateChongduAdminRole: (args: {
    data: ChongduAdminRoleUpdateInput;
    where: ChongduAdminRoleWhereUniqueInput;
  }) => ChongduAdminRolePromise;
  updateManyChongduAdminRoles: (args: {
    data: ChongduAdminRoleUpdateManyMutationInput;
    where?: ChongduAdminRoleWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAdminRole: (args: {
    where: ChongduAdminRoleWhereUniqueInput;
    create: ChongduAdminRoleCreateInput;
    update: ChongduAdminRoleUpdateInput;
  }) => ChongduAdminRolePromise;
  deleteChongduAdminRole: (
    where: ChongduAdminRoleWhereUniqueInput
  ) => ChongduAdminRolePromise;
  deleteManyChongduAdminRoles: (
    where?: ChongduAdminRoleWhereInput
  ) => BatchPayloadPromise;
  createChongduAdvertisement: (
    data: ChongduAdvertisementCreateInput
  ) => ChongduAdvertisementPromise;
  updateChongduAdvertisement: (args: {
    data: ChongduAdvertisementUpdateInput;
    where: ChongduAdvertisementWhereUniqueInput;
  }) => ChongduAdvertisementPromise;
  updateManyChongduAdvertisements: (args: {
    data: ChongduAdvertisementUpdateManyMutationInput;
    where?: ChongduAdvertisementWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAdvertisement: (args: {
    where: ChongduAdvertisementWhereUniqueInput;
    create: ChongduAdvertisementCreateInput;
    update: ChongduAdvertisementUpdateInput;
  }) => ChongduAdvertisementPromise;
  deleteChongduAdvertisement: (
    where: ChongduAdvertisementWhereUniqueInput
  ) => ChongduAdvertisementPromise;
  deleteManyChongduAdvertisements: (
    where?: ChongduAdvertisementWhereInput
  ) => BatchPayloadPromise;
  createChongduAdvice: (data: ChongduAdviceCreateInput) => ChongduAdvicePromise;
  updateChongduAdvice: (args: {
    data: ChongduAdviceUpdateInput;
    where: ChongduAdviceWhereUniqueInput;
  }) => ChongduAdvicePromise;
  updateManyChongduAdvices: (args: {
    data: ChongduAdviceUpdateManyMutationInput;
    where?: ChongduAdviceWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAdvice: (args: {
    where: ChongduAdviceWhereUniqueInput;
    create: ChongduAdviceCreateInput;
    update: ChongduAdviceUpdateInput;
  }) => ChongduAdvicePromise;
  deleteChongduAdvice: (
    where: ChongduAdviceWhereUniqueInput
  ) => ChongduAdvicePromise;
  deleteManyChongduAdvices: (
    where?: ChongduAdviceWhereInput
  ) => BatchPayloadPromise;
  createChongduAgent: (data: ChongduAgentCreateInput) => ChongduAgentPromise;
  updateChongduAgent: (args: {
    data: ChongduAgentUpdateInput;
    where: ChongduAgentWhereUniqueInput;
  }) => ChongduAgentPromise;
  updateManyChongduAgents: (args: {
    data: ChongduAgentUpdateManyMutationInput;
    where?: ChongduAgentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAgent: (args: {
    where: ChongduAgentWhereUniqueInput;
    create: ChongduAgentCreateInput;
    update: ChongduAgentUpdateInput;
  }) => ChongduAgentPromise;
  deleteChongduAgent: (
    where: ChongduAgentWhereUniqueInput
  ) => ChongduAgentPromise;
  deleteManyChongduAgents: (
    where?: ChongduAgentWhereInput
  ) => BatchPayloadPromise;
  createChongduAppVersion: (
    data: ChongduAppVersionCreateInput
  ) => ChongduAppVersionPromise;
  updateChongduAppVersion: (args: {
    data: ChongduAppVersionUpdateInput;
    where: ChongduAppVersionWhereUniqueInput;
  }) => ChongduAppVersionPromise;
  updateManyChongduAppVersions: (args: {
    data: ChongduAppVersionUpdateManyMutationInput;
    where?: ChongduAppVersionWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAppVersion: (args: {
    where: ChongduAppVersionWhereUniqueInput;
    create: ChongduAppVersionCreateInput;
    update: ChongduAppVersionUpdateInput;
  }) => ChongduAppVersionPromise;
  deleteChongduAppVersion: (
    where: ChongduAppVersionWhereUniqueInput
  ) => ChongduAppVersionPromise;
  deleteManyChongduAppVersions: (
    where?: ChongduAppVersionWhereInput
  ) => BatchPayloadPromise;
  createChongduAppointment: (
    data: ChongduAppointmentCreateInput
  ) => ChongduAppointmentPromise;
  updateChongduAppointment: (args: {
    data: ChongduAppointmentUpdateInput;
    where: ChongduAppointmentWhereUniqueInput;
  }) => ChongduAppointmentPromise;
  updateManyChongduAppointments: (args: {
    data: ChongduAppointmentUpdateManyMutationInput;
    where?: ChongduAppointmentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduAppointment: (args: {
    where: ChongduAppointmentWhereUniqueInput;
    create: ChongduAppointmentCreateInput;
    update: ChongduAppointmentUpdateInput;
  }) => ChongduAppointmentPromise;
  deleteChongduAppointment: (
    where: ChongduAppointmentWhereUniqueInput
  ) => ChongduAppointmentPromise;
  deleteManyChongduAppointments: (
    where?: ChongduAppointmentWhereInput
  ) => BatchPayloadPromise;
  createChongduCart: (data: ChongduCartCreateInput) => ChongduCartPromise;
  updateChongduCart: (args: {
    data: ChongduCartUpdateInput;
    where: ChongduCartWhereUniqueInput;
  }) => ChongduCartPromise;
  updateManyChongduCarts: (args: {
    data: ChongduCartUpdateManyMutationInput;
    where?: ChongduCartWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCart: (args: {
    where: ChongduCartWhereUniqueInput;
    create: ChongduCartCreateInput;
    update: ChongduCartUpdateInput;
  }) => ChongduCartPromise;
  deleteChongduCart: (where: ChongduCartWhereUniqueInput) => ChongduCartPromise;
  deleteManyChongduCarts: (
    where?: ChongduCartWhereInput
  ) => BatchPayloadPromise;
  createChongduCity: (data: ChongduCityCreateInput) => ChongduCityPromise;
  updateChongduCity: (args: {
    data: ChongduCityUpdateInput;
    where: ChongduCityWhereUniqueInput;
  }) => ChongduCityPromise;
  updateManyChongduCities: (args: {
    data: ChongduCityUpdateManyMutationInput;
    where?: ChongduCityWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCity: (args: {
    where: ChongduCityWhereUniqueInput;
    create: ChongduCityCreateInput;
    update: ChongduCityUpdateInput;
  }) => ChongduCityPromise;
  deleteChongduCity: (where: ChongduCityWhereUniqueInput) => ChongduCityPromise;
  deleteManyChongduCities: (
    where?: ChongduCityWhereInput
  ) => BatchPayloadPromise;
  createChongduComment: (
    data: ChongduCommentCreateInput
  ) => ChongduCommentPromise;
  updateChongduComment: (args: {
    data: ChongduCommentUpdateInput;
    where: ChongduCommentWhereUniqueInput;
  }) => ChongduCommentPromise;
  updateManyChongduComments: (args: {
    data: ChongduCommentUpdateManyMutationInput;
    where?: ChongduCommentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduComment: (args: {
    where: ChongduCommentWhereUniqueInput;
    create: ChongduCommentCreateInput;
    update: ChongduCommentUpdateInput;
  }) => ChongduCommentPromise;
  deleteChongduComment: (
    where: ChongduCommentWhereUniqueInput
  ) => ChongduCommentPromise;
  deleteManyChongduComments: (
    where?: ChongduCommentWhereInput
  ) => BatchPayloadPromise;
  createChongduCommentPraise: (
    data: ChongduCommentPraiseCreateInput
  ) => ChongduCommentPraisePromise;
  updateChongduCommentPraise: (args: {
    data: ChongduCommentPraiseUpdateInput;
    where: ChongduCommentPraiseWhereUniqueInput;
  }) => ChongduCommentPraisePromise;
  updateManyChongduCommentPraises: (args: {
    data: ChongduCommentPraiseUpdateManyMutationInput;
    where?: ChongduCommentPraiseWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCommentPraise: (args: {
    where: ChongduCommentPraiseWhereUniqueInput;
    create: ChongduCommentPraiseCreateInput;
    update: ChongduCommentPraiseUpdateInput;
  }) => ChongduCommentPraisePromise;
  deleteChongduCommentPraise: (
    where: ChongduCommentPraiseWhereUniqueInput
  ) => ChongduCommentPraisePromise;
  deleteManyChongduCommentPraises: (
    where?: ChongduCommentPraiseWhereInput
  ) => BatchPayloadPromise;
  createChongduCommentReply: (
    data: ChongduCommentReplyCreateInput
  ) => ChongduCommentReplyPromise;
  updateChongduCommentReply: (args: {
    data: ChongduCommentReplyUpdateInput;
    where: ChongduCommentReplyWhereUniqueInput;
  }) => ChongduCommentReplyPromise;
  updateManyChongduCommentReplies: (args: {
    data: ChongduCommentReplyUpdateManyMutationInput;
    where?: ChongduCommentReplyWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCommentReply: (args: {
    where: ChongduCommentReplyWhereUniqueInput;
    create: ChongduCommentReplyCreateInput;
    update: ChongduCommentReplyUpdateInput;
  }) => ChongduCommentReplyPromise;
  deleteChongduCommentReply: (
    where: ChongduCommentReplyWhereUniqueInput
  ) => ChongduCommentReplyPromise;
  deleteManyChongduCommentReplies: (
    where?: ChongduCommentReplyWhereInput
  ) => BatchPayloadPromise;
  createChongduCommentReview: (
    data: ChongduCommentReviewCreateInput
  ) => ChongduCommentReviewPromise;
  updateChongduCommentReview: (args: {
    data: ChongduCommentReviewUpdateInput;
    where: ChongduCommentReviewWhereUniqueInput;
  }) => ChongduCommentReviewPromise;
  updateManyChongduCommentReviews: (args: {
    data: ChongduCommentReviewUpdateManyMutationInput;
    where?: ChongduCommentReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCommentReview: (args: {
    where: ChongduCommentReviewWhereUniqueInput;
    create: ChongduCommentReviewCreateInput;
    update: ChongduCommentReviewUpdateInput;
  }) => ChongduCommentReviewPromise;
  deleteChongduCommentReview: (
    where: ChongduCommentReviewWhereUniqueInput
  ) => ChongduCommentReviewPromise;
  deleteManyChongduCommentReviews: (
    where?: ChongduCommentReviewWhereInput
  ) => BatchPayloadPromise;
  createChongduCompanyauthent: (
    data: ChongduCompanyauthentCreateInput
  ) => ChongduCompanyauthentPromise;
  updateChongduCompanyauthent: (args: {
    data: ChongduCompanyauthentUpdateInput;
    where: ChongduCompanyauthentWhereUniqueInput;
  }) => ChongduCompanyauthentPromise;
  updateManyChongduCompanyauthents: (args: {
    data: ChongduCompanyauthentUpdateManyMutationInput;
    where?: ChongduCompanyauthentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCompanyauthent: (args: {
    where: ChongduCompanyauthentWhereUniqueInput;
    create: ChongduCompanyauthentCreateInput;
    update: ChongduCompanyauthentUpdateInput;
  }) => ChongduCompanyauthentPromise;
  deleteChongduCompanyauthent: (
    where: ChongduCompanyauthentWhereUniqueInput
  ) => ChongduCompanyauthentPromise;
  deleteManyChongduCompanyauthents: (
    where?: ChongduCompanyauthentWhereInput
  ) => BatchPayloadPromise;
  createChongduCompanyauthentLog: (
    data: ChongduCompanyauthentLogCreateInput
  ) => ChongduCompanyauthentLogPromise;
  updateChongduCompanyauthentLog: (args: {
    data: ChongduCompanyauthentLogUpdateInput;
    where: ChongduCompanyauthentLogWhereUniqueInput;
  }) => ChongduCompanyauthentLogPromise;
  updateManyChongduCompanyauthentLogs: (args: {
    data: ChongduCompanyauthentLogUpdateManyMutationInput;
    where?: ChongduCompanyauthentLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCompanyauthentLog: (args: {
    where: ChongduCompanyauthentLogWhereUniqueInput;
    create: ChongduCompanyauthentLogCreateInput;
    update: ChongduCompanyauthentLogUpdateInput;
  }) => ChongduCompanyauthentLogPromise;
  deleteChongduCompanyauthentLog: (
    where: ChongduCompanyauthentLogWhereUniqueInput
  ) => ChongduCompanyauthentLogPromise;
  deleteManyChongduCompanyauthentLogs: (
    where?: ChongduCompanyauthentLogWhereInput
  ) => BatchPayloadPromise;
  createChongduCompanyrecommend: (
    data: ChongduCompanyrecommendCreateInput
  ) => ChongduCompanyrecommendPromise;
  updateChongduCompanyrecommend: (args: {
    data: ChongduCompanyrecommendUpdateInput;
    where: ChongduCompanyrecommendWhereUniqueInput;
  }) => ChongduCompanyrecommendPromise;
  updateManyChongduCompanyrecommends: (args: {
    data: ChongduCompanyrecommendUpdateManyMutationInput;
    where?: ChongduCompanyrecommendWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCompanyrecommend: (args: {
    where: ChongduCompanyrecommendWhereUniqueInput;
    create: ChongduCompanyrecommendCreateInput;
    update: ChongduCompanyrecommendUpdateInput;
  }) => ChongduCompanyrecommendPromise;
  deleteChongduCompanyrecommend: (
    where: ChongduCompanyrecommendWhereUniqueInput
  ) => ChongduCompanyrecommendPromise;
  deleteManyChongduCompanyrecommends: (
    where?: ChongduCompanyrecommendWhereInput
  ) => BatchPayloadPromise;
  createChongduCorrelation: (
    data: ChongduCorrelationCreateInput
  ) => ChongduCorrelationPromise;
  updateChongduCorrelation: (args: {
    data: ChongduCorrelationUpdateInput;
    where: ChongduCorrelationWhereUniqueInput;
  }) => ChongduCorrelationPromise;
  updateManyChongduCorrelations: (args: {
    data: ChongduCorrelationUpdateManyMutationInput;
    where?: ChongduCorrelationWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduCorrelation: (args: {
    where: ChongduCorrelationWhereUniqueInput;
    create: ChongduCorrelationCreateInput;
    update: ChongduCorrelationUpdateInput;
  }) => ChongduCorrelationPromise;
  deleteChongduCorrelation: (
    where: ChongduCorrelationWhereUniqueInput
  ) => ChongduCorrelationPromise;
  deleteManyChongduCorrelations: (
    where?: ChongduCorrelationWhereInput
  ) => BatchPayloadPromise;
  createChongduDataVersion: (
    data: ChongduDataVersionCreateInput
  ) => ChongduDataVersionPromise;
  updateChongduDataVersion: (args: {
    data: ChongduDataVersionUpdateInput;
    where: ChongduDataVersionWhereUniqueInput;
  }) => ChongduDataVersionPromise;
  updateManyChongduDataVersions: (args: {
    data: ChongduDataVersionUpdateManyMutationInput;
    where?: ChongduDataVersionWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduDataVersion: (args: {
    where: ChongduDataVersionWhereUniqueInput;
    create: ChongduDataVersionCreateInput;
    update: ChongduDataVersionUpdateInput;
  }) => ChongduDataVersionPromise;
  deleteChongduDataVersion: (
    where: ChongduDataVersionWhereUniqueInput
  ) => ChongduDataVersionPromise;
  deleteManyChongduDataVersions: (
    where?: ChongduDataVersionWhereInput
  ) => BatchPayloadPromise;
  createChongduDiscuss: (
    data: ChongduDiscussCreateInput
  ) => ChongduDiscussPromise;
  updateChongduDiscuss: (args: {
    data: ChongduDiscussUpdateInput;
    where: ChongduDiscussWhereUniqueInput;
  }) => ChongduDiscussPromise;
  updateManyChongduDiscusses: (args: {
    data: ChongduDiscussUpdateManyMutationInput;
    where?: ChongduDiscussWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduDiscuss: (args: {
    where: ChongduDiscussWhereUniqueInput;
    create: ChongduDiscussCreateInput;
    update: ChongduDiscussUpdateInput;
  }) => ChongduDiscussPromise;
  deleteChongduDiscuss: (
    where: ChongduDiscussWhereUniqueInput
  ) => ChongduDiscussPromise;
  deleteManyChongduDiscusses: (
    where?: ChongduDiscussWhereInput
  ) => BatchPayloadPromise;
  createChongduFilemanage: (
    data: ChongduFilemanageCreateInput
  ) => ChongduFilemanagePromise;
  updateChongduFilemanage: (args: {
    data: ChongduFilemanageUpdateInput;
    where: ChongduFilemanageWhereUniqueInput;
  }) => ChongduFilemanagePromise;
  updateManyChongduFilemanages: (args: {
    data: ChongduFilemanageUpdateManyMutationInput;
    where?: ChongduFilemanageWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduFilemanage: (args: {
    where: ChongduFilemanageWhereUniqueInput;
    create: ChongduFilemanageCreateInput;
    update: ChongduFilemanageUpdateInput;
  }) => ChongduFilemanagePromise;
  deleteChongduFilemanage: (
    where: ChongduFilemanageWhereUniqueInput
  ) => ChongduFilemanagePromise;
  deleteManyChongduFilemanages: (
    where?: ChongduFilemanageWhereInput
  ) => BatchPayloadPromise;
  createChongduFocusing: (
    data: ChongduFocusingCreateInput
  ) => ChongduFocusingPromise;
  updateChongduFocusing: (args: {
    data: ChongduFocusingUpdateInput;
    where: ChongduFocusingWhereUniqueInput;
  }) => ChongduFocusingPromise;
  updateManyChongduFocusings: (args: {
    data: ChongduFocusingUpdateManyMutationInput;
    where?: ChongduFocusingWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduFocusing: (args: {
    where: ChongduFocusingWhereUniqueInput;
    create: ChongduFocusingCreateInput;
    update: ChongduFocusingUpdateInput;
  }) => ChongduFocusingPromise;
  deleteChongduFocusing: (
    where: ChongduFocusingWhereUniqueInput
  ) => ChongduFocusingPromise;
  deleteManyChongduFocusings: (
    where?: ChongduFocusingWhereInput
  ) => BatchPayloadPromise;
  createChongduInform: (data: ChongduInformCreateInput) => ChongduInformPromise;
  updateChongduInform: (args: {
    data: ChongduInformUpdateInput;
    where: ChongduInformWhereUniqueInput;
  }) => ChongduInformPromise;
  updateManyChongduInforms: (args: {
    data: ChongduInformUpdateManyMutationInput;
    where?: ChongduInformWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduInform: (args: {
    where: ChongduInformWhereUniqueInput;
    create: ChongduInformCreateInput;
    update: ChongduInformUpdateInput;
  }) => ChongduInformPromise;
  deleteChongduInform: (
    where: ChongduInformWhereUniqueInput
  ) => ChongduInformPromise;
  deleteManyChongduInforms: (
    where?: ChongduInformWhereInput
  ) => BatchPayloadPromise;
  createChongduLock: (data: ChongduLockCreateInput) => ChongduLockPromise;
  updateChongduLock: (args: {
    data: ChongduLockUpdateInput;
    where: ChongduLockWhereUniqueInput;
  }) => ChongduLockPromise;
  updateManyChongduLocks: (args: {
    data: ChongduLockUpdateManyMutationInput;
    where?: ChongduLockWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduLock: (args: {
    where: ChongduLockWhereUniqueInput;
    create: ChongduLockCreateInput;
    update: ChongduLockUpdateInput;
  }) => ChongduLockPromise;
  deleteChongduLock: (where: ChongduLockWhereUniqueInput) => ChongduLockPromise;
  deleteManyChongduLocks: (
    where?: ChongduLockWhereInput
  ) => BatchPayloadPromise;
  createChongduLog: (data: ChongduLogCreateInput) => ChongduLogPromise;
  updateChongduLog: (args: {
    data: ChongduLogUpdateInput;
    where: ChongduLogWhereUniqueInput;
  }) => ChongduLogPromise;
  updateManyChongduLogs: (args: {
    data: ChongduLogUpdateManyMutationInput;
    where?: ChongduLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduLog: (args: {
    where: ChongduLogWhereUniqueInput;
    create: ChongduLogCreateInput;
    update: ChongduLogUpdateInput;
  }) => ChongduLogPromise;
  deleteChongduLog: (where: ChongduLogWhereUniqueInput) => ChongduLogPromise;
  deleteManyChongduLogs: (where?: ChongduLogWhereInput) => BatchPayloadPromise;
  createChongduLoginLog: (
    data: ChongduLoginLogCreateInput
  ) => ChongduLoginLogPromise;
  updateChongduLoginLog: (args: {
    data: ChongduLoginLogUpdateInput;
    where: ChongduLoginLogWhereUniqueInput;
  }) => ChongduLoginLogPromise;
  updateManyChongduLoginLogs: (args: {
    data: ChongduLoginLogUpdateManyMutationInput;
    where?: ChongduLoginLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduLoginLog: (args: {
    where: ChongduLoginLogWhereUniqueInput;
    create: ChongduLoginLogCreateInput;
    update: ChongduLoginLogUpdateInput;
  }) => ChongduLoginLogPromise;
  deleteChongduLoginLog: (
    where: ChongduLoginLogWhereUniqueInput
  ) => ChongduLoginLogPromise;
  deleteManyChongduLoginLogs: (
    where?: ChongduLoginLogWhereInput
  ) => BatchPayloadPromise;
  createChongduMenu: (data: ChongduMenuCreateInput) => ChongduMenuPromise;
  updateChongduMenu: (args: {
    data: ChongduMenuUpdateInput;
    where: ChongduMenuWhereUniqueInput;
  }) => ChongduMenuPromise;
  updateManyChongduMenus: (args: {
    data: ChongduMenuUpdateManyMutationInput;
    where?: ChongduMenuWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduMenu: (args: {
    where: ChongduMenuWhereUniqueInput;
    create: ChongduMenuCreateInput;
    update: ChongduMenuUpdateInput;
  }) => ChongduMenuPromise;
  deleteChongduMenu: (where: ChongduMenuWhereUniqueInput) => ChongduMenuPromise;
  deleteManyChongduMenus: (
    where?: ChongduMenuWhereInput
  ) => BatchPayloadPromise;
  createChongduMerchant: (
    data: ChongduMerchantCreateInput
  ) => ChongduMerchantPromise;
  updateChongduMerchant: (args: {
    data: ChongduMerchantUpdateInput;
    where: ChongduMerchantWhereUniqueInput;
  }) => ChongduMerchantPromise;
  updateManyChongduMerchants: (args: {
    data: ChongduMerchantUpdateManyMutationInput;
    where?: ChongduMerchantWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduMerchant: (args: {
    where: ChongduMerchantWhereUniqueInput;
    create: ChongduMerchantCreateInput;
    update: ChongduMerchantUpdateInput;
  }) => ChongduMerchantPromise;
  deleteChongduMerchant: (
    where: ChongduMerchantWhereUniqueInput
  ) => ChongduMerchantPromise;
  deleteManyChongduMerchants: (
    where?: ChongduMerchantWhereInput
  ) => BatchPayloadPromise;
  createChongduMerchantImg: (
    data: ChongduMerchantImgCreateInput
  ) => ChongduMerchantImgPromise;
  updateChongduMerchantImg: (args: {
    data: ChongduMerchantImgUpdateInput;
    where: ChongduMerchantImgWhereUniqueInput;
  }) => ChongduMerchantImgPromise;
  updateManyChongduMerchantImgs: (args: {
    data: ChongduMerchantImgUpdateManyMutationInput;
    where?: ChongduMerchantImgWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduMerchantImg: (args: {
    where: ChongduMerchantImgWhereUniqueInput;
    create: ChongduMerchantImgCreateInput;
    update: ChongduMerchantImgUpdateInput;
  }) => ChongduMerchantImgPromise;
  deleteChongduMerchantImg: (
    where: ChongduMerchantImgWhereUniqueInput
  ) => ChongduMerchantImgPromise;
  deleteManyChongduMerchantImgs: (
    where?: ChongduMerchantImgWhereInput
  ) => BatchPayloadPromise;
  createChongduMerchantstatistic: (
    data: ChongduMerchantstatisticCreateInput
  ) => ChongduMerchantstatisticPromise;
  updateChongduMerchantstatistic: (args: {
    data: ChongduMerchantstatisticUpdateInput;
    where: ChongduMerchantstatisticWhereUniqueInput;
  }) => ChongduMerchantstatisticPromise;
  updateManyChongduMerchantstatistics: (args: {
    data: ChongduMerchantstatisticUpdateManyMutationInput;
    where?: ChongduMerchantstatisticWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduMerchantstatistic: (args: {
    where: ChongduMerchantstatisticWhereUniqueInput;
    create: ChongduMerchantstatisticCreateInput;
    update: ChongduMerchantstatisticUpdateInput;
  }) => ChongduMerchantstatisticPromise;
  deleteChongduMerchantstatistic: (
    where: ChongduMerchantstatisticWhereUniqueInput
  ) => ChongduMerchantstatisticPromise;
  deleteManyChongduMerchantstatistics: (
    where?: ChongduMerchantstatisticWhereInput
  ) => BatchPayloadPromise;
  createChongduMessage: (
    data: ChongduMessageCreateInput
  ) => ChongduMessagePromise;
  updateChongduMessage: (args: {
    data: ChongduMessageUpdateInput;
    where: ChongduMessageWhereUniqueInput;
  }) => ChongduMessagePromise;
  updateManyChongduMessages: (args: {
    data: ChongduMessageUpdateManyMutationInput;
    where?: ChongduMessageWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduMessage: (args: {
    where: ChongduMessageWhereUniqueInput;
    create: ChongduMessageCreateInput;
    update: ChongduMessageUpdateInput;
  }) => ChongduMessagePromise;
  deleteChongduMessage: (
    where: ChongduMessageWhereUniqueInput
  ) => ChongduMessagePromise;
  deleteManyChongduMessages: (
    where?: ChongduMessageWhereInput
  ) => BatchPayloadPromise;
  createChongduModel: (data: ChongduModelCreateInput) => ChongduModelPromise;
  updateChongduModel: (args: {
    data: ChongduModelUpdateInput;
    where: ChongduModelWhereUniqueInput;
  }) => ChongduModelPromise;
  updateManyChongduModels: (args: {
    data: ChongduModelUpdateManyMutationInput;
    where?: ChongduModelWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduModel: (args: {
    where: ChongduModelWhereUniqueInput;
    create: ChongduModelCreateInput;
    update: ChongduModelUpdateInput;
  }) => ChongduModelPromise;
  deleteChongduModel: (
    where: ChongduModelWhereUniqueInput
  ) => ChongduModelPromise;
  deleteManyChongduModels: (
    where?: ChongduModelWhereInput
  ) => BatchPayloadPromise;
  createChongduModeldetail: (
    data: ChongduModeldetailCreateInput
  ) => ChongduModeldetailPromise;
  updateChongduModeldetail: (args: {
    data: ChongduModeldetailUpdateInput;
    where: ChongduModeldetailWhereUniqueInput;
  }) => ChongduModeldetailPromise;
  updateManyChongduModeldetails: (args: {
    data: ChongduModeldetailUpdateManyMutationInput;
    where?: ChongduModeldetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduModeldetail: (args: {
    where: ChongduModeldetailWhereUniqueInput;
    create: ChongduModeldetailCreateInput;
    update: ChongduModeldetailUpdateInput;
  }) => ChongduModeldetailPromise;
  deleteChongduModeldetail: (
    where: ChongduModeldetailWhereUniqueInput
  ) => ChongduModeldetailPromise;
  deleteManyChongduModeldetails: (
    where?: ChongduModeldetailWhereInput
  ) => BatchPayloadPromise;
  createChongduOrder: (data: ChongduOrderCreateInput) => ChongduOrderPromise;
  updateChongduOrder: (args: {
    data: ChongduOrderUpdateInput;
    where: ChongduOrderWhereUniqueInput;
  }) => ChongduOrderPromise;
  updateManyChongduOrders: (args: {
    data: ChongduOrderUpdateManyMutationInput;
    where?: ChongduOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduOrder: (args: {
    where: ChongduOrderWhereUniqueInput;
    create: ChongduOrderCreateInput;
    update: ChongduOrderUpdateInput;
  }) => ChongduOrderPromise;
  deleteChongduOrder: (
    where: ChongduOrderWhereUniqueInput
  ) => ChongduOrderPromise;
  deleteManyChongduOrders: (
    where?: ChongduOrderWhereInput
  ) => BatchPayloadPromise;
  createChongduOrderItem: (
    data: ChongduOrderItemCreateInput
  ) => ChongduOrderItemPromise;
  updateChongduOrderItem: (args: {
    data: ChongduOrderItemUpdateInput;
    where: ChongduOrderItemWhereUniqueInput;
  }) => ChongduOrderItemPromise;
  updateManyChongduOrderItems: (args: {
    data: ChongduOrderItemUpdateManyMutationInput;
    where?: ChongduOrderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduOrderItem: (args: {
    where: ChongduOrderItemWhereUniqueInput;
    create: ChongduOrderItemCreateInput;
    update: ChongduOrderItemUpdateInput;
  }) => ChongduOrderItemPromise;
  deleteChongduOrderItem: (
    where: ChongduOrderItemWhereUniqueInput
  ) => ChongduOrderItemPromise;
  deleteManyChongduOrderItems: (
    where?: ChongduOrderItemWhereInput
  ) => BatchPayloadPromise;
  createChongduOrderinvoice: (
    data: ChongduOrderinvoiceCreateInput
  ) => ChongduOrderinvoicePromise;
  updateChongduOrderinvoice: (args: {
    data: ChongduOrderinvoiceUpdateInput;
    where: ChongduOrderinvoiceWhereUniqueInput;
  }) => ChongduOrderinvoicePromise;
  updateManyChongduOrderinvoices: (args: {
    data: ChongduOrderinvoiceUpdateManyMutationInput;
    where?: ChongduOrderinvoiceWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduOrderinvoice: (args: {
    where: ChongduOrderinvoiceWhereUniqueInput;
    create: ChongduOrderinvoiceCreateInput;
    update: ChongduOrderinvoiceUpdateInput;
  }) => ChongduOrderinvoicePromise;
  deleteChongduOrderinvoice: (
    where: ChongduOrderinvoiceWhereUniqueInput
  ) => ChongduOrderinvoicePromise;
  deleteManyChongduOrderinvoices: (
    where?: ChongduOrderinvoiceWhereInput
  ) => BatchPayloadPromise;
  createChongduOrderinvoicedetail: (
    data: ChongduOrderinvoicedetailCreateInput
  ) => ChongduOrderinvoicedetailPromise;
  updateChongduOrderinvoicedetail: (args: {
    data: ChongduOrderinvoicedetailUpdateInput;
    where: ChongduOrderinvoicedetailWhereUniqueInput;
  }) => ChongduOrderinvoicedetailPromise;
  updateManyChongduOrderinvoicedetails: (args: {
    data: ChongduOrderinvoicedetailUpdateManyMutationInput;
    where?: ChongduOrderinvoicedetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduOrderinvoicedetail: (args: {
    where: ChongduOrderinvoicedetailWhereUniqueInput;
    create: ChongduOrderinvoicedetailCreateInput;
    update: ChongduOrderinvoicedetailUpdateInput;
  }) => ChongduOrderinvoicedetailPromise;
  deleteChongduOrderinvoicedetail: (
    where: ChongduOrderinvoicedetailWhereUniqueInput
  ) => ChongduOrderinvoicedetailPromise;
  deleteManyChongduOrderinvoicedetails: (
    where?: ChongduOrderinvoicedetailWhereInput
  ) => BatchPayloadPromise;
  createChongduOrderserial: (
    data: ChongduOrderserialCreateInput
  ) => ChongduOrderserialPromise;
  updateChongduOrderserial: (args: {
    data: ChongduOrderserialUpdateInput;
    where: ChongduOrderserialWhereUniqueInput;
  }) => ChongduOrderserialPromise;
  updateManyChongduOrderserials: (args: {
    data: ChongduOrderserialUpdateManyMutationInput;
    where?: ChongduOrderserialWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduOrderserial: (args: {
    where: ChongduOrderserialWhereUniqueInput;
    create: ChongduOrderserialCreateInput;
    update: ChongduOrderserialUpdateInput;
  }) => ChongduOrderserialPromise;
  deleteChongduOrderserial: (
    where: ChongduOrderserialWhereUniqueInput
  ) => ChongduOrderserialPromise;
  deleteManyChongduOrderserials: (
    where?: ChongduOrderserialWhereInput
  ) => BatchPayloadPromise;
  createChongduOrderstatistic: (
    data: ChongduOrderstatisticCreateInput
  ) => ChongduOrderstatisticPromise;
  updateChongduOrderstatistic: (args: {
    data: ChongduOrderstatisticUpdateInput;
    where: ChongduOrderstatisticWhereUniqueInput;
  }) => ChongduOrderstatisticPromise;
  updateManyChongduOrderstatistics: (args: {
    data: ChongduOrderstatisticUpdateManyMutationInput;
    where?: ChongduOrderstatisticWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduOrderstatistic: (args: {
    where: ChongduOrderstatisticWhereUniqueInput;
    create: ChongduOrderstatisticCreateInput;
    update: ChongduOrderstatisticUpdateInput;
  }) => ChongduOrderstatisticPromise;
  deleteChongduOrderstatistic: (
    where: ChongduOrderstatisticWhereUniqueInput
  ) => ChongduOrderstatisticPromise;
  deleteManyChongduOrderstatistics: (
    where?: ChongduOrderstatisticWhereInput
  ) => BatchPayloadPromise;
  createChongduPayInfo: (
    data: ChongduPayInfoCreateInput
  ) => ChongduPayInfoPromise;
  updateChongduPayInfo: (args: {
    data: ChongduPayInfoUpdateInput;
    where: ChongduPayInfoWhereUniqueInput;
  }) => ChongduPayInfoPromise;
  updateManyChongduPayInfoes: (args: {
    data: ChongduPayInfoUpdateManyMutationInput;
    where?: ChongduPayInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPayInfo: (args: {
    where: ChongduPayInfoWhereUniqueInput;
    create: ChongduPayInfoCreateInput;
    update: ChongduPayInfoUpdateInput;
  }) => ChongduPayInfoPromise;
  deleteChongduPayInfo: (
    where: ChongduPayInfoWhereUniqueInput
  ) => ChongduPayInfoPromise;
  deleteManyChongduPayInfoes: (
    where?: ChongduPayInfoWhereInput
  ) => BatchPayloadPromise;
  createChongduPermission: (
    data: ChongduPermissionCreateInput
  ) => ChongduPermissionPromise;
  updateChongduPermission: (args: {
    data: ChongduPermissionUpdateInput;
    where: ChongduPermissionWhereUniqueInput;
  }) => ChongduPermissionPromise;
  updateManyChongduPermissions: (args: {
    data: ChongduPermissionUpdateManyMutationInput;
    where?: ChongduPermissionWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPermission: (args: {
    where: ChongduPermissionWhereUniqueInput;
    create: ChongduPermissionCreateInput;
    update: ChongduPermissionUpdateInput;
  }) => ChongduPermissionPromise;
  deleteChongduPermission: (
    where: ChongduPermissionWhereUniqueInput
  ) => ChongduPermissionPromise;
  deleteManyChongduPermissions: (
    where?: ChongduPermissionWhereInput
  ) => BatchPayloadPromise;
  createChongduPet: (data: ChongduPetCreateInput) => ChongduPetPromise;
  updateChongduPet: (args: {
    data: ChongduPetUpdateInput;
    where: ChongduPetWhereUniqueInput;
  }) => ChongduPetPromise;
  updateManyChongduPets: (args: {
    data: ChongduPetUpdateManyMutationInput;
    where?: ChongduPetWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPet: (args: {
    where: ChongduPetWhereUniqueInput;
    create: ChongduPetCreateInput;
    update: ChongduPetUpdateInput;
  }) => ChongduPetPromise;
  deleteChongduPet: (where: ChongduPetWhereUniqueInput) => ChongduPetPromise;
  deleteManyChongduPets: (where?: ChongduPetWhereInput) => BatchPayloadPromise;
  createChongduPetCard: (
    data: ChongduPetCardCreateInput
  ) => ChongduPetCardPromise;
  updateChongduPetCard: (args: {
    data: ChongduPetCardUpdateInput;
    where: ChongduPetCardWhereUniqueInput;
  }) => ChongduPetCardPromise;
  updateManyChongduPetCards: (args: {
    data: ChongduPetCardUpdateManyMutationInput;
    where?: ChongduPetCardWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPetCard: (args: {
    where: ChongduPetCardWhereUniqueInput;
    create: ChongduPetCardCreateInput;
    update: ChongduPetCardUpdateInput;
  }) => ChongduPetCardPromise;
  deleteChongduPetCard: (
    where: ChongduPetCardWhereUniqueInput
  ) => ChongduPetCardPromise;
  deleteManyChongduPetCards: (
    where?: ChongduPetCardWhereInput
  ) => BatchPayloadPromise;
  createChongduPetImg: (data: ChongduPetImgCreateInput) => ChongduPetImgPromise;
  updateChongduPetImg: (args: {
    data: ChongduPetImgUpdateInput;
    where: ChongduPetImgWhereUniqueInput;
  }) => ChongduPetImgPromise;
  updateManyChongduPetImgs: (args: {
    data: ChongduPetImgUpdateManyMutationInput;
    where?: ChongduPetImgWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPetImg: (args: {
    where: ChongduPetImgWhereUniqueInput;
    create: ChongduPetImgCreateInput;
    update: ChongduPetImgUpdateInput;
  }) => ChongduPetImgPromise;
  deleteChongduPetImg: (
    where: ChongduPetImgWhereUniqueInput
  ) => ChongduPetImgPromise;
  deleteManyChongduPetImgs: (
    where?: ChongduPetImgWhereInput
  ) => BatchPayloadPromise;
  createChongduPetRecommend: (
    data: ChongduPetRecommendCreateInput
  ) => ChongduPetRecommendPromise;
  updateChongduPetRecommend: (args: {
    data: ChongduPetRecommendUpdateInput;
    where: ChongduPetRecommendWhereUniqueInput;
  }) => ChongduPetRecommendPromise;
  updateManyChongduPetRecommends: (args: {
    data: ChongduPetRecommendUpdateManyMutationInput;
    where?: ChongduPetRecommendWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPetRecommend: (args: {
    where: ChongduPetRecommendWhereUniqueInput;
    create: ChongduPetRecommendCreateInput;
    update: ChongduPetRecommendUpdateInput;
  }) => ChongduPetRecommendPromise;
  deleteChongduPetRecommend: (
    where: ChongduPetRecommendWhereUniqueInput
  ) => ChongduPetRecommendPromise;
  deleteManyChongduPetRecommends: (
    where?: ChongduPetRecommendWhereInput
  ) => BatchPayloadPromise;
  createChongduPetType: (
    data: ChongduPetTypeCreateInput
  ) => ChongduPetTypePromise;
  updateChongduPetType: (args: {
    data: ChongduPetTypeUpdateInput;
    where: ChongduPetTypeWhereUniqueInput;
  }) => ChongduPetTypePromise;
  updateManyChongduPetTypes: (args: {
    data: ChongduPetTypeUpdateManyMutationInput;
    where?: ChongduPetTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPetType: (args: {
    where: ChongduPetTypeWhereUniqueInput;
    create: ChongduPetTypeCreateInput;
    update: ChongduPetTypeUpdateInput;
  }) => ChongduPetTypePromise;
  deleteChongduPetType: (
    where: ChongduPetTypeWhereUniqueInput
  ) => ChongduPetTypePromise;
  deleteManyChongduPetTypes: (
    where?: ChongduPetTypeWhereInput
  ) => BatchPayloadPromise;
  createChongduPetauthentLog: (
    data: ChongduPetauthentLogCreateInput
  ) => ChongduPetauthentLogPromise;
  updateChongduPetauthentLog: (args: {
    data: ChongduPetauthentLogUpdateInput;
    where: ChongduPetauthentLogWhereUniqueInput;
  }) => ChongduPetauthentLogPromise;
  updateManyChongduPetauthentLogs: (args: {
    data: ChongduPetauthentLogUpdateManyMutationInput;
    where?: ChongduPetauthentLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPetauthentLog: (args: {
    where: ChongduPetauthentLogWhereUniqueInput;
    create: ChongduPetauthentLogCreateInput;
    update: ChongduPetauthentLogUpdateInput;
  }) => ChongduPetauthentLogPromise;
  deleteChongduPetauthentLog: (
    where: ChongduPetauthentLogWhereUniqueInput
  ) => ChongduPetauthentLogPromise;
  deleteManyChongduPetauthentLogs: (
    where?: ChongduPetauthentLogWhereInput
  ) => BatchPayloadPromise;
  createChongduPetauthentdetail: (
    data: ChongduPetauthentdetailCreateInput
  ) => ChongduPetauthentdetailPromise;
  updateChongduPetauthentdetail: (args: {
    data: ChongduPetauthentdetailUpdateInput;
    where: ChongduPetauthentdetailWhereUniqueInput;
  }) => ChongduPetauthentdetailPromise;
  updateManyChongduPetauthentdetails: (args: {
    data: ChongduPetauthentdetailUpdateManyMutationInput;
    where?: ChongduPetauthentdetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPetauthentdetail: (args: {
    where: ChongduPetauthentdetailWhereUniqueInput;
    create: ChongduPetauthentdetailCreateInput;
    update: ChongduPetauthentdetailUpdateInput;
  }) => ChongduPetauthentdetailPromise;
  deleteChongduPetauthentdetail: (
    where: ChongduPetauthentdetailWhereUniqueInput
  ) => ChongduPetauthentdetailPromise;
  deleteManyChongduPetauthentdetails: (
    where?: ChongduPetauthentdetailWhereInput
  ) => BatchPayloadPromise;
  createChongduPlatformBusiness: (
    data: ChongduPlatformBusinessCreateInput
  ) => ChongduPlatformBusinessPromise;
  updateChongduPlatformBusiness: (args: {
    data: ChongduPlatformBusinessUpdateInput;
    where: ChongduPlatformBusinessWhereUniqueInput;
  }) => ChongduPlatformBusinessPromise;
  updateManyChongduPlatformBusinesses: (args: {
    data: ChongduPlatformBusinessUpdateManyMutationInput;
    where?: ChongduPlatformBusinessWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPlatformBusiness: (args: {
    where: ChongduPlatformBusinessWhereUniqueInput;
    create: ChongduPlatformBusinessCreateInput;
    update: ChongduPlatformBusinessUpdateInput;
  }) => ChongduPlatformBusinessPromise;
  deleteChongduPlatformBusiness: (
    where: ChongduPlatformBusinessWhereUniqueInput
  ) => ChongduPlatformBusinessPromise;
  deleteManyChongduPlatformBusinesses: (
    where?: ChongduPlatformBusinessWhereInput
  ) => BatchPayloadPromise;
  createChongduPlatformExecute: (
    data: ChongduPlatformExecuteCreateInput
  ) => ChongduPlatformExecutePromise;
  updateChongduPlatformExecute: (args: {
    data: ChongduPlatformExecuteUpdateInput;
    where: ChongduPlatformExecuteWhereUniqueInput;
  }) => ChongduPlatformExecutePromise;
  updateManyChongduPlatformExecutes: (args: {
    data: ChongduPlatformExecuteUpdateManyMutationInput;
    where?: ChongduPlatformExecuteWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduPlatformExecute: (args: {
    where: ChongduPlatformExecuteWhereUniqueInput;
    create: ChongduPlatformExecuteCreateInput;
    update: ChongduPlatformExecuteUpdateInput;
  }) => ChongduPlatformExecutePromise;
  deleteChongduPlatformExecute: (
    where: ChongduPlatformExecuteWhereUniqueInput
  ) => ChongduPlatformExecutePromise;
  deleteManyChongduPlatformExecutes: (
    where?: ChongduPlatformExecuteWhereInput
  ) => BatchPayloadPromise;
  createChongduProduct: (
    data: ChongduProductCreateInput
  ) => ChongduProductPromise;
  updateChongduProduct: (args: {
    data: ChongduProductUpdateInput;
    where: ChongduProductWhereUniqueInput;
  }) => ChongduProductPromise;
  updateManyChongduProducts: (args: {
    data: ChongduProductUpdateManyMutationInput;
    where?: ChongduProductWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProduct: (args: {
    where: ChongduProductWhereUniqueInput;
    create: ChongduProductCreateInput;
    update: ChongduProductUpdateInput;
  }) => ChongduProductPromise;
  deleteChongduProduct: (
    where: ChongduProductWhereUniqueInput
  ) => ChongduProductPromise;
  deleteManyChongduProducts: (
    where?: ChongduProductWhereInput
  ) => BatchPayloadPromise;
  createChongduProductAuthentdetail: (
    data: ChongduProductAuthentdetailCreateInput
  ) => ChongduProductAuthentdetailPromise;
  updateChongduProductAuthentdetail: (args: {
    data: ChongduProductAuthentdetailUpdateInput;
    where: ChongduProductAuthentdetailWhereUniqueInput;
  }) => ChongduProductAuthentdetailPromise;
  updateManyChongduProductAuthentdetails: (args: {
    data: ChongduProductAuthentdetailUpdateManyMutationInput;
    where?: ChongduProductAuthentdetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductAuthentdetail: (args: {
    where: ChongduProductAuthentdetailWhereUniqueInput;
    create: ChongduProductAuthentdetailCreateInput;
    update: ChongduProductAuthentdetailUpdateInput;
  }) => ChongduProductAuthentdetailPromise;
  deleteChongduProductAuthentdetail: (
    where: ChongduProductAuthentdetailWhereUniqueInput
  ) => ChongduProductAuthentdetailPromise;
  deleteManyChongduProductAuthentdetails: (
    where?: ChongduProductAuthentdetailWhereInput
  ) => BatchPayloadPromise;
  createChongduProductBrand: (
    data: ChongduProductBrandCreateInput
  ) => ChongduProductBrandPromise;
  updateChongduProductBrand: (args: {
    data: ChongduProductBrandUpdateInput;
    where: ChongduProductBrandWhereUniqueInput;
  }) => ChongduProductBrandPromise;
  updateManyChongduProductBrands: (args: {
    data: ChongduProductBrandUpdateManyMutationInput;
    where?: ChongduProductBrandWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductBrand: (args: {
    where: ChongduProductBrandWhereUniqueInput;
    create: ChongduProductBrandCreateInput;
    update: ChongduProductBrandUpdateInput;
  }) => ChongduProductBrandPromise;
  deleteChongduProductBrand: (
    where: ChongduProductBrandWhereUniqueInput
  ) => ChongduProductBrandPromise;
  deleteManyChongduProductBrands: (
    where?: ChongduProductBrandWhereInput
  ) => BatchPayloadPromise;
  createChongduProductImg: (
    data: ChongduProductImgCreateInput
  ) => ChongduProductImgPromise;
  updateChongduProductImg: (args: {
    data: ChongduProductImgUpdateInput;
    where: ChongduProductImgWhereUniqueInput;
  }) => ChongduProductImgPromise;
  updateManyChongduProductImgs: (args: {
    data: ChongduProductImgUpdateManyMutationInput;
    where?: ChongduProductImgWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductImg: (args: {
    where: ChongduProductImgWhereUniqueInput;
    create: ChongduProductImgCreateInput;
    update: ChongduProductImgUpdateInput;
  }) => ChongduProductImgPromise;
  deleteChongduProductImg: (
    where: ChongduProductImgWhereUniqueInput
  ) => ChongduProductImgPromise;
  deleteManyChongduProductImgs: (
    where?: ChongduProductImgWhereInput
  ) => BatchPayloadPromise;
  createChongduProductPettype: (
    data: ChongduProductPettypeCreateInput
  ) => ChongduProductPettypePromise;
  updateChongduProductPettype: (args: {
    data: ChongduProductPettypeUpdateInput;
    where: ChongduProductPettypeWhereUniqueInput;
  }) => ChongduProductPettypePromise;
  updateManyChongduProductPettypes: (args: {
    data: ChongduProductPettypeUpdateManyMutationInput;
    where?: ChongduProductPettypeWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductPettype: (args: {
    where: ChongduProductPettypeWhereUniqueInput;
    create: ChongduProductPettypeCreateInput;
    update: ChongduProductPettypeUpdateInput;
  }) => ChongduProductPettypePromise;
  deleteChongduProductPettype: (
    where: ChongduProductPettypeWhereUniqueInput
  ) => ChongduProductPettypePromise;
  deleteManyChongduProductPettypes: (
    where?: ChongduProductPettypeWhereInput
  ) => BatchPayloadPromise;
  createChongduProductRecommend: (
    data: ChongduProductRecommendCreateInput
  ) => ChongduProductRecommendPromise;
  updateChongduProductRecommend: (args: {
    data: ChongduProductRecommendUpdateInput;
    where: ChongduProductRecommendWhereUniqueInput;
  }) => ChongduProductRecommendPromise;
  updateManyChongduProductRecommends: (args: {
    data: ChongduProductRecommendUpdateManyMutationInput;
    where?: ChongduProductRecommendWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductRecommend: (args: {
    where: ChongduProductRecommendWhereUniqueInput;
    create: ChongduProductRecommendCreateInput;
    update: ChongduProductRecommendUpdateInput;
  }) => ChongduProductRecommendPromise;
  deleteChongduProductRecommend: (
    where: ChongduProductRecommendWhereUniqueInput
  ) => ChongduProductRecommendPromise;
  deleteManyChongduProductRecommends: (
    where?: ChongduProductRecommendWhereInput
  ) => BatchPayloadPromise;
  createChongduProductSku: (
    data: ChongduProductSkuCreateInput
  ) => ChongduProductSkuPromise;
  updateChongduProductSku: (args: {
    data: ChongduProductSkuUpdateInput;
    where: ChongduProductSkuWhereUniqueInput;
  }) => ChongduProductSkuPromise;
  updateManyChongduProductSkus: (args: {
    data: ChongduProductSkuUpdateManyMutationInput;
    where?: ChongduProductSkuWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductSku: (args: {
    where: ChongduProductSkuWhereUniqueInput;
    create: ChongduProductSkuCreateInput;
    update: ChongduProductSkuUpdateInput;
  }) => ChongduProductSkuPromise;
  deleteChongduProductSku: (
    where: ChongduProductSkuWhereUniqueInput
  ) => ChongduProductSkuPromise;
  deleteManyChongduProductSkus: (
    where?: ChongduProductSkuWhereInput
  ) => BatchPayloadPromise;
  createChongduProductType: (
    data: ChongduProductTypeCreateInput
  ) => ChongduProductTypePromise;
  updateChongduProductType: (args: {
    data: ChongduProductTypeUpdateInput;
    where: ChongduProductTypeWhereUniqueInput;
  }) => ChongduProductTypePromise;
  updateManyChongduProductTypes: (args: {
    data: ChongduProductTypeUpdateManyMutationInput;
    where?: ChongduProductTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductType: (args: {
    where: ChongduProductTypeWhereUniqueInput;
    create: ChongduProductTypeCreateInput;
    update: ChongduProductTypeUpdateInput;
  }) => ChongduProductTypePromise;
  deleteChongduProductType: (
    where: ChongduProductTypeWhereUniqueInput
  ) => ChongduProductTypePromise;
  deleteManyChongduProductTypes: (
    where?: ChongduProductTypeWhereInput
  ) => BatchPayloadPromise;
  createChongduProductauthentLog: (
    data: ChongduProductauthentLogCreateInput
  ) => ChongduProductauthentLogPromise;
  updateChongduProductauthentLog: (args: {
    data: ChongduProductauthentLogUpdateInput;
    where: ChongduProductauthentLogWhereUniqueInput;
  }) => ChongduProductauthentLogPromise;
  updateManyChongduProductauthentLogs: (args: {
    data: ChongduProductauthentLogUpdateManyMutationInput;
    where?: ChongduProductauthentLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduProductauthentLog: (args: {
    where: ChongduProductauthentLogWhereUniqueInput;
    create: ChongduProductauthentLogCreateInput;
    update: ChongduProductauthentLogUpdateInput;
  }) => ChongduProductauthentLogPromise;
  deleteChongduProductauthentLog: (
    where: ChongduProductauthentLogWhereUniqueInput
  ) => ChongduProductauthentLogPromise;
  deleteManyChongduProductauthentLogs: (
    where?: ChongduProductauthentLogWhereInput
  ) => BatchPayloadPromise;
  createChongduRecommend: (
    data: ChongduRecommendCreateInput
  ) => ChongduRecommendPromise;
  updateChongduRecommend: (args: {
    data: ChongduRecommendUpdateInput;
    where: ChongduRecommendWhereUniqueInput;
  }) => ChongduRecommendPromise;
  updateManyChongduRecommends: (args: {
    data: ChongduRecommendUpdateManyMutationInput;
    where?: ChongduRecommendWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRecommend: (args: {
    where: ChongduRecommendWhereUniqueInput;
    create: ChongduRecommendCreateInput;
    update: ChongduRecommendUpdateInput;
  }) => ChongduRecommendPromise;
  deleteChongduRecommend: (
    where: ChongduRecommendWhereUniqueInput
  ) => ChongduRecommendPromise;
  deleteManyChongduRecommends: (
    where?: ChongduRecommendWhereInput
  ) => BatchPayloadPromise;
  createChongduRefresh: (
    data: ChongduRefreshCreateInput
  ) => ChongduRefreshPromise;
  updateChongduRefresh: (args: {
    data: ChongduRefreshUpdateInput;
    where: ChongduRefreshWhereUniqueInput;
  }) => ChongduRefreshPromise;
  updateManyChongduRefreshes: (args: {
    data: ChongduRefreshUpdateManyMutationInput;
    where?: ChongduRefreshWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRefresh: (args: {
    where: ChongduRefreshWhereUniqueInput;
    create: ChongduRefreshCreateInput;
    update: ChongduRefreshUpdateInput;
  }) => ChongduRefreshPromise;
  deleteChongduRefresh: (
    where: ChongduRefreshWhereUniqueInput
  ) => ChongduRefreshPromise;
  deleteManyChongduRefreshes: (
    where?: ChongduRefreshWhereInput
  ) => BatchPayloadPromise;
  createChongduRepellent: (
    data: ChongduRepellentCreateInput
  ) => ChongduRepellentPromise;
  updateChongduRepellent: (args: {
    data: ChongduRepellentUpdateInput;
    where: ChongduRepellentWhereUniqueInput;
  }) => ChongduRepellentPromise;
  updateManyChongduRepellents: (args: {
    data: ChongduRepellentUpdateManyMutationInput;
    where?: ChongduRepellentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRepellent: (args: {
    where: ChongduRepellentWhereUniqueInput;
    create: ChongduRepellentCreateInput;
    update: ChongduRepellentUpdateInput;
  }) => ChongduRepellentPromise;
  deleteChongduRepellent: (
    where: ChongduRepellentWhereUniqueInput
  ) => ChongduRepellentPromise;
  deleteManyChongduRepellents: (
    where?: ChongduRepellentWhereInput
  ) => BatchPayloadPromise;
  createChongduRole: (data: ChongduRoleCreateInput) => ChongduRolePromise;
  updateChongduRole: (args: {
    data: ChongduRoleUpdateInput;
    where: ChongduRoleWhereUniqueInput;
  }) => ChongduRolePromise;
  updateManyChongduRoles: (args: {
    data: ChongduRoleUpdateManyMutationInput;
    where?: ChongduRoleWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRole: (args: {
    where: ChongduRoleWhereUniqueInput;
    create: ChongduRoleCreateInput;
    update: ChongduRoleUpdateInput;
  }) => ChongduRolePromise;
  deleteChongduRole: (where: ChongduRoleWhereUniqueInput) => ChongduRolePromise;
  deleteManyChongduRoles: (
    where?: ChongduRoleWhereInput
  ) => BatchPayloadPromise;
  createChongduRoleAuth: (
    data: ChongduRoleAuthCreateInput
  ) => ChongduRoleAuthPromise;
  updateChongduRoleAuth: (args: {
    data: ChongduRoleAuthUpdateInput;
    where: ChongduRoleAuthWhereUniqueInput;
  }) => ChongduRoleAuthPromise;
  updateManyChongduRoleAuths: (args: {
    data: ChongduRoleAuthUpdateManyMutationInput;
    where?: ChongduRoleAuthWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRoleAuth: (args: {
    where: ChongduRoleAuthWhereUniqueInput;
    create: ChongduRoleAuthCreateInput;
    update: ChongduRoleAuthUpdateInput;
  }) => ChongduRoleAuthPromise;
  deleteChongduRoleAuth: (
    where: ChongduRoleAuthWhereUniqueInput
  ) => ChongduRoleAuthPromise;
  deleteManyChongduRoleAuths: (
    where?: ChongduRoleAuthWhereInput
  ) => BatchPayloadPromise;
  createChongduRoleDetail: (
    data: ChongduRoleDetailCreateInput
  ) => ChongduRoleDetailPromise;
  updateChongduRoleDetail: (args: {
    data: ChongduRoleDetailUpdateInput;
    where: ChongduRoleDetailWhereUniqueInput;
  }) => ChongduRoleDetailPromise;
  updateManyChongduRoleDetails: (args: {
    data: ChongduRoleDetailUpdateManyMutationInput;
    where?: ChongduRoleDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRoleDetail: (args: {
    where: ChongduRoleDetailWhereUniqueInput;
    create: ChongduRoleDetailCreateInput;
    update: ChongduRoleDetailUpdateInput;
  }) => ChongduRoleDetailPromise;
  deleteChongduRoleDetail: (
    where: ChongduRoleDetailWhereUniqueInput
  ) => ChongduRoleDetailPromise;
  deleteManyChongduRoleDetails: (
    where?: ChongduRoleDetailWhereInput
  ) => BatchPayloadPromise;
  createChongduRoleGroup: (
    data: ChongduRoleGroupCreateInput
  ) => ChongduRoleGroupPromise;
  updateChongduRoleGroup: (args: {
    data: ChongduRoleGroupUpdateInput;
    where: ChongduRoleGroupWhereUniqueInput;
  }) => ChongduRoleGroupPromise;
  updateManyChongduRoleGroups: (args: {
    data: ChongduRoleGroupUpdateManyMutationInput;
    where?: ChongduRoleGroupWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRoleGroup: (args: {
    where: ChongduRoleGroupWhereUniqueInput;
    create: ChongduRoleGroupCreateInput;
    update: ChongduRoleGroupUpdateInput;
  }) => ChongduRoleGroupPromise;
  deleteChongduRoleGroup: (
    where: ChongduRoleGroupWhereUniqueInput
  ) => ChongduRoleGroupPromise;
  deleteManyChongduRoleGroups: (
    where?: ChongduRoleGroupWhereInput
  ) => BatchPayloadPromise;
  createChongduRoleMenu: (
    data: ChongduRoleMenuCreateInput
  ) => ChongduRoleMenuPromise;
  updateChongduRoleMenu: (args: {
    data: ChongduRoleMenuUpdateInput;
    where: ChongduRoleMenuWhereUniqueInput;
  }) => ChongduRoleMenuPromise;
  updateManyChongduRoleMenus: (args: {
    data: ChongduRoleMenuUpdateManyMutationInput;
    where?: ChongduRoleMenuWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRoleMenu: (args: {
    where: ChongduRoleMenuWhereUniqueInput;
    create: ChongduRoleMenuCreateInput;
    update: ChongduRoleMenuUpdateInput;
  }) => ChongduRoleMenuPromise;
  deleteChongduRoleMenu: (
    where: ChongduRoleMenuWhereUniqueInput
  ) => ChongduRoleMenuPromise;
  deleteManyChongduRoleMenus: (
    where?: ChongduRoleMenuWhereInput
  ) => BatchPayloadPromise;
  createChongduRoleMenuChildren: (
    data: ChongduRoleMenuChildrenCreateInput
  ) => ChongduRoleMenuChildrenPromise;
  updateChongduRoleMenuChildren: (args: {
    data: ChongduRoleMenuChildrenUpdateInput;
    where: ChongduRoleMenuChildrenWhereUniqueInput;
  }) => ChongduRoleMenuChildrenPromise;
  updateManyChongduRoleMenuChildrens: (args: {
    data: ChongduRoleMenuChildrenUpdateManyMutationInput;
    where?: ChongduRoleMenuChildrenWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduRoleMenuChildren: (args: {
    where: ChongduRoleMenuChildrenWhereUniqueInput;
    create: ChongduRoleMenuChildrenCreateInput;
    update: ChongduRoleMenuChildrenUpdateInput;
  }) => ChongduRoleMenuChildrenPromise;
  deleteChongduRoleMenuChildren: (
    where: ChongduRoleMenuChildrenWhereUniqueInput
  ) => ChongduRoleMenuChildrenPromise;
  deleteManyChongduRoleMenuChildrens: (
    where?: ChongduRoleMenuChildrenWhereInput
  ) => BatchPayloadPromise;
  createChongduSearchthink: (
    data: ChongduSearchthinkCreateInput
  ) => ChongduSearchthinkPromise;
  updateChongduSearchthink: (args: {
    data: ChongduSearchthinkUpdateInput;
    where: ChongduSearchthinkWhereUniqueInput;
  }) => ChongduSearchthinkPromise;
  updateManyChongduSearchthinks: (args: {
    data: ChongduSearchthinkUpdateManyMutationInput;
    where?: ChongduSearchthinkWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduSearchthink: (args: {
    where: ChongduSearchthinkWhereUniqueInput;
    create: ChongduSearchthinkCreateInput;
    update: ChongduSearchthinkUpdateInput;
  }) => ChongduSearchthinkPromise;
  deleteChongduSearchthink: (
    where: ChongduSearchthinkWhereUniqueInput
  ) => ChongduSearchthinkPromise;
  deleteManyChongduSearchthinks: (
    where?: ChongduSearchthinkWhereInput
  ) => BatchPayloadPromise;
  createChongduService: (
    data: ChongduServiceCreateInput
  ) => ChongduServicePromise;
  updateChongduService: (args: {
    data: ChongduServiceUpdateInput;
    where: ChongduServiceWhereUniqueInput;
  }) => ChongduServicePromise;
  updateManyChongduServices: (args: {
    data: ChongduServiceUpdateManyMutationInput;
    where?: ChongduServiceWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduService: (args: {
    where: ChongduServiceWhereUniqueInput;
    create: ChongduServiceCreateInput;
    update: ChongduServiceUpdateInput;
  }) => ChongduServicePromise;
  deleteChongduService: (
    where: ChongduServiceWhereUniqueInput
  ) => ChongduServicePromise;
  deleteManyChongduServices: (
    where?: ChongduServiceWhereInput
  ) => BatchPayloadPromise;
  createChongduServiceAuthentdetail: (
    data: ChongduServiceAuthentdetailCreateInput
  ) => ChongduServiceAuthentdetailPromise;
  updateChongduServiceAuthentdetail: (args: {
    data: ChongduServiceAuthentdetailUpdateInput;
    where: ChongduServiceAuthentdetailWhereUniqueInput;
  }) => ChongduServiceAuthentdetailPromise;
  updateManyChongduServiceAuthentdetails: (args: {
    data: ChongduServiceAuthentdetailUpdateManyMutationInput;
    where?: ChongduServiceAuthentdetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduServiceAuthentdetail: (args: {
    where: ChongduServiceAuthentdetailWhereUniqueInput;
    create: ChongduServiceAuthentdetailCreateInput;
    update: ChongduServiceAuthentdetailUpdateInput;
  }) => ChongduServiceAuthentdetailPromise;
  deleteChongduServiceAuthentdetail: (
    where: ChongduServiceAuthentdetailWhereUniqueInput
  ) => ChongduServiceAuthentdetailPromise;
  deleteManyChongduServiceAuthentdetails: (
    where?: ChongduServiceAuthentdetailWhereInput
  ) => BatchPayloadPromise;
  createChongduServiceImg: (
    data: ChongduServiceImgCreateInput
  ) => ChongduServiceImgPromise;
  updateChongduServiceImg: (args: {
    data: ChongduServiceImgUpdateInput;
    where: ChongduServiceImgWhereUniqueInput;
  }) => ChongduServiceImgPromise;
  updateManyChongduServiceImgs: (args: {
    data: ChongduServiceImgUpdateManyMutationInput;
    where?: ChongduServiceImgWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduServiceImg: (args: {
    where: ChongduServiceImgWhereUniqueInput;
    create: ChongduServiceImgCreateInput;
    update: ChongduServiceImgUpdateInput;
  }) => ChongduServiceImgPromise;
  deleteChongduServiceImg: (
    where: ChongduServiceImgWhereUniqueInput
  ) => ChongduServiceImgPromise;
  deleteManyChongduServiceImgs: (
    where?: ChongduServiceImgWhereInput
  ) => BatchPayloadPromise;
  createChongduServicePettype: (
    data: ChongduServicePettypeCreateInput
  ) => ChongduServicePettypePromise;
  updateChongduServicePettype: (args: {
    data: ChongduServicePettypeUpdateInput;
    where: ChongduServicePettypeWhereUniqueInput;
  }) => ChongduServicePettypePromise;
  updateManyChongduServicePettypes: (args: {
    data: ChongduServicePettypeUpdateManyMutationInput;
    where?: ChongduServicePettypeWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduServicePettype: (args: {
    where: ChongduServicePettypeWhereUniqueInput;
    create: ChongduServicePettypeCreateInput;
    update: ChongduServicePettypeUpdateInput;
  }) => ChongduServicePettypePromise;
  deleteChongduServicePettype: (
    where: ChongduServicePettypeWhereUniqueInput
  ) => ChongduServicePettypePromise;
  deleteManyChongduServicePettypes: (
    where?: ChongduServicePettypeWhereInput
  ) => BatchPayloadPromise;
  createChongduServiceRecommend: (
    data: ChongduServiceRecommendCreateInput
  ) => ChongduServiceRecommendPromise;
  updateChongduServiceRecommend: (args: {
    data: ChongduServiceRecommendUpdateInput;
    where: ChongduServiceRecommendWhereUniqueInput;
  }) => ChongduServiceRecommendPromise;
  updateManyChongduServiceRecommends: (args: {
    data: ChongduServiceRecommendUpdateManyMutationInput;
    where?: ChongduServiceRecommendWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduServiceRecommend: (args: {
    where: ChongduServiceRecommendWhereUniqueInput;
    create: ChongduServiceRecommendCreateInput;
    update: ChongduServiceRecommendUpdateInput;
  }) => ChongduServiceRecommendPromise;
  deleteChongduServiceRecommend: (
    where: ChongduServiceRecommendWhereUniqueInput
  ) => ChongduServiceRecommendPromise;
  deleteManyChongduServiceRecommends: (
    where?: ChongduServiceRecommendWhereInput
  ) => BatchPayloadPromise;
  createChongduServiceType: (
    data: ChongduServiceTypeCreateInput
  ) => ChongduServiceTypePromise;
  updateChongduServiceType: (args: {
    data: ChongduServiceTypeUpdateInput;
    where: ChongduServiceTypeWhereUniqueInput;
  }) => ChongduServiceTypePromise;
  updateManyChongduServiceTypes: (args: {
    data: ChongduServiceTypeUpdateManyMutationInput;
    where?: ChongduServiceTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduServiceType: (args: {
    where: ChongduServiceTypeWhereUniqueInput;
    create: ChongduServiceTypeCreateInput;
    update: ChongduServiceTypeUpdateInput;
  }) => ChongduServiceTypePromise;
  deleteChongduServiceType: (
    where: ChongduServiceTypeWhereUniqueInput
  ) => ChongduServiceTypePromise;
  deleteManyChongduServiceTypes: (
    where?: ChongduServiceTypeWhereInput
  ) => BatchPayloadPromise;
  createChongduServiceauthentLog: (
    data: ChongduServiceauthentLogCreateInput
  ) => ChongduServiceauthentLogPromise;
  updateChongduServiceauthentLog: (args: {
    data: ChongduServiceauthentLogUpdateInput;
    where: ChongduServiceauthentLogWhereUniqueInput;
  }) => ChongduServiceauthentLogPromise;
  updateManyChongduServiceauthentLogs: (args: {
    data: ChongduServiceauthentLogUpdateManyMutationInput;
    where?: ChongduServiceauthentLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduServiceauthentLog: (args: {
    where: ChongduServiceauthentLogWhereUniqueInput;
    create: ChongduServiceauthentLogCreateInput;
    update: ChongduServiceauthentLogUpdateInput;
  }) => ChongduServiceauthentLogPromise;
  deleteChongduServiceauthentLog: (
    where: ChongduServiceauthentLogWhereUniqueInput
  ) => ChongduServiceauthentLogPromise;
  deleteManyChongduServiceauthentLogs: (
    where?: ChongduServiceauthentLogWhereInput
  ) => BatchPayloadPromise;
  createChongduStat: (data: ChongduStatCreateInput) => ChongduStatPromise;
  updateChongduStat: (args: {
    data: ChongduStatUpdateInput;
    where: ChongduStatWhereUniqueInput;
  }) => ChongduStatPromise;
  updateManyChongduStats: (args: {
    data: ChongduStatUpdateManyMutationInput;
    where?: ChongduStatWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduStat: (args: {
    where: ChongduStatWhereUniqueInput;
    create: ChongduStatCreateInput;
    update: ChongduStatUpdateInput;
  }) => ChongduStatPromise;
  deleteChongduStat: (where: ChongduStatWhereUniqueInput) => ChongduStatPromise;
  deleteManyChongduStats: (
    where?: ChongduStatWhereInput
  ) => BatchPayloadPromise;
  createChongduTag: (data: ChongduTagCreateInput) => ChongduTagPromise;
  updateChongduTag: (args: {
    data: ChongduTagUpdateInput;
    where: ChongduTagWhereUniqueInput;
  }) => ChongduTagPromise;
  updateManyChongduTags: (args: {
    data: ChongduTagUpdateManyMutationInput;
    where?: ChongduTagWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduTag: (args: {
    where: ChongduTagWhereUniqueInput;
    create: ChongduTagCreateInput;
    update: ChongduTagUpdateInput;
  }) => ChongduTagPromise;
  deleteChongduTag: (where: ChongduTagWhereUniqueInput) => ChongduTagPromise;
  deleteManyChongduTags: (where?: ChongduTagWhereInput) => BatchPayloadPromise;
  createChongduTagDetail: (
    data: ChongduTagDetailCreateInput
  ) => ChongduTagDetailPromise;
  updateChongduTagDetail: (args: {
    data: ChongduTagDetailUpdateInput;
    where: ChongduTagDetailWhereUniqueInput;
  }) => ChongduTagDetailPromise;
  updateManyChongduTagDetails: (args: {
    data: ChongduTagDetailUpdateManyMutationInput;
    where?: ChongduTagDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduTagDetail: (args: {
    where: ChongduTagDetailWhereUniqueInput;
    create: ChongduTagDetailCreateInput;
    update: ChongduTagDetailUpdateInput;
  }) => ChongduTagDetailPromise;
  deleteChongduTagDetail: (
    where: ChongduTagDetailWhereUniqueInput
  ) => ChongduTagDetailPromise;
  deleteManyChongduTagDetails: (
    where?: ChongduTagDetailWhereInput
  ) => BatchPayloadPromise;
  createChongduTradingArea: (
    data: ChongduTradingAreaCreateInput
  ) => ChongduTradingAreaPromise;
  updateChongduTradingArea: (args: {
    data: ChongduTradingAreaUpdateInput;
    where: ChongduTradingAreaWhereUniqueInput;
  }) => ChongduTradingAreaPromise;
  updateManyChongduTradingAreas: (args: {
    data: ChongduTradingAreaUpdateManyMutationInput;
    where?: ChongduTradingAreaWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduTradingArea: (args: {
    where: ChongduTradingAreaWhereUniqueInput;
    create: ChongduTradingAreaCreateInput;
    update: ChongduTradingAreaUpdateInput;
  }) => ChongduTradingAreaPromise;
  deleteChongduTradingArea: (
    where: ChongduTradingAreaWhereUniqueInput
  ) => ChongduTradingAreaPromise;
  deleteManyChongduTradingAreas: (
    where?: ChongduTradingAreaWhereInput
  ) => BatchPayloadPromise;
  createChongduUser: (data: ChongduUserCreateInput) => ChongduUserPromise;
  updateChongduUser: (args: {
    data: ChongduUserUpdateInput;
    where: ChongduUserWhereUniqueInput;
  }) => ChongduUserPromise;
  updateManyChongduUsers: (args: {
    data: ChongduUserUpdateManyMutationInput;
    where?: ChongduUserWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUser: (args: {
    where: ChongduUserWhereUniqueInput;
    create: ChongduUserCreateInput;
    update: ChongduUserUpdateInput;
  }) => ChongduUserPromise;
  deleteChongduUser: (where: ChongduUserWhereUniqueInput) => ChongduUserPromise;
  deleteManyChongduUsers: (
    where?: ChongduUserWhereInput
  ) => BatchPayloadPromise;
  createChongduUserFavourite: (
    data: ChongduUserFavouriteCreateInput
  ) => ChongduUserFavouritePromise;
  updateChongduUserFavourite: (args: {
    data: ChongduUserFavouriteUpdateInput;
    where: ChongduUserFavouriteWhereUniqueInput;
  }) => ChongduUserFavouritePromise;
  updateManyChongduUserFavourites: (args: {
    data: ChongduUserFavouriteUpdateManyMutationInput;
    where?: ChongduUserFavouriteWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUserFavourite: (args: {
    where: ChongduUserFavouriteWhereUniqueInput;
    create: ChongduUserFavouriteCreateInput;
    update: ChongduUserFavouriteUpdateInput;
  }) => ChongduUserFavouritePromise;
  deleteChongduUserFavourite: (
    where: ChongduUserFavouriteWhereUniqueInput
  ) => ChongduUserFavouritePromise;
  deleteManyChongduUserFavourites: (
    where?: ChongduUserFavouriteWhereInput
  ) => BatchPayloadPromise;
  createChongduUserauthent: (
    data: ChongduUserauthentCreateInput
  ) => ChongduUserauthentPromise;
  updateChongduUserauthent: (args: {
    data: ChongduUserauthentUpdateInput;
    where: ChongduUserauthentWhereUniqueInput;
  }) => ChongduUserauthentPromise;
  updateManyChongduUserauthents: (args: {
    data: ChongduUserauthentUpdateManyMutationInput;
    where?: ChongduUserauthentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUserauthent: (args: {
    where: ChongduUserauthentWhereUniqueInput;
    create: ChongduUserauthentCreateInput;
    update: ChongduUserauthentUpdateInput;
  }) => ChongduUserauthentPromise;
  deleteChongduUserauthent: (
    where: ChongduUserauthentWhereUniqueInput
  ) => ChongduUserauthentPromise;
  deleteManyChongduUserauthents: (
    where?: ChongduUserauthentWhereInput
  ) => BatchPayloadPromise;
  createChongduUserauthentLog: (
    data: ChongduUserauthentLogCreateInput
  ) => ChongduUserauthentLogPromise;
  updateChongduUserauthentLog: (args: {
    data: ChongduUserauthentLogUpdateInput;
    where: ChongduUserauthentLogWhereUniqueInput;
  }) => ChongduUserauthentLogPromise;
  updateManyChongduUserauthentLogs: (args: {
    data: ChongduUserauthentLogUpdateManyMutationInput;
    where?: ChongduUserauthentLogWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUserauthentLog: (args: {
    where: ChongduUserauthentLogWhereUniqueInput;
    create: ChongduUserauthentLogCreateInput;
    update: ChongduUserauthentLogUpdateInput;
  }) => ChongduUserauthentLogPromise;
  deleteChongduUserauthentLog: (
    where: ChongduUserauthentLogWhereUniqueInput
  ) => ChongduUserauthentLogPromise;
  deleteManyChongduUserauthentLogs: (
    where?: ChongduUserauthentLogWhereInput
  ) => BatchPayloadPromise;
  createChongduUserbind: (
    data: ChongduUserbindCreateInput
  ) => ChongduUserbindPromise;
  updateChongduUserbind: (args: {
    data: ChongduUserbindUpdateInput;
    where: ChongduUserbindWhereUniqueInput;
  }) => ChongduUserbindPromise;
  updateManyChongduUserbinds: (args: {
    data: ChongduUserbindUpdateManyMutationInput;
    where?: ChongduUserbindWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUserbind: (args: {
    where: ChongduUserbindWhereUniqueInput;
    create: ChongduUserbindCreateInput;
    update: ChongduUserbindUpdateInput;
  }) => ChongduUserbindPromise;
  deleteChongduUserbind: (
    where: ChongduUserbindWhereUniqueInput
  ) => ChongduUserbindPromise;
  deleteManyChongduUserbinds: (
    where?: ChongduUserbindWhereInput
  ) => BatchPayloadPromise;
  createChongduUserdetail: (
    data: ChongduUserdetailCreateInput
  ) => ChongduUserdetailPromise;
  updateChongduUserdetail: (args: {
    data: ChongduUserdetailUpdateInput;
    where: ChongduUserdetailWhereUniqueInput;
  }) => ChongduUserdetailPromise;
  updateManyChongduUserdetails: (args: {
    data: ChongduUserdetailUpdateManyMutationInput;
    where?: ChongduUserdetailWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUserdetail: (args: {
    where: ChongduUserdetailWhereUniqueInput;
    create: ChongduUserdetailCreateInput;
    update: ChongduUserdetailUpdateInput;
  }) => ChongduUserdetailPromise;
  deleteChongduUserdetail: (
    where: ChongduUserdetailWhereUniqueInput
  ) => ChongduUserdetailPromise;
  deleteManyChongduUserdetails: (
    where?: ChongduUserdetailWhereInput
  ) => BatchPayloadPromise;
  createChongduUserstatistic: (
    data: ChongduUserstatisticCreateInput
  ) => ChongduUserstatisticPromise;
  updateChongduUserstatistic: (args: {
    data: ChongduUserstatisticUpdateInput;
    where: ChongduUserstatisticWhereUniqueInput;
  }) => ChongduUserstatisticPromise;
  updateManyChongduUserstatistics: (args: {
    data: ChongduUserstatisticUpdateManyMutationInput;
    where?: ChongduUserstatisticWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduUserstatistic: (args: {
    where: ChongduUserstatisticWhereUniqueInput;
    create: ChongduUserstatisticCreateInput;
    update: ChongduUserstatisticUpdateInput;
  }) => ChongduUserstatisticPromise;
  deleteChongduUserstatistic: (
    where: ChongduUserstatisticWhereUniqueInput
  ) => ChongduUserstatisticPromise;
  deleteManyChongduUserstatistics: (
    where?: ChongduUserstatisticWhereInput
  ) => BatchPayloadPromise;
  createChongduVaccine: (
    data: ChongduVaccineCreateInput
  ) => ChongduVaccinePromise;
  updateChongduVaccine: (args: {
    data: ChongduVaccineUpdateInput;
    where: ChongduVaccineWhereUniqueInput;
  }) => ChongduVaccinePromise;
  updateManyChongduVaccines: (args: {
    data: ChongduVaccineUpdateManyMutationInput;
    where?: ChongduVaccineWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduVaccine: (args: {
    where: ChongduVaccineWhereUniqueInput;
    create: ChongduVaccineCreateInput;
    update: ChongduVaccineUpdateInput;
  }) => ChongduVaccinePromise;
  deleteChongduVaccine: (
    where: ChongduVaccineWhereUniqueInput
  ) => ChongduVaccinePromise;
  deleteManyChongduVaccines: (
    where?: ChongduVaccineWhereInput
  ) => BatchPayloadPromise;
  createChongduVaccineBrand: (
    data: ChongduVaccineBrandCreateInput
  ) => ChongduVaccineBrandPromise;
  updateChongduVaccineBrand: (args: {
    data: ChongduVaccineBrandUpdateInput;
    where: ChongduVaccineBrandWhereUniqueInput;
  }) => ChongduVaccineBrandPromise;
  updateManyChongduVaccineBrands: (args: {
    data: ChongduVaccineBrandUpdateManyMutationInput;
    where?: ChongduVaccineBrandWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduVaccineBrand: (args: {
    where: ChongduVaccineBrandWhereUniqueInput;
    create: ChongduVaccineBrandCreateInput;
    update: ChongduVaccineBrandUpdateInput;
  }) => ChongduVaccineBrandPromise;
  deleteChongduVaccineBrand: (
    where: ChongduVaccineBrandWhereUniqueInput
  ) => ChongduVaccineBrandPromise;
  deleteManyChongduVaccineBrands: (
    where?: ChongduVaccineBrandWhereInput
  ) => BatchPayloadPromise;
  createChongduValidate: (
    data: ChongduValidateCreateInput
  ) => ChongduValidatePromise;
  updateChongduValidate: (args: {
    data: ChongduValidateUpdateInput;
    where: ChongduValidateWhereUniqueInput;
  }) => ChongduValidatePromise;
  updateManyChongduValidates: (args: {
    data: ChongduValidateUpdateManyMutationInput;
    where?: ChongduValidateWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduValidate: (args: {
    where: ChongduValidateWhereUniqueInput;
    create: ChongduValidateCreateInput;
    update: ChongduValidateUpdateInput;
  }) => ChongduValidatePromise;
  deleteChongduValidate: (
    where: ChongduValidateWhereUniqueInput
  ) => ChongduValidatePromise;
  deleteManyChongduValidates: (
    where?: ChongduValidateWhereInput
  ) => BatchPayloadPromise;
  createChongduVersion: (
    data: ChongduVersionCreateInput
  ) => ChongduVersionPromise;
  updateChongduVersion: (args: {
    data: ChongduVersionUpdateInput;
    where: ChongduVersionWhereUniqueInput;
  }) => ChongduVersionPromise;
  updateManyChongduVersions: (args: {
    data: ChongduVersionUpdateManyMutationInput;
    where?: ChongduVersionWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduVersion: (args: {
    where: ChongduVersionWhereUniqueInput;
    create: ChongduVersionCreateInput;
    update: ChongduVersionUpdateInput;
  }) => ChongduVersionPromise;
  deleteChongduVersion: (
    where: ChongduVersionWhereUniqueInput
  ) => ChongduVersionPromise;
  deleteManyChongduVersions: (
    where?: ChongduVersionWhereInput
  ) => BatchPayloadPromise;
  createChongduViewcount: (
    data: ChongduViewcountCreateInput
  ) => ChongduViewcountPromise;
  updateChongduViewcount: (args: {
    data: ChongduViewcountUpdateInput;
    where: ChongduViewcountWhereUniqueInput;
  }) => ChongduViewcountPromise;
  updateManyChongduViewcounts: (args: {
    data: ChongduViewcountUpdateManyMutationInput;
    where?: ChongduViewcountWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduViewcount: (args: {
    where: ChongduViewcountWhereUniqueInput;
    create: ChongduViewcountCreateInput;
    update: ChongduViewcountUpdateInput;
  }) => ChongduViewcountPromise;
  deleteChongduViewcount: (
    where: ChongduViewcountWhereUniqueInput
  ) => ChongduViewcountPromise;
  deleteManyChongduViewcounts: (
    where?: ChongduViewcountWhereInput
  ) => BatchPayloadPromise;
  createChongduWorld: (data: ChongduWorldCreateInput) => ChongduWorldPromise;
  updateChongduWorld: (args: {
    data: ChongduWorldUpdateInput;
    where: ChongduWorldWhereUniqueInput;
  }) => ChongduWorldPromise;
  updateManyChongduWorlds: (args: {
    data: ChongduWorldUpdateManyMutationInput;
    where?: ChongduWorldWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduWorld: (args: {
    where: ChongduWorldWhereUniqueInput;
    create: ChongduWorldCreateInput;
    update: ChongduWorldUpdateInput;
  }) => ChongduWorldPromise;
  deleteChongduWorld: (
    where: ChongduWorldWhereUniqueInput
  ) => ChongduWorldPromise;
  deleteManyChongduWorlds: (
    where?: ChongduWorldWhereInput
  ) => BatchPayloadPromise;
  createChongduWorldComment: (
    data: ChongduWorldCommentCreateInput
  ) => ChongduWorldCommentPromise;
  updateChongduWorldComment: (args: {
    data: ChongduWorldCommentUpdateInput;
    where: ChongduWorldCommentWhereUniqueInput;
  }) => ChongduWorldCommentPromise;
  updateManyChongduWorldComments: (args: {
    data: ChongduWorldCommentUpdateManyMutationInput;
    where?: ChongduWorldCommentWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduWorldComment: (args: {
    where: ChongduWorldCommentWhereUniqueInput;
    create: ChongduWorldCommentCreateInput;
    update: ChongduWorldCommentUpdateInput;
  }) => ChongduWorldCommentPromise;
  deleteChongduWorldComment: (
    where: ChongduWorldCommentWhereUniqueInput
  ) => ChongduWorldCommentPromise;
  deleteManyChongduWorldComments: (
    where?: ChongduWorldCommentWhereInput
  ) => BatchPayloadPromise;
  createChongduWorldJoin: (
    data: ChongduWorldJoinCreateInput
  ) => ChongduWorldJoinPromise;
  updateChongduWorldJoin: (args: {
    data: ChongduWorldJoinUpdateInput;
    where: ChongduWorldJoinWhereUniqueInput;
  }) => ChongduWorldJoinPromise;
  updateManyChongduWorldJoins: (args: {
    data: ChongduWorldJoinUpdateManyMutationInput;
    where?: ChongduWorldJoinWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduWorldJoin: (args: {
    where: ChongduWorldJoinWhereUniqueInput;
    create: ChongduWorldJoinCreateInput;
    update: ChongduWorldJoinUpdateInput;
  }) => ChongduWorldJoinPromise;
  deleteChongduWorldJoin: (
    where: ChongduWorldJoinWhereUniqueInput
  ) => ChongduWorldJoinPromise;
  deleteManyChongduWorldJoins: (
    where?: ChongduWorldJoinWhereInput
  ) => BatchPayloadPromise;
  createChongduWorldLike: (
    data: ChongduWorldLikeCreateInput
  ) => ChongduWorldLikePromise;
  updateChongduWorldLike: (args: {
    data: ChongduWorldLikeUpdateInput;
    where: ChongduWorldLikeWhereUniqueInput;
  }) => ChongduWorldLikePromise;
  updateManyChongduWorldLikes: (args: {
    data: ChongduWorldLikeUpdateManyMutationInput;
    where?: ChongduWorldLikeWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduWorldLike: (args: {
    where: ChongduWorldLikeWhereUniqueInput;
    create: ChongduWorldLikeCreateInput;
    update: ChongduWorldLikeUpdateInput;
  }) => ChongduWorldLikePromise;
  deleteChongduWorldLike: (
    where: ChongduWorldLikeWhereUniqueInput
  ) => ChongduWorldLikePromise;
  deleteManyChongduWorldLikes: (
    where?: ChongduWorldLikeWhereInput
  ) => BatchPayloadPromise;
  createChongduWorldReply: (
    data: ChongduWorldReplyCreateInput
  ) => ChongduWorldReplyPromise;
  updateChongduWorldReply: (args: {
    data: ChongduWorldReplyUpdateInput;
    where: ChongduWorldReplyWhereUniqueInput;
  }) => ChongduWorldReplyPromise;
  updateManyChongduWorldReplies: (args: {
    data: ChongduWorldReplyUpdateManyMutationInput;
    where?: ChongduWorldReplyWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduWorldReply: (args: {
    where: ChongduWorldReplyWhereUniqueInput;
    create: ChongduWorldReplyCreateInput;
    update: ChongduWorldReplyUpdateInput;
  }) => ChongduWorldReplyPromise;
  deleteChongduWorldReply: (
    where: ChongduWorldReplyWhereUniqueInput
  ) => ChongduWorldReplyPromise;
  deleteManyChongduWorldReplies: (
    where?: ChongduWorldReplyWhereInput
  ) => BatchPayloadPromise;
  createChongduWorldShield: (
    data: ChongduWorldShieldCreateInput
  ) => ChongduWorldShieldPromise;
  updateChongduWorldShield: (args: {
    data: ChongduWorldShieldUpdateInput;
    where: ChongduWorldShieldWhereUniqueInput;
  }) => ChongduWorldShieldPromise;
  updateManyChongduWorldShields: (args: {
    data: ChongduWorldShieldUpdateManyMutationInput;
    where?: ChongduWorldShieldWhereInput;
  }) => BatchPayloadPromise;
  upsertChongduWorldShield: (args: {
    where: ChongduWorldShieldWhereUniqueInput;
    create: ChongduWorldShieldCreateInput;
    update: ChongduWorldShieldUpdateInput;
  }) => ChongduWorldShieldPromise;
  deleteChongduWorldShield: (
    where: ChongduWorldShieldWhereUniqueInput
  ) => ChongduWorldShieldPromise;
  deleteManyChongduWorldShields: (
    where?: ChongduWorldShieldWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  chongduAccount: (
    where?: ChongduAccountSubscriptionWhereInput
  ) => ChongduAccountSubscriptionPayloadSubscription;
  chongduAddress: (
    where?: ChongduAddressSubscriptionWhereInput
  ) => ChongduAddressSubscriptionPayloadSubscription;
  chongduAddressRelation: (
    where?: ChongduAddressRelationSubscriptionWhereInput
  ) => ChongduAddressRelationSubscriptionPayloadSubscription;
  chongduAdmin: (
    where?: ChongduAdminSubscriptionWhereInput
  ) => ChongduAdminSubscriptionPayloadSubscription;
  chongduAdminRole: (
    where?: ChongduAdminRoleSubscriptionWhereInput
  ) => ChongduAdminRoleSubscriptionPayloadSubscription;
  chongduAdvertisement: (
    where?: ChongduAdvertisementSubscriptionWhereInput
  ) => ChongduAdvertisementSubscriptionPayloadSubscription;
  chongduAdvice: (
    where?: ChongduAdviceSubscriptionWhereInput
  ) => ChongduAdviceSubscriptionPayloadSubscription;
  chongduAgent: (
    where?: ChongduAgentSubscriptionWhereInput
  ) => ChongduAgentSubscriptionPayloadSubscription;
  chongduAppVersion: (
    where?: ChongduAppVersionSubscriptionWhereInput
  ) => ChongduAppVersionSubscriptionPayloadSubscription;
  chongduAppointment: (
    where?: ChongduAppointmentSubscriptionWhereInput
  ) => ChongduAppointmentSubscriptionPayloadSubscription;
  chongduCart: (
    where?: ChongduCartSubscriptionWhereInput
  ) => ChongduCartSubscriptionPayloadSubscription;
  chongduCity: (
    where?: ChongduCitySubscriptionWhereInput
  ) => ChongduCitySubscriptionPayloadSubscription;
  chongduComment: (
    where?: ChongduCommentSubscriptionWhereInput
  ) => ChongduCommentSubscriptionPayloadSubscription;
  chongduCommentPraise: (
    where?: ChongduCommentPraiseSubscriptionWhereInput
  ) => ChongduCommentPraiseSubscriptionPayloadSubscription;
  chongduCommentReply: (
    where?: ChongduCommentReplySubscriptionWhereInput
  ) => ChongduCommentReplySubscriptionPayloadSubscription;
  chongduCommentReview: (
    where?: ChongduCommentReviewSubscriptionWhereInput
  ) => ChongduCommentReviewSubscriptionPayloadSubscription;
  chongduCompanyauthent: (
    where?: ChongduCompanyauthentSubscriptionWhereInput
  ) => ChongduCompanyauthentSubscriptionPayloadSubscription;
  chongduCompanyauthentLog: (
    where?: ChongduCompanyauthentLogSubscriptionWhereInput
  ) => ChongduCompanyauthentLogSubscriptionPayloadSubscription;
  chongduCompanyrecommend: (
    where?: ChongduCompanyrecommendSubscriptionWhereInput
  ) => ChongduCompanyrecommendSubscriptionPayloadSubscription;
  chongduCorrelation: (
    where?: ChongduCorrelationSubscriptionWhereInput
  ) => ChongduCorrelationSubscriptionPayloadSubscription;
  chongduDataVersion: (
    where?: ChongduDataVersionSubscriptionWhereInput
  ) => ChongduDataVersionSubscriptionPayloadSubscription;
  chongduDiscuss: (
    where?: ChongduDiscussSubscriptionWhereInput
  ) => ChongduDiscussSubscriptionPayloadSubscription;
  chongduFilemanage: (
    where?: ChongduFilemanageSubscriptionWhereInput
  ) => ChongduFilemanageSubscriptionPayloadSubscription;
  chongduFocusing: (
    where?: ChongduFocusingSubscriptionWhereInput
  ) => ChongduFocusingSubscriptionPayloadSubscription;
  chongduInform: (
    where?: ChongduInformSubscriptionWhereInput
  ) => ChongduInformSubscriptionPayloadSubscription;
  chongduLock: (
    where?: ChongduLockSubscriptionWhereInput
  ) => ChongduLockSubscriptionPayloadSubscription;
  chongduLog: (
    where?: ChongduLogSubscriptionWhereInput
  ) => ChongduLogSubscriptionPayloadSubscription;
  chongduLoginLog: (
    where?: ChongduLoginLogSubscriptionWhereInput
  ) => ChongduLoginLogSubscriptionPayloadSubscription;
  chongduMenu: (
    where?: ChongduMenuSubscriptionWhereInput
  ) => ChongduMenuSubscriptionPayloadSubscription;
  chongduMerchant: (
    where?: ChongduMerchantSubscriptionWhereInput
  ) => ChongduMerchantSubscriptionPayloadSubscription;
  chongduMerchantImg: (
    where?: ChongduMerchantImgSubscriptionWhereInput
  ) => ChongduMerchantImgSubscriptionPayloadSubscription;
  chongduMerchantstatistic: (
    where?: ChongduMerchantstatisticSubscriptionWhereInput
  ) => ChongduMerchantstatisticSubscriptionPayloadSubscription;
  chongduMessage: (
    where?: ChongduMessageSubscriptionWhereInput
  ) => ChongduMessageSubscriptionPayloadSubscription;
  chongduModel: (
    where?: ChongduModelSubscriptionWhereInput
  ) => ChongduModelSubscriptionPayloadSubscription;
  chongduModeldetail: (
    where?: ChongduModeldetailSubscriptionWhereInput
  ) => ChongduModeldetailSubscriptionPayloadSubscription;
  chongduOrder: (
    where?: ChongduOrderSubscriptionWhereInput
  ) => ChongduOrderSubscriptionPayloadSubscription;
  chongduOrderItem: (
    where?: ChongduOrderItemSubscriptionWhereInput
  ) => ChongduOrderItemSubscriptionPayloadSubscription;
  chongduOrderinvoice: (
    where?: ChongduOrderinvoiceSubscriptionWhereInput
  ) => ChongduOrderinvoiceSubscriptionPayloadSubscription;
  chongduOrderinvoicedetail: (
    where?: ChongduOrderinvoicedetailSubscriptionWhereInput
  ) => ChongduOrderinvoicedetailSubscriptionPayloadSubscription;
  chongduOrderserial: (
    where?: ChongduOrderserialSubscriptionWhereInput
  ) => ChongduOrderserialSubscriptionPayloadSubscription;
  chongduOrderstatistic: (
    where?: ChongduOrderstatisticSubscriptionWhereInput
  ) => ChongduOrderstatisticSubscriptionPayloadSubscription;
  chongduPayInfo: (
    where?: ChongduPayInfoSubscriptionWhereInput
  ) => ChongduPayInfoSubscriptionPayloadSubscription;
  chongduPermission: (
    where?: ChongduPermissionSubscriptionWhereInput
  ) => ChongduPermissionSubscriptionPayloadSubscription;
  chongduPet: (
    where?: ChongduPetSubscriptionWhereInput
  ) => ChongduPetSubscriptionPayloadSubscription;
  chongduPetCard: (
    where?: ChongduPetCardSubscriptionWhereInput
  ) => ChongduPetCardSubscriptionPayloadSubscription;
  chongduPetImg: (
    where?: ChongduPetImgSubscriptionWhereInput
  ) => ChongduPetImgSubscriptionPayloadSubscription;
  chongduPetRecommend: (
    where?: ChongduPetRecommendSubscriptionWhereInput
  ) => ChongduPetRecommendSubscriptionPayloadSubscription;
  chongduPetType: (
    where?: ChongduPetTypeSubscriptionWhereInput
  ) => ChongduPetTypeSubscriptionPayloadSubscription;
  chongduPetauthentLog: (
    where?: ChongduPetauthentLogSubscriptionWhereInput
  ) => ChongduPetauthentLogSubscriptionPayloadSubscription;
  chongduPetauthentdetail: (
    where?: ChongduPetauthentdetailSubscriptionWhereInput
  ) => ChongduPetauthentdetailSubscriptionPayloadSubscription;
  chongduPlatformBusiness: (
    where?: ChongduPlatformBusinessSubscriptionWhereInput
  ) => ChongduPlatformBusinessSubscriptionPayloadSubscription;
  chongduPlatformExecute: (
    where?: ChongduPlatformExecuteSubscriptionWhereInput
  ) => ChongduPlatformExecuteSubscriptionPayloadSubscription;
  chongduProduct: (
    where?: ChongduProductSubscriptionWhereInput
  ) => ChongduProductSubscriptionPayloadSubscription;
  chongduProductAuthentdetail: (
    where?: ChongduProductAuthentdetailSubscriptionWhereInput
  ) => ChongduProductAuthentdetailSubscriptionPayloadSubscription;
  chongduProductBrand: (
    where?: ChongduProductBrandSubscriptionWhereInput
  ) => ChongduProductBrandSubscriptionPayloadSubscription;
  chongduProductImg: (
    where?: ChongduProductImgSubscriptionWhereInput
  ) => ChongduProductImgSubscriptionPayloadSubscription;
  chongduProductPettype: (
    where?: ChongduProductPettypeSubscriptionWhereInput
  ) => ChongduProductPettypeSubscriptionPayloadSubscription;
  chongduProductRecommend: (
    where?: ChongduProductRecommendSubscriptionWhereInput
  ) => ChongduProductRecommendSubscriptionPayloadSubscription;
  chongduProductSku: (
    where?: ChongduProductSkuSubscriptionWhereInput
  ) => ChongduProductSkuSubscriptionPayloadSubscription;
  chongduProductType: (
    where?: ChongduProductTypeSubscriptionWhereInput
  ) => ChongduProductTypeSubscriptionPayloadSubscription;
  chongduProductauthentLog: (
    where?: ChongduProductauthentLogSubscriptionWhereInput
  ) => ChongduProductauthentLogSubscriptionPayloadSubscription;
  chongduRecommend: (
    where?: ChongduRecommendSubscriptionWhereInput
  ) => ChongduRecommendSubscriptionPayloadSubscription;
  chongduRefresh: (
    where?: ChongduRefreshSubscriptionWhereInput
  ) => ChongduRefreshSubscriptionPayloadSubscription;
  chongduRepellent: (
    where?: ChongduRepellentSubscriptionWhereInput
  ) => ChongduRepellentSubscriptionPayloadSubscription;
  chongduRole: (
    where?: ChongduRoleSubscriptionWhereInput
  ) => ChongduRoleSubscriptionPayloadSubscription;
  chongduRoleAuth: (
    where?: ChongduRoleAuthSubscriptionWhereInput
  ) => ChongduRoleAuthSubscriptionPayloadSubscription;
  chongduRoleDetail: (
    where?: ChongduRoleDetailSubscriptionWhereInput
  ) => ChongduRoleDetailSubscriptionPayloadSubscription;
  chongduRoleGroup: (
    where?: ChongduRoleGroupSubscriptionWhereInput
  ) => ChongduRoleGroupSubscriptionPayloadSubscription;
  chongduRoleMenu: (
    where?: ChongduRoleMenuSubscriptionWhereInput
  ) => ChongduRoleMenuSubscriptionPayloadSubscription;
  chongduRoleMenuChildren: (
    where?: ChongduRoleMenuChildrenSubscriptionWhereInput
  ) => ChongduRoleMenuChildrenSubscriptionPayloadSubscription;
  chongduSearchthink: (
    where?: ChongduSearchthinkSubscriptionWhereInput
  ) => ChongduSearchthinkSubscriptionPayloadSubscription;
  chongduService: (
    where?: ChongduServiceSubscriptionWhereInput
  ) => ChongduServiceSubscriptionPayloadSubscription;
  chongduServiceAuthentdetail: (
    where?: ChongduServiceAuthentdetailSubscriptionWhereInput
  ) => ChongduServiceAuthentdetailSubscriptionPayloadSubscription;
  chongduServiceImg: (
    where?: ChongduServiceImgSubscriptionWhereInput
  ) => ChongduServiceImgSubscriptionPayloadSubscription;
  chongduServicePettype: (
    where?: ChongduServicePettypeSubscriptionWhereInput
  ) => ChongduServicePettypeSubscriptionPayloadSubscription;
  chongduServiceRecommend: (
    where?: ChongduServiceRecommendSubscriptionWhereInput
  ) => ChongduServiceRecommendSubscriptionPayloadSubscription;
  chongduServiceType: (
    where?: ChongduServiceTypeSubscriptionWhereInput
  ) => ChongduServiceTypeSubscriptionPayloadSubscription;
  chongduServiceauthentLog: (
    where?: ChongduServiceauthentLogSubscriptionWhereInput
  ) => ChongduServiceauthentLogSubscriptionPayloadSubscription;
  chongduStat: (
    where?: ChongduStatSubscriptionWhereInput
  ) => ChongduStatSubscriptionPayloadSubscription;
  chongduTag: (
    where?: ChongduTagSubscriptionWhereInput
  ) => ChongduTagSubscriptionPayloadSubscription;
  chongduTagDetail: (
    where?: ChongduTagDetailSubscriptionWhereInput
  ) => ChongduTagDetailSubscriptionPayloadSubscription;
  chongduTradingArea: (
    where?: ChongduTradingAreaSubscriptionWhereInput
  ) => ChongduTradingAreaSubscriptionPayloadSubscription;
  chongduUser: (
    where?: ChongduUserSubscriptionWhereInput
  ) => ChongduUserSubscriptionPayloadSubscription;
  chongduUserFavourite: (
    where?: ChongduUserFavouriteSubscriptionWhereInput
  ) => ChongduUserFavouriteSubscriptionPayloadSubscription;
  chongduUserauthent: (
    where?: ChongduUserauthentSubscriptionWhereInput
  ) => ChongduUserauthentSubscriptionPayloadSubscription;
  chongduUserauthentLog: (
    where?: ChongduUserauthentLogSubscriptionWhereInput
  ) => ChongduUserauthentLogSubscriptionPayloadSubscription;
  chongduUserbind: (
    where?: ChongduUserbindSubscriptionWhereInput
  ) => ChongduUserbindSubscriptionPayloadSubscription;
  chongduUserdetail: (
    where?: ChongduUserdetailSubscriptionWhereInput
  ) => ChongduUserdetailSubscriptionPayloadSubscription;
  chongduUserstatistic: (
    where?: ChongduUserstatisticSubscriptionWhereInput
  ) => ChongduUserstatisticSubscriptionPayloadSubscription;
  chongduVaccine: (
    where?: ChongduVaccineSubscriptionWhereInput
  ) => ChongduVaccineSubscriptionPayloadSubscription;
  chongduVaccineBrand: (
    where?: ChongduVaccineBrandSubscriptionWhereInput
  ) => ChongduVaccineBrandSubscriptionPayloadSubscription;
  chongduValidate: (
    where?: ChongduValidateSubscriptionWhereInput
  ) => ChongduValidateSubscriptionPayloadSubscription;
  chongduVersion: (
    where?: ChongduVersionSubscriptionWhereInput
  ) => ChongduVersionSubscriptionPayloadSubscription;
  chongduViewcount: (
    where?: ChongduViewcountSubscriptionWhereInput
  ) => ChongduViewcountSubscriptionPayloadSubscription;
  chongduWorld: (
    where?: ChongduWorldSubscriptionWhereInput
  ) => ChongduWorldSubscriptionPayloadSubscription;
  chongduWorldComment: (
    where?: ChongduWorldCommentSubscriptionWhereInput
  ) => ChongduWorldCommentSubscriptionPayloadSubscription;
  chongduWorldJoin: (
    where?: ChongduWorldJoinSubscriptionWhereInput
  ) => ChongduWorldJoinSubscriptionPayloadSubscription;
  chongduWorldLike: (
    where?: ChongduWorldLikeSubscriptionWhereInput
  ) => ChongduWorldLikeSubscriptionPayloadSubscription;
  chongduWorldReply: (
    where?: ChongduWorldReplySubscriptionWhereInput
  ) => ChongduWorldReplySubscriptionPayloadSubscription;
  chongduWorldShield: (
    where?: ChongduWorldShieldSubscriptionWhereInput
  ) => ChongduWorldShieldSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ChongduProductPettypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "level_ASC"
  | "level_DESC"
  | "petTypeId_ASC"
  | "petTypeId_DESC"
  | "petTypeName_ASC"
  | "petTypeName_DESC"
  | "productId_ASC"
  | "productId_DESC";

export type ChongduCommentPraiseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "relateId_ASC"
  | "relateId_DESC"
  | "relateType_ASC"
  | "relateType_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduAdviceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "type_ASC"
  | "type_DESC"
  | "useid_ASC"
  | "useid_DESC";

export type ChongduWorldShieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "shieldBy_ASC"
  | "shieldBy_DESC"
  | "status_ASC"
  | "status_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "d_ASC"
  | "d_DESC";

export type ChongduProductImgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addr_ASC"
  | "addr_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "imgType_ASC"
  | "imgType_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduWorldLikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "relateId_ASC"
  | "relateId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduProductBrandOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "firstLetter_ASC"
  | "firstLetter_DESC"
  | "logoImg_ASC"
  | "logoImg_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduWorldJoinOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "worldId_ASC"
  | "worldId_DESC";

export type ChongduProductAuthentdetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "audit_ASC"
  | "audit_DESC"
  | "audittime_ASC"
  | "audittime_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduWorldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "activityName_ASC"
  | "activityName_DESC"
  | "commentStatus_ASC"
  | "commentStatus_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "description_ASC"
  | "description_DESC"
  | "gif_ASC"
  | "gif_DESC"
  | "height_ASC"
  | "height_DESC"
  | "image_ASC"
  | "image_DESC"
  | "joinCount_ASC"
  | "joinCount_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "praiseCount_ASC"
  | "praiseCount_DESC"
  | "shareCount_ASC"
  | "shareCount_DESC"
  | "type_ASC"
  | "type_DESC"
  | "video_ASC"
  | "video_DESC"
  | "viewCount_ASC"
  | "viewCount_DESC"
  | "width_ASC"
  | "width_DESC";

export type ChongduProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "browser_ASC"
  | "browser_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "promotionPrice_ASC"
  | "promotionPrice_DESC"
  | "sale_ASC"
  | "sale_DESC"
  | "shareCount_ASC"
  | "shareCount_DESC"
  | "status_ASC"
  | "status_DESC"
  | "stock_ASC"
  | "stock_DESC"
  | "title_ASC"
  | "title_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduVersionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "mac_ASC"
  | "mac_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "tyep_ASC"
  | "tyep_DESC"
  | "versionCode_ASC"
  | "versionCode_DESC";

export type ChongduPlatformExecuteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "business_ASC"
  | "business_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "money_ASC"
  | "money_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "oneprice_ASC"
  | "oneprice_DESC"
  | "relateId_ASC"
  | "relateId_DESC"
  | "relateType_ASC"
  | "relateType_DESC"
  | "residue_ASC"
  | "residue_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "timestep_ASC"
  | "timestep_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userarea_ASC"
  | "userarea_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "username_ASC"
  | "username_DESC";

export type ChongduVaccineBrandOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduPlatformBusinessOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "length_ASC"
  | "length_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "rNum_ASC"
  | "rNum_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "timestep_ASC"
  | "timestep_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduAddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "code_ASC"
  | "code_DESC"
  | "country_ASC"
  | "country_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "detailAdd_ASC"
  | "detailAdd_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "province_ASC"
  | "province_DESC"
  | "region_ASC"
  | "region_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "tel_ASC"
  | "tel_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduAgentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduUserdetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deviceCode_ASC"
  | "deviceCode_DESC"
  | "deviceName_ASC"
  | "deviceName_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduPetauthentdetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "audit_ASC"
  | "audit_DESC"
  | "authtime_ASC"
  | "authtime_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC";

export type ChongduUserauthentLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userauthentId_ASC"
  | "userauthentId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC";

export type ChongduPetauthentLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "petauthentId_ASC"
  | "petauthentId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC";

export type ChongduUserFavouriteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "relateId_ASC"
  | "relateId_DESC"
  | "relateType_ASC"
  | "relateType_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduPetTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "image_ASC"
  | "image_DESC"
  | "level_ASC"
  | "level_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "ppid_ASC"
  | "ppid_DESC"
  | "sort_ASC"
  | "sort_DESC";

export type ChongduUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "balance_ASC"
  | "balance_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "hash_ASC"
  | "hash_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "isaudit_ASC"
  | "isaudit_DESC"
  | "isauthent_ASC"
  | "isauthent_DESC"
  | "lastlogintime_ASC"
  | "lastlogintime_DESC"
  | "mail_ASC"
  | "mail_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "openidDy_ASC"
  | "openidDy_DESC"
  | "openidQq_ASC"
  | "openidQq_DESC"
  | "openidWx_ASC"
  | "openidWx_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "regeistType_ASC"
  | "regeistType_DESC"
  | "regtime_ASC"
  | "regtime_DESC"
  | "salt_ASC"
  | "salt_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "updateBy_ASC"
  | "updateBy_DESC"
  | "username_ASC"
  | "username_DESC"
  | "vip_ASC"
  | "vip_DESC";

export type ChongduPetRecommendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceid_ASC"
  | "deviceid_DESC"
  | "devicename_ASC"
  | "devicename_DESC"
  | "devicetype_ASC"
  | "devicetype_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "username_ASC"
  | "username_DESC";

export type ChongduTagDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "petCardId_ASC"
  | "petCardId_DESC"
  | "tagId_ASC"
  | "tagId_DESC"
  | "worldId_ASC"
  | "worldId_DESC";

export type ChongduPetImgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addr_ASC"
  | "addr_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "imgType_ASC"
  | "imgType_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "petId_ASC"
  | "petId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduStatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "agentId_ASC"
  | "agentId_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "num_ASC"
  | "num_DESC"
  | "satus_ASC"
  | "satus_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduPetCardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "isSteriliz_ASC"
  | "isSteriliz_DESC"
  | "name_ASC"
  | "name_DESC"
  | "petType_ASC"
  | "petType_DESC"
  | "praiseCount_ASC"
  | "praiseCount_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "weight_ASC"
  | "weight_DESC";

export type ChongduServiceTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "img_ASC"
  | "img_DESC"
  | "level_ASC"
  | "level_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduAppVersionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "appCode_ASC"
  | "appCode_DESC"
  | "appId_ASC"
  | "appId_DESC"
  | "appVersion_ASC"
  | "appVersion_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "description_ASC"
  | "description_DESC"
  | "deviceType_ASC"
  | "deviceType_DESC"
  | "fileName_ASC"
  | "fileName_DESC"
  | "forces_ASC"
  | "forces_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "url_ASC"
  | "url_DESC";

export type ChongduServicePettypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "level_ASC"
  | "level_DESC"
  | "petTypeId_ASC"
  | "petTypeId_DESC"
  | "petTypeName_ASC"
  | "petTypeName_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC";

export type ChongduPetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addressId_ASC"
  | "addressId_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "browser_ASC"
  | "browser_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "code_ASC"
  | "code_DESC"
  | "color_ASC"
  | "color_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "isMeet_ASC"
  | "isMeet_DESC"
  | "level_ASC"
  | "level_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "pType_ASC"
  | "pType_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "shareCount_ASC"
  | "shareCount_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC";

export type ChongduServiceImgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addr_ASC"
  | "addr_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "imgType_ASC"
  | "imgType_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduPermissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "name_ASC"
  | "name_DESC"
  | "parentId_ASC"
  | "parentId_DESC"
  | "parentIds_ASC"
  | "parentIds_DESC"
  | "permission_ASC"
  | "permission_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC";

export type ChongduServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "area_ASC"
  | "area_DESC"
  | "browser_ASC"
  | "browser_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "sale_ASC"
  | "sale_DESC"
  | "shareCount_ASC"
  | "shareCount_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC";

export type ChongduPayInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "orderNo_ASC"
  | "orderNo_DESC"
  | "payNo_ASC"
  | "payNo_DESC"
  | "payPlatform_ASC"
  | "payPlatform_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduRoleMenuChildrenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "action_ASC"
  | "action_DESC"
  | "authName_ASC"
  | "authName_DESC"
  | "menuUrlName_ASC"
  | "menuUrlName_DESC";

export type ChongduOrderstatisticOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "count_ASC"
  | "count_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "day_ASC"
  | "day_DESC"
  | "hour_ASC"
  | "hour_DESC"
  | "month_ASC"
  | "month_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "year_ASC"
  | "year_DESC";

export type ChongduAdminRoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "adminId_ASC"
  | "adminId_DESC"
  | "cadminId_ASC"
  | "cadminId_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "roleId_ASC"
  | "roleId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduOrderserialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "context_ASC"
  | "context_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "money_ASC"
  | "money_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "ordersn_ASC"
  | "ordersn_DESC"
  | "platformtype_ASC"
  | "platformtype_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userid_ASC"
  | "userid_DESC";

export type ChongduRoleDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "modeldetailId_ASC"
  | "modeldetailId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "roleId_ASC"
  | "roleId_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduOrderinvoicedetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "audittime_ASC"
  | "audittime_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "invoiceid_ASC"
  | "invoiceid_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userid_ASC"
  | "userid_DESC";

export type ChongduRoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduAppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceid_ASC"
  | "deviceid_DESC"
  | "devicename_ASC"
  | "devicename_DESC"
  | "devicetype_ASC"
  | "devicetype_DESC"
  | "isOk_ASC"
  | "isOk_DESC"
  | "levelmessage_ASC"
  | "levelmessage_DESC"
  | "mark_ASC"
  | "mark_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "state_ASC"
  | "state_DESC"
  | "subtype_ASC"
  | "subtype_DESC"
  | "time_ASC"
  | "time_DESC"
  | "timebegin_ASC"
  | "timebegin_DESC"
  | "timeend_ASC"
  | "timeend_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "orderSn_ASC"
  | "orderSn_DESC";

export type ChongduRefreshOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "businessId_ASC"
  | "businessId_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "petId_ASC"
  | "petId_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "refreshType_ASC"
  | "refreshType_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduOrderinvoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "accountnum_ASC"
  | "accountnum_DESC"
  | "addressid_ASC"
  | "addressid_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "head_ASC"
  | "head_DESC"
  | "invoicename_ASC"
  | "invoicename_DESC"
  | "money_ASC"
  | "money_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nature_ASC"
  | "nature_DESC"
  | "orderid_ASC"
  | "orderid_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "username_ASC"
  | "username_DESC"
  | "usernum_ASC"
  | "usernum_DESC";

export type ChongduRecommendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cityCode_ASC"
  | "cityCode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceId_ASC"
  | "deviceId_DESC"
  | "deviceName_ASC"
  | "deviceName_DESC"
  | "deviceType_ASC"
  | "deviceType_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "relateId_ASC"
  | "relateId_DESC"
  | "relateType_ASC"
  | "relateType_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userName_ASC"
  | "userName_DESC";

export type ChongduOrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "closeTime_ASC"
  | "closeTime_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "currentPrice_ASC"
  | "currentPrice_DESC"
  | "d_ASC"
  | "d_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "image_ASC"
  | "image_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "merOrderNo_ASC"
  | "merOrderNo_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "orderNo_ASC"
  | "orderNo_DESC"
  | "paymentTime_ASC"
  | "paymentTime_DESC"
  | "paymentType_ASC"
  | "paymentType_DESC"
  | "postage_ASC"
  | "postage_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "productName_ASC"
  | "productName_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "reStatus_ASC"
  | "reStatus_DESC"
  | "sendTime_ASC"
  | "sendTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduProductTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "img_ASC"
  | "img_DESC"
  | "level_ASC"
  | "level_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "pettypeId_ASC"
  | "pettypeId_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addressId_ASC"
  | "addressId_DESC"
  | "closeTime_ASC"
  | "closeTime_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "orderNo_ASC"
  | "orderNo_DESC"
  | "payment_ASC"
  | "payment_DESC"
  | "paymentTime_ASC"
  | "paymentTime_DESC"
  | "paymentType_ASC"
  | "paymentType_DESC"
  | "postage_ASC"
  | "postage_DESC"
  | "sendTime_ASC"
  | "sendTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduProductRecommendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceid_ASC"
  | "deviceid_DESC"
  | "devicename_ASC"
  | "devicename_DESC"
  | "devicetype_ASC"
  | "devicetype_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "username_ASC"
  | "username_DESC";

export type ChongduModeldetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "action_ASC"
  | "action_DESC"
  | "alert_ASC"
  | "alert_DESC"
  | "ask_ASC"
  | "ask_DESC"
  | "auth_ASC"
  | "auth_DESC"
  | "buttomname_ASC"
  | "buttomname_DESC"
  | "button_ASC"
  | "button_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "function_ASC"
  | "function_DESC"
  | "heght_ASC"
  | "heght_DESC"
  | "method_ASC"
  | "method_DESC"
  | "methodname_ASC"
  | "methodname_DESC"
  | "modelId_ASC"
  | "modelId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "namespace_ASC"
  | "namespace_DESC"
  | "param_ASC"
  | "param_DESC"
  | "refresh_ASC"
  | "refresh_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "viewname_ASC"
  | "viewname_DESC"
  | "width_ASC"
  | "width_DESC";

export type ChongduWorldReplyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "commentId_ASC"
  | "commentId_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "praiseCount_ASC"
  | "praiseCount_DESC"
  | "replyuserId_ASC"
  | "replyuserId_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduModelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "action_ASC"
  | "action_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "namespace_ASC"
  | "namespace_DESC"
  | "path_ASC"
  | "path_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduWorldCommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "praiseCount_ASC"
  | "praiseCount_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "worldId_ASC"
  | "worldId_DESC";

export type ChongduMessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authentstate_ASC"
  | "authentstate_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "img_ASC"
  | "img_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "publishtime_ASC"
  | "publishtime_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduValidateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduCartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "checked_ASC"
  | "checked_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "num_ASC"
  | "num_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduUserstatisticOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "count_ASC"
  | "count_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "day_ASC"
  | "day_DESC"
  | "hour_ASC"
  | "hour_DESC"
  | "month_ASC"
  | "month_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "year_ASC"
  | "year_DESC";

export type ChongduMerchantstatisticOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "count_ASC"
  | "count_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "day_ASC"
  | "day_DESC"
  | "hour_ASC"
  | "hour_DESC"
  | "month_ASC"
  | "month_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "year_ASC"
  | "year_DESC";

export type ChongduUserauthentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authtime_ASC"
  | "authtime_DESC"
  | "backPhoto_ASC"
  | "backPhoto_DESC"
  | "beginTime_ASC"
  | "beginTime_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "cardAddress_ASC"
  | "cardAddress_DESC"
  | "cardNum_ASC"
  | "cardNum_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "frontPhoto_ASC"
  | "frontPhoto_DESC"
  | "handPhoto_ASC"
  | "handPhoto_DESC"
  | "nation_ASC"
  | "nation_DESC"
  | "realName_ASC"
  | "realName_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "signFrom_ASC"
  | "signFrom_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduMerchantImgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addr_ASC"
  | "addr_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "imgType_ASC"
  | "imgType_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduTradingAreaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "pCityCode_ASC"
  | "pCityCode_DESC"
  | "cityCode_ASC"
  | "cityCode_DESC"
  | "cityName_ASC"
  | "cityName_DESC"
  | "tradingAreaName_ASC"
  | "tradingAreaName_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "distance_ASC"
  | "distance_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "mt_ASC"
  | "mt_DESC";

export type ChongduMerchantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "attention_ASC"
  | "attention_DESC"
  | "beginTime_ASC"
  | "beginTime_DESC"
  | "city_ASC"
  | "city_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "name_ASC"
  | "name_DESC"
  | "tel_ASC"
  | "tel_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduServiceauthentLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serviceauthentId_ASC"
  | "serviceauthentId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC";

export type ChongduMenuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "mobileIcon_ASC"
  | "mobileIcon_DESC"
  | "modelId_ASC"
  | "modelId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "path_ASC"
  | "path_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduAdminOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "agentAdminId_ASC"
  | "agentAdminId_DESC"
  | "agentId_ASC"
  | "agentId_DESC"
  | "cityCode_ASC"
  | "cityCode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "isAuth_ASC"
  | "isAuth_DESC"
  | "lastLoginTime_ASC"
  | "lastLoginTime_DESC"
  | "level_ASC"
  | "level_DESC"
  | "mac_ASC"
  | "mac_DESC"
  | "mail_ASC"
  | "mail_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "pwd_ASC"
  | "pwd_DESC"
  | "realName_ASC"
  | "realName_DESC"
  | "rt_ASC"
  | "rt_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "tel_ASC"
  | "tel_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduLoginLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "adminId_ASC"
  | "adminId_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "loginTime_ASC"
  | "loginTime_DESC"
  | "mac_ASC"
  | "mac_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduSearchthinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "hot_ASC"
  | "hot_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cn_ASC"
  | "cn_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "dataId_ASC"
  | "dataId_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "mn_ASC"
  | "mn_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "originalData_ASC"
  | "originalData_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "targetData_ASC"
  | "targetData_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduRoleGroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "roleName_ASC"
  | "roleName_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "muserId_ASC"
  | "muserId_DESC";

export type ChongduCityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduRepellentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "brandId_ASC"
  | "brandId_DESC"
  | "cityCode_ASC"
  | "cityCode_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "image_ASC"
  | "image_DESC"
  | "indexNum_ASC"
  | "indexNum_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "petId_ASC"
  | "petId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "street_ASC"
  | "street_DESC"
  | "time_ASC"
  | "time_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduLockOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "thread_ASC"
  | "thread_DESC"
  | "tName_ASC"
  | "tName_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduProductauthentLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productauthentId_ASC"
  | "productauthentId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC";

export type ChongduInformOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "relatedType_ASC"
  | "relatedType_DESC"
  | "relatedId_ASC"
  | "relatedId_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "status_ASC"
  | "status_DESC"
  | "disposeAt_ASC"
  | "disposeAt_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChongduFocusingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "fUserId_ASC"
  | "fUserId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduViewcountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceid_ASC"
  | "deviceid_DESC"
  | "devicename_ASC"
  | "devicename_DESC"
  | "devicetype_ASC"
  | "devicetype_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "s_ASC"
  | "s_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "xu_ASC"
  | "xu_DESC";

export type ChongduFilemanageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "customtype_ASC"
  | "customtype_DESC"
  | "d_ASC"
  | "d_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "path_ASC"
  | "path_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "tablename_ASC"
  | "tablename_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userid_ASC"
  | "userid_DESC";

export type ChongduUserbindOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "bindtime_ASC"
  | "bindtime_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserId_ASC"
  | "cuserId_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mail_ASC"
  | "mail_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "tel_ASC"
  | "tel_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduDiscussOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "pSComId_ASC"
  | "pSComId_DESC"
  | "replyType_ASC"
  | "replyType_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduTagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "petCardId_ASC"
  | "petCardId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "worldId_ASC"
  | "worldId_DESC";

export type ChongduDataVersionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "mac_ASC"
  | "mac_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserId_ASC"
  | "muserId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "versionCode_ASC"
  | "versionCode_DESC";

export type ChongduServiceAuthentdetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "audit_ASC"
  | "audit_DESC"
  | "audittime_ASC"
  | "audittime_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userid_ASC"
  | "userid_DESC";

export type ChongduCommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "anonymity_ASC"
  | "anonymity_DESC"
  | "brower_ASC"
  | "brower_DESC"
  | "commentType_ASC"
  | "commentType_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "image_ASC"
  | "image_DESC"
  | "isAdd_ASC"
  | "isAdd_DESC"
  | "likedNum_ASC"
  | "likedNum_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "replyNum_ASC"
  | "replyNum_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "shareNum_ASC"
  | "shareNum_DESC"
  | "starNum_ASC"
  | "starNum_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "video_ASC"
  | "video_DESC"
  | "orderSn_ASC"
  | "orderSn_DESC";

export type ChongduRoleAuthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "action_ASC"
  | "action_DESC"
  | "method_ASC"
  | "method_DESC"
  | "operationName_ASC"
  | "operationName_DESC";

export type ChongduCorrelationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "petLevelId_ASC"
  | "petLevelId_DESC"
  | "petTypeId_ASC"
  | "petTypeId_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "type_ASC"
  | "type_DESC";

export type ChongduProductSkuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "attribute_ASC"
  | "attribute_DESC"
  | "d_ASC"
  | "d_DESC"
  | "lockStock_ASC"
  | "lockStock_DESC"
  | "lowStock_ASC"
  | "lowStock_DESC"
  | "num_ASC"
  | "num_DESC"
  | "price_ASC"
  | "price_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "salesVolume_ASC"
  | "salesVolume_DESC"
  | "skuCode_ASC"
  | "skuCode_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduCompanyrecommendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceid_ASC"
  | "deviceid_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "fullname_ASC"
  | "fullname_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduVaccineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "brandId_ASC"
  | "brandId_DESC"
  | "cityCode_ASC"
  | "cityCode_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "image_ASC"
  | "image_DESC"
  | "indexNum_ASC"
  | "indexNum_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "petId_ASC"
  | "petId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "street_ASC"
  | "street_DESC"
  | "time_ASC"
  | "time_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduCommentReplyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "commentId_ASC"
  | "commentId_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "praiseCount_ASC"
  | "praiseCount_DESC"
  | "replyuserId_ASC"
  | "replyuserId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduCommentReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "brower_ASC"
  | "brower_DESC"
  | "commentId_ASC"
  | "commentId_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "image_ASC"
  | "image_DESC"
  | "likedNum_ASC"
  | "likedNum_DESC"
  | "replyNum_ASC"
  | "replyNum_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "video_ASC"
  | "video_DESC";

export type ChongduCompanyauthentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authType_ASC"
  | "authType_DESC"
  | "backPhoto_ASC"
  | "backPhoto_DESC"
  | "bisDate_ASC"
  | "bisDate_DESC"
  | "bisPhoto_ASC"
  | "bisPhoto_DESC"
  | "city_ASC"
  | "city_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "companyAddress_ASC"
  | "companyAddress_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "discription_ASC"
  | "discription_DESC"
  | "frontPhoto_ASC"
  | "frontPhoto_DESC"
  | "handPhoto_ASC"
  | "handPhoto_DESC"
  | "headPhoto_ASC"
  | "headPhoto_DESC"
  | "isSame_ASC"
  | "isSame_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "legalDi_ASC"
  | "legalDi_DESC"
  | "legalName_ASC"
  | "legalName_DESC"
  | "legalTel_ASC"
  | "legalTel_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nowAddress_ASC"
  | "nowAddress_DESC"
  | "otherPhoto_ASC"
  | "otherPhoto_DESC"
  | "registMoney_ASC"
  | "registMoney_DESC"
  | "setupDate_ASC"
  | "setupDate_DESC"
  | "socialCode_ASC"
  | "socialCode_DESC"
  | "status_ASC"
  | "status_DESC";

export type ChongduCompanyauthentLogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "companyauthentId_ASC"
  | "companyauthentId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC";

export type ChongduAddressRelationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "code_ASC"
  | "code_DESC"
  | "country_ASC"
  | "country_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "detailAdd_ASC"
  | "detailAdd_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "province_ASC"
  | "province_DESC"
  | "region_ASC"
  | "region_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "tel_ASC"
  | "tel_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "d_ASC"
  | "d_DESC"
  | "favorNum_ASC"
  | "favorNum_DESC"
  | "isVip_ASC"
  | "isVip_DESC"
  | "level_ASC"
  | "level_DESC"
  | "merchantId_ASC"
  | "merchantId_DESC"
  | "money_ASC"
  | "money_DESC"
  | "refreshNum_ASC"
  | "refreshNum_DESC"
  | "stickNum_ASC"
  | "stickNum_DESC"
  | "type_ASC"
  | "type_DESC"
  | "userId_ASC"
  | "userId_DESC";

export type ChongduAdvertisementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "adminId_ASC"
  | "adminId_DESC"
  | "agentId_ASC"
  | "agentId_DESC"
  | "cityCode_ASC"
  | "cityCode_DESC"
  | "content_ASC"
  | "content_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "d_ASC"
  | "d_DESC"
  | "image_ASC"
  | "image_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "relateId_ASC"
  | "relateId_DESC"
  | "relateType_ASC"
  | "relateType_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "status_ASC"
  | "status_DESC"
  | "title_ASC"
  | "title_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC";

export type ChongduRoleMenuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "menuName_ASC"
  | "menuName_DESC"
  | "menuUrl_ASC"
  | "menuUrl_DESC"
  | "menuChildrenId_ASC"
  | "menuChildrenId_DESC";

export type ChongduServiceRecommendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "citycode_ASC"
  | "citycode_DESC"
  | "ct_ASC"
  | "ct_DESC"
  | "cuserid_ASC"
  | "cuserid_DESC"
  | "d_ASC"
  | "d_DESC"
  | "deviceid_ASC"
  | "deviceid_DESC"
  | "devicename_ASC"
  | "devicename_DESC"
  | "devicetype_ASC"
  | "devicetype_DESC"
  | "endtime_ASC"
  | "endtime_DESC"
  | "mt_ASC"
  | "mt_DESC"
  | "muserid_ASC"
  | "muserid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "s_ASC"
  | "s_DESC"
  | "serviceId_ASC"
  | "serviceId_DESC"
  | "sort_ASC"
  | "sort_DESC"
  | "starttime_ASC"
  | "starttime_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "username_ASC"
  | "username_DESC";

export interface ChongduMerchantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  attention?: Maybe<Int>;
  attention_not?: Maybe<Int>;
  attention_in?: Maybe<Int[] | Int>;
  attention_not_in?: Maybe<Int[] | Int>;
  attention_lt?: Maybe<Int>;
  attention_lte?: Maybe<Int>;
  attention_gt?: Maybe<Int>;
  attention_gte?: Maybe<Int>;
  beginTime?: Maybe<String>;
  beginTime_not?: Maybe<String>;
  beginTime_in?: Maybe<String[] | String>;
  beginTime_not_in?: Maybe<String[] | String>;
  beginTime_lt?: Maybe<String>;
  beginTime_lte?: Maybe<String>;
  beginTime_gt?: Maybe<String>;
  beginTime_gte?: Maybe<String>;
  beginTime_contains?: Maybe<String>;
  beginTime_not_contains?: Maybe<String>;
  beginTime_starts_with?: Maybe<String>;
  beginTime_not_starts_with?: Maybe<String>;
  beginTime_ends_with?: Maybe<String>;
  beginTime_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  tel?: Maybe<String>;
  tel_not?: Maybe<String>;
  tel_in?: Maybe<String[] | String>;
  tel_not_in?: Maybe<String[] | String>;
  tel_lt?: Maybe<String>;
  tel_lte?: Maybe<String>;
  tel_gt?: Maybe<String>;
  tel_gte?: Maybe<String>;
  tel_contains?: Maybe<String>;
  tel_not_contains?: Maybe<String>;
  tel_starts_with?: Maybe<String>;
  tel_not_starts_with?: Maybe<String>;
  tel_ends_with?: Maybe<String>;
  tel_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduMerchantWhereInput[] | ChongduMerchantWhereInput>;
  OR?: Maybe<ChongduMerchantWhereInput[] | ChongduMerchantWhereInput>;
  NOT?: Maybe<ChongduMerchantWhereInput[] | ChongduMerchantWhereInput>;
}

export type ChongduAccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduRoleUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduCommentCreateInput {
  id?: Maybe<Int>;
  anonymity?: Maybe<Int>;
  brower?: Maybe<Int>;
  commentType?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  isAdd?: Maybe<Int>;
  likedNum?: Maybe<Int>;
  productId?: Maybe<String>;
  replyNum?: Maybe<Int>;
  serviceId?: Maybe<String>;
  shareNum?: Maybe<Int>;
  starNum?: Maybe<Float>;
  userId?: Maybe<String>;
  video?: Maybe<String>;
  orderSn?: Maybe<String>;
}

export interface ChongduRoleUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
}

export type ChongduCommentReplyWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduRoleCreateInput {
  id?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduCommentReplyWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  commentId?: Maybe<Int>;
  commentId_not?: Maybe<Int>;
  commentId_in?: Maybe<Int[] | Int>;
  commentId_not_in?: Maybe<Int[] | Int>;
  commentId_lt?: Maybe<Int>;
  commentId_lte?: Maybe<Int>;
  commentId_gt?: Maybe<Int>;
  commentId_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  praiseCount_not?: Maybe<Int>;
  praiseCount_in?: Maybe<Int[] | Int>;
  praiseCount_not_in?: Maybe<Int[] | Int>;
  praiseCount_lt?: Maybe<Int>;
  praiseCount_lte?: Maybe<Int>;
  praiseCount_gt?: Maybe<Int>;
  praiseCount_gte?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  replyuserId_not?: Maybe<String>;
  replyuserId_in?: Maybe<String[] | String>;
  replyuserId_not_in?: Maybe<String[] | String>;
  replyuserId_lt?: Maybe<String>;
  replyuserId_lte?: Maybe<String>;
  replyuserId_gt?: Maybe<String>;
  replyuserId_gte?: Maybe<String>;
  replyuserId_contains?: Maybe<String>;
  replyuserId_not_contains?: Maybe<String>;
  replyuserId_starts_with?: Maybe<String>;
  replyuserId_not_starts_with?: Maybe<String>;
  replyuserId_ends_with?: Maybe<String>;
  replyuserId_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduCommentReplyWhereInput[] | ChongduCommentReplyWhereInput>;
  OR?: Maybe<ChongduCommentReplyWhereInput[] | ChongduCommentReplyWhereInput>;
  NOT?: Maybe<ChongduCommentReplyWhereInput[] | ChongduCommentReplyWhereInput>;
}

export type ChongduProductauthentLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldLikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduWorldLikeWhereInput>;
  AND?: Maybe<
    | ChongduWorldLikeSubscriptionWhereInput[]
    | ChongduWorldLikeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduWorldLikeSubscriptionWhereInput[]
    | ChongduWorldLikeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduWorldLikeSubscriptionWhereInput[]
    | ChongduWorldLikeSubscriptionWhereInput
  >;
}

export interface ChongduRepellentUpdateManyMutationInput {
  brandId?: Maybe<Int>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  indexNum?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  street?: Maybe<String>;
  time?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduWorldCommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduWorldCommentWhereInput>;
  AND?: Maybe<
    | ChongduWorldCommentSubscriptionWhereInput[]
    | ChongduWorldCommentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduWorldCommentSubscriptionWhereInput[]
    | ChongduWorldCommentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduWorldCommentSubscriptionWhereInput[]
    | ChongduWorldCommentSubscriptionWhereInput
  >;
}

export interface ChongduProductauthentLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  productauthentId?: Maybe<String>;
  productauthentId_not?: Maybe<String>;
  productauthentId_in?: Maybe<String[] | String>;
  productauthentId_not_in?: Maybe<String[] | String>;
  productauthentId_lt?: Maybe<String>;
  productauthentId_lte?: Maybe<String>;
  productauthentId_gt?: Maybe<String>;
  productauthentId_gte?: Maybe<String>;
  productauthentId_contains?: Maybe<String>;
  productauthentId_not_contains?: Maybe<String>;
  productauthentId_starts_with?: Maybe<String>;
  productauthentId_not_starts_with?: Maybe<String>;
  productauthentId_ends_with?: Maybe<String>;
  productauthentId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminWhereInput>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduProductauthentLogWhereInput[] | ChongduProductauthentLogWhereInput
  >;
  OR?: Maybe<
    ChongduProductauthentLogWhereInput[] | ChongduProductauthentLogWhereInput
  >;
  NOT?: Maybe<
    ChongduProductauthentLogWhereInput[] | ChongduProductauthentLogWhereInput
  >;
}

export interface ChongduWorldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduWorldWhereInput>;
  AND?: Maybe<
    ChongduWorldSubscriptionWhereInput[] | ChongduWorldSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduWorldSubscriptionWhereInput[] | ChongduWorldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduWorldSubscriptionWhereInput[] | ChongduWorldSubscriptionWhereInput
  >;
}

export interface ChongduRepellentUpdateInput {
  brandId?: Maybe<Int>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  indexNum?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  street?: Maybe<String>;
  time?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduViewcountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduViewcountWhereInput>;
  AND?: Maybe<
    | ChongduViewcountSubscriptionWhereInput[]
    | ChongduViewcountSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduViewcountSubscriptionWhereInput[]
    | ChongduViewcountSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduViewcountSubscriptionWhereInput[]
    | ChongduViewcountSubscriptionWhereInput
  >;
}

export interface ChongduRepellentCreateInput {
  id?: Maybe<Int>;
  brandId?: Maybe<Int>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  indexNum?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  street?: Maybe<String>;
  time?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduValidateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduValidateWhereInput>;
  AND?: Maybe<
    | ChongduValidateSubscriptionWhereInput[]
    | ChongduValidateSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduValidateSubscriptionWhereInput[]
    | ChongduValidateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduValidateSubscriptionWhereInput[]
    | ChongduValidateSubscriptionWhereInput
  >;
}

export interface ChongduRefreshUpdateManyMutationInput {
  businessId?: Maybe<Int>;
  ct?: Maybe<String>;
  petId?: Maybe<String>;
  productId?: Maybe<String>;
  refreshType?: Maybe<Int>;
  serviceId?: Maybe<Int>;
  type?: Maybe<Int>;
}

export type ChongduCompanyauthentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduRefreshUpdateInput {
  businessId?: Maybe<Int>;
  ct?: Maybe<String>;
  petId?: Maybe<String>;
  productId?: Maybe<String>;
  refreshType?: Maybe<Int>;
  serviceId?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduUserstatisticSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserstatisticWhereInput>;
  AND?: Maybe<
    | ChongduUserstatisticSubscriptionWhereInput[]
    | ChongduUserstatisticSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduUserstatisticSubscriptionWhereInput[]
    | ChongduUserstatisticSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduUserstatisticSubscriptionWhereInput[]
    | ChongduUserstatisticSubscriptionWhereInput
  >;
}

export type ChongduRecommendWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  balance?: Maybe<Float>;
  balance_not?: Maybe<Float>;
  balance_in?: Maybe<Float[] | Float>;
  balance_not_in?: Maybe<Float[] | Float>;
  balance_lt?: Maybe<Float>;
  balance_lte?: Maybe<Float>;
  balance_gt?: Maybe<Float>;
  balance_gte?: Maybe<Float>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  isaudit?: Maybe<Int>;
  isaudit_not?: Maybe<Int>;
  isaudit_in?: Maybe<Int[] | Int>;
  isaudit_not_in?: Maybe<Int[] | Int>;
  isaudit_lt?: Maybe<Int>;
  isaudit_lte?: Maybe<Int>;
  isaudit_gt?: Maybe<Int>;
  isaudit_gte?: Maybe<Int>;
  isauthent?: Maybe<Int>;
  isauthent_not?: Maybe<Int>;
  isauthent_in?: Maybe<Int[] | Int>;
  isauthent_not_in?: Maybe<Int[] | Int>;
  isauthent_lt?: Maybe<Int>;
  isauthent_lte?: Maybe<Int>;
  isauthent_gt?: Maybe<Int>;
  isauthent_gte?: Maybe<Int>;
  lastlogintime?: Maybe<String>;
  lastlogintime_not?: Maybe<String>;
  lastlogintime_in?: Maybe<String[] | String>;
  lastlogintime_not_in?: Maybe<String[] | String>;
  lastlogintime_lt?: Maybe<String>;
  lastlogintime_lte?: Maybe<String>;
  lastlogintime_gt?: Maybe<String>;
  lastlogintime_gte?: Maybe<String>;
  lastlogintime_contains?: Maybe<String>;
  lastlogintime_not_contains?: Maybe<String>;
  lastlogintime_starts_with?: Maybe<String>;
  lastlogintime_not_starts_with?: Maybe<String>;
  lastlogintime_ends_with?: Maybe<String>;
  lastlogintime_not_ends_with?: Maybe<String>;
  mail?: Maybe<String>;
  mail_not?: Maybe<String>;
  mail_in?: Maybe<String[] | String>;
  mail_not_in?: Maybe<String[] | String>;
  mail_lt?: Maybe<String>;
  mail_lte?: Maybe<String>;
  mail_gt?: Maybe<String>;
  mail_gte?: Maybe<String>;
  mail_contains?: Maybe<String>;
  mail_not_contains?: Maybe<String>;
  mail_starts_with?: Maybe<String>;
  mail_not_starts_with?: Maybe<String>;
  mail_ends_with?: Maybe<String>;
  mail_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  openidDy?: Maybe<String>;
  openidDy_not?: Maybe<String>;
  openidDy_in?: Maybe<String[] | String>;
  openidDy_not_in?: Maybe<String[] | String>;
  openidDy_lt?: Maybe<String>;
  openidDy_lte?: Maybe<String>;
  openidDy_gt?: Maybe<String>;
  openidDy_gte?: Maybe<String>;
  openidDy_contains?: Maybe<String>;
  openidDy_not_contains?: Maybe<String>;
  openidDy_starts_with?: Maybe<String>;
  openidDy_not_starts_with?: Maybe<String>;
  openidDy_ends_with?: Maybe<String>;
  openidDy_not_ends_with?: Maybe<String>;
  openidQq?: Maybe<String>;
  openidQq_not?: Maybe<String>;
  openidQq_in?: Maybe<String[] | String>;
  openidQq_not_in?: Maybe<String[] | String>;
  openidQq_lt?: Maybe<String>;
  openidQq_lte?: Maybe<String>;
  openidQq_gt?: Maybe<String>;
  openidQq_gte?: Maybe<String>;
  openidQq_contains?: Maybe<String>;
  openidQq_not_contains?: Maybe<String>;
  openidQq_starts_with?: Maybe<String>;
  openidQq_not_starts_with?: Maybe<String>;
  openidQq_ends_with?: Maybe<String>;
  openidQq_not_ends_with?: Maybe<String>;
  openidWx?: Maybe<String>;
  openidWx_not?: Maybe<String>;
  openidWx_in?: Maybe<String[] | String>;
  openidWx_not_in?: Maybe<String[] | String>;
  openidWx_lt?: Maybe<String>;
  openidWx_lte?: Maybe<String>;
  openidWx_gt?: Maybe<String>;
  openidWx_gte?: Maybe<String>;
  openidWx_contains?: Maybe<String>;
  openidWx_not_contains?: Maybe<String>;
  openidWx_starts_with?: Maybe<String>;
  openidWx_not_starts_with?: Maybe<String>;
  openidWx_ends_with?: Maybe<String>;
  openidWx_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  regeistType?: Maybe<Int>;
  regeistType_not?: Maybe<Int>;
  regeistType_in?: Maybe<Int[] | Int>;
  regeistType_not_in?: Maybe<Int[] | Int>;
  regeistType_lt?: Maybe<Int>;
  regeistType_lte?: Maybe<Int>;
  regeistType_gt?: Maybe<Int>;
  regeistType_gte?: Maybe<Int>;
  regtime?: Maybe<String>;
  regtime_not?: Maybe<String>;
  regtime_in?: Maybe<String[] | String>;
  regtime_not_in?: Maybe<String[] | String>;
  regtime_lt?: Maybe<String>;
  regtime_lte?: Maybe<String>;
  regtime_gt?: Maybe<String>;
  regtime_gte?: Maybe<String>;
  regtime_contains?: Maybe<String>;
  regtime_not_contains?: Maybe<String>;
  regtime_starts_with?: Maybe<String>;
  regtime_not_starts_with?: Maybe<String>;
  regtime_ends_with?: Maybe<String>;
  regtime_not_ends_with?: Maybe<String>;
  salt?: Maybe<String>;
  salt_not?: Maybe<String>;
  salt_in?: Maybe<String[] | String>;
  salt_not_in?: Maybe<String[] | String>;
  salt_lt?: Maybe<String>;
  salt_lte?: Maybe<String>;
  salt_gt?: Maybe<String>;
  salt_gte?: Maybe<String>;
  salt_contains?: Maybe<String>;
  salt_not_contains?: Maybe<String>;
  salt_starts_with?: Maybe<String>;
  salt_not_starts_with?: Maybe<String>;
  salt_ends_with?: Maybe<String>;
  salt_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  updateBy?: Maybe<String>;
  updateBy_not?: Maybe<String>;
  updateBy_in?: Maybe<String[] | String>;
  updateBy_not_in?: Maybe<String[] | String>;
  updateBy_lt?: Maybe<String>;
  updateBy_lte?: Maybe<String>;
  updateBy_gt?: Maybe<String>;
  updateBy_gte?: Maybe<String>;
  updateBy_contains?: Maybe<String>;
  updateBy_not_contains?: Maybe<String>;
  updateBy_starts_with?: Maybe<String>;
  updateBy_not_starts_with?: Maybe<String>;
  updateBy_ends_with?: Maybe<String>;
  updateBy_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  vip?: Maybe<Int>;
  vip_not?: Maybe<Int>;
  vip_in?: Maybe<Int[] | Int>;
  vip_not_in?: Maybe<Int[] | Int>;
  vip_lt?: Maybe<Int>;
  vip_lte?: Maybe<Int>;
  vip_gt?: Maybe<Int>;
  vip_gte?: Maybe<Int>;
  AND?: Maybe<ChongduUserWhereInput[] | ChongduUserWhereInput>;
  OR?: Maybe<ChongduUserWhereInput[] | ChongduUserWhereInput>;
  NOT?: Maybe<ChongduUserWhereInput[] | ChongduUserWhereInput>;
}

export interface ChongduRefreshCreateInput {
  id?: Maybe<Int>;
  businessId?: Maybe<Int>;
  ct?: Maybe<String>;
  petId?: Maybe<String>;
  productId?: Maybe<String>;
  refreshType?: Maybe<Int>;
  serviceId?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduUserdetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserdetailWhereInput>;
  AND?: Maybe<
    | ChongduUserdetailSubscriptionWhereInput[]
    | ChongduUserdetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduUserdetailSubscriptionWhereInput[]
    | ChongduUserdetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduUserdetailSubscriptionWhereInput[]
    | ChongduUserdetailSubscriptionWhereInput
  >;
}

export interface ChongduRecommendWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityCode_not?: Maybe<String>;
  cityCode_in?: Maybe<String[] | String>;
  cityCode_not_in?: Maybe<String[] | String>;
  cityCode_lt?: Maybe<String>;
  cityCode_lte?: Maybe<String>;
  cityCode_gt?: Maybe<String>;
  cityCode_gte?: Maybe<String>;
  cityCode_contains?: Maybe<String>;
  cityCode_not_contains?: Maybe<String>;
  cityCode_starts_with?: Maybe<String>;
  cityCode_not_starts_with?: Maybe<String>;
  cityCode_ends_with?: Maybe<String>;
  cityCode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<ChongduAdminWhereInput>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceId?: Maybe<String>;
  deviceId_not?: Maybe<String>;
  deviceId_in?: Maybe<String[] | String>;
  deviceId_not_in?: Maybe<String[] | String>;
  deviceId_lt?: Maybe<String>;
  deviceId_lte?: Maybe<String>;
  deviceId_gt?: Maybe<String>;
  deviceId_gte?: Maybe<String>;
  deviceId_contains?: Maybe<String>;
  deviceId_not_contains?: Maybe<String>;
  deviceId_starts_with?: Maybe<String>;
  deviceId_not_starts_with?: Maybe<String>;
  deviceId_ends_with?: Maybe<String>;
  deviceId_not_ends_with?: Maybe<String>;
  deviceName?: Maybe<String>;
  deviceName_not?: Maybe<String>;
  deviceName_in?: Maybe<String[] | String>;
  deviceName_not_in?: Maybe<String[] | String>;
  deviceName_lt?: Maybe<String>;
  deviceName_lte?: Maybe<String>;
  deviceName_gt?: Maybe<String>;
  deviceName_gte?: Maybe<String>;
  deviceName_contains?: Maybe<String>;
  deviceName_not_contains?: Maybe<String>;
  deviceName_starts_with?: Maybe<String>;
  deviceName_not_starts_with?: Maybe<String>;
  deviceName_ends_with?: Maybe<String>;
  deviceName_not_ends_with?: Maybe<String>;
  deviceType?: Maybe<Int>;
  deviceType_not?: Maybe<Int>;
  deviceType_in?: Maybe<Int[] | Int>;
  deviceType_not_in?: Maybe<Int[] | Int>;
  deviceType_lt?: Maybe<Int>;
  deviceType_lte?: Maybe<Int>;
  deviceType_gt?: Maybe<Int>;
  deviceType_gte?: Maybe<Int>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<ChongduAdminWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  relateId?: Maybe<String>;
  relateId_not?: Maybe<String>;
  relateId_in?: Maybe<String[] | String>;
  relateId_not_in?: Maybe<String[] | String>;
  relateId_lt?: Maybe<String>;
  relateId_lte?: Maybe<String>;
  relateId_gt?: Maybe<String>;
  relateId_gte?: Maybe<String>;
  relateId_contains?: Maybe<String>;
  relateId_not_contains?: Maybe<String>;
  relateId_starts_with?: Maybe<String>;
  relateId_not_starts_with?: Maybe<String>;
  relateId_ends_with?: Maybe<String>;
  relateId_not_ends_with?: Maybe<String>;
  relateType?: Maybe<Int>;
  relateType_not?: Maybe<Int>;
  relateType_in?: Maybe<Int[] | Int>;
  relateType_not_in?: Maybe<Int[] | Int>;
  relateType_lt?: Maybe<Int>;
  relateType_lte?: Maybe<Int>;
  relateType_gt?: Maybe<Int>;
  relateType_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<ChongduUserWhereInput>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduRecommendWhereInput[] | ChongduRecommendWhereInput>;
  OR?: Maybe<ChongduRecommendWhereInput[] | ChongduRecommendWhereInput>;
  NOT?: Maybe<ChongduRecommendWhereInput[] | ChongduRecommendWhereInput>;
}

export interface ChongduUserauthentLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserauthentLogWhereInput>;
  AND?: Maybe<
    | ChongduUserauthentLogSubscriptionWhereInput[]
    | ChongduUserauthentLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduUserauthentLogSubscriptionWhereInput[]
    | ChongduUserauthentLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduUserauthentLogSubscriptionWhereInput[]
    | ChongduUserauthentLogSubscriptionWhereInput
  >;
}

export interface ChongduRecommendUpdateManyMutationInput {
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  deviceId?: Maybe<String>;
  deviceName?: Maybe<String>;
  deviceType?: Maybe<Int>;
  endTime?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  sort?: Maybe<Int>;
  startTime?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userName?: Maybe<String>;
}

export interface ChongduUserauthentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserauthentWhereInput>;
  AND?: Maybe<
    | ChongduUserauthentSubscriptionWhereInput[]
    | ChongduUserauthentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduUserauthentSubscriptionWhereInput[]
    | ChongduUserauthentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduUserauthentSubscriptionWhereInput[]
    | ChongduUserauthentSubscriptionWhereInput
  >;
}

export interface ChongduRecommendUpdateInput {
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<ChongduAdminUpdateOneInput>;
  d?: Maybe<Int>;
  deviceId?: Maybe<String>;
  deviceName?: Maybe<String>;
  deviceType?: Maybe<Int>;
  endTime?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<ChongduAdminUpdateOneInput>;
  name?: Maybe<String>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  sort?: Maybe<Int>;
  startTime?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
  userName?: Maybe<String>;
}

export interface ChongduUserFavouriteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserFavouriteWhereInput>;
  AND?: Maybe<
    | ChongduUserFavouriteSubscriptionWhereInput[]
    | ChongduUserFavouriteSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduUserFavouriteSubscriptionWhereInput[]
    | ChongduUserFavouriteSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduUserFavouriteSubscriptionWhereInput[]
    | ChongduUserFavouriteSubscriptionWhereInput
  >;
}

export interface ChongduRecommendCreateInput {
  id?: Maybe<Int>;
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<ChongduAdminCreateOneInput>;
  d?: Maybe<Int>;
  deviceId?: Maybe<String>;
  deviceName?: Maybe<String>;
  deviceType?: Maybe<Int>;
  endTime?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<ChongduAdminCreateOneInput>;
  name?: Maybe<String>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  sort?: Maybe<Int>;
  startTime?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<ChongduUserCreateOneInput>;
  userName?: Maybe<String>;
}

export interface ChongduTradingAreaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduTradingAreaWhereInput>;
  AND?: Maybe<
    | ChongduTradingAreaSubscriptionWhereInput[]
    | ChongduTradingAreaSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduTradingAreaSubscriptionWhereInput[]
    | ChongduTradingAreaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduTradingAreaSubscriptionWhereInput[]
    | ChongduTradingAreaSubscriptionWhereInput
  >;
}

export interface ChongduProductauthentLogUpdateManyMutationInput {
  productauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export type ChongduCompanyrecommendWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduRefreshWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduStatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduStatWhereInput>;
  AND?: Maybe<
    ChongduStatSubscriptionWhereInput[] | ChongduStatSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduStatSubscriptionWhereInput[] | ChongduStatSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduStatSubscriptionWhereInput[] | ChongduStatSubscriptionWhereInput
  >;
}

export interface ChongduProductauthentLogUpdateInput {
  productauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminUpdateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduServiceauthentLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServiceauthentLogWhereInput>;
  AND?: Maybe<
    | ChongduServiceauthentLogSubscriptionWhereInput[]
    | ChongduServiceauthentLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceauthentLogSubscriptionWhereInput[]
    | ChongduServiceauthentLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceauthentLogSubscriptionWhereInput[]
    | ChongduServiceauthentLogSubscriptionWhereInput
  >;
}

export interface ChongduRefreshWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  businessId?: Maybe<Int>;
  businessId_not?: Maybe<Int>;
  businessId_in?: Maybe<Int[] | Int>;
  businessId_not_in?: Maybe<Int[] | Int>;
  businessId_lt?: Maybe<Int>;
  businessId_lte?: Maybe<Int>;
  businessId_gt?: Maybe<Int>;
  businessId_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  petId?: Maybe<String>;
  petId_not?: Maybe<String>;
  petId_in?: Maybe<String[] | String>;
  petId_not_in?: Maybe<String[] | String>;
  petId_lt?: Maybe<String>;
  petId_lte?: Maybe<String>;
  petId_gt?: Maybe<String>;
  petId_gte?: Maybe<String>;
  petId_contains?: Maybe<String>;
  petId_not_contains?: Maybe<String>;
  petId_starts_with?: Maybe<String>;
  petId_not_starts_with?: Maybe<String>;
  petId_ends_with?: Maybe<String>;
  petId_not_ends_with?: Maybe<String>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  refreshType?: Maybe<Int>;
  refreshType_not?: Maybe<Int>;
  refreshType_in?: Maybe<Int[] | Int>;
  refreshType_not_in?: Maybe<Int[] | Int>;
  refreshType_lt?: Maybe<Int>;
  refreshType_lte?: Maybe<Int>;
  refreshType_gt?: Maybe<Int>;
  refreshType_gte?: Maybe<Int>;
  serviceId?: Maybe<Int>;
  serviceId_not?: Maybe<Int>;
  serviceId_in?: Maybe<Int[] | Int>;
  serviceId_not_in?: Maybe<Int[] | Int>;
  serviceId_lt?: Maybe<Int>;
  serviceId_lte?: Maybe<Int>;
  serviceId_gt?: Maybe<Int>;
  serviceId_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduRefreshWhereInput[] | ChongduRefreshWhereInput>;
  OR?: Maybe<ChongduRefreshWhereInput[] | ChongduRefreshWhereInput>;
  NOT?: Maybe<ChongduRefreshWhereInput[] | ChongduRefreshWhereInput>;
}

export interface ChongduServiceRecommendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServiceRecommendWhereInput>;
  AND?: Maybe<
    | ChongduServiceRecommendSubscriptionWhereInput[]
    | ChongduServiceRecommendSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceRecommendSubscriptionWhereInput[]
    | ChongduServiceRecommendSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceRecommendSubscriptionWhereInput[]
    | ChongduServiceRecommendSubscriptionWhereInput
  >;
}

export interface ChongduAdvertisementWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  adminId?: Maybe<String>;
  adminId_not?: Maybe<String>;
  adminId_in?: Maybe<String[] | String>;
  adminId_not_in?: Maybe<String[] | String>;
  adminId_lt?: Maybe<String>;
  adminId_lte?: Maybe<String>;
  adminId_gt?: Maybe<String>;
  adminId_gte?: Maybe<String>;
  adminId_contains?: Maybe<String>;
  adminId_not_contains?: Maybe<String>;
  adminId_starts_with?: Maybe<String>;
  adminId_not_starts_with?: Maybe<String>;
  adminId_ends_with?: Maybe<String>;
  adminId_not_ends_with?: Maybe<String>;
  agentId?: Maybe<String>;
  agentId_not?: Maybe<String>;
  agentId_in?: Maybe<String[] | String>;
  agentId_not_in?: Maybe<String[] | String>;
  agentId_lt?: Maybe<String>;
  agentId_lte?: Maybe<String>;
  agentId_gt?: Maybe<String>;
  agentId_gte?: Maybe<String>;
  agentId_contains?: Maybe<String>;
  agentId_not_contains?: Maybe<String>;
  agentId_starts_with?: Maybe<String>;
  agentId_not_starts_with?: Maybe<String>;
  agentId_ends_with?: Maybe<String>;
  agentId_not_ends_with?: Maybe<String>;
  cityCode?: Maybe<String>;
  cityCode_not?: Maybe<String>;
  cityCode_in?: Maybe<String[] | String>;
  cityCode_not_in?: Maybe<String[] | String>;
  cityCode_lt?: Maybe<String>;
  cityCode_lte?: Maybe<String>;
  cityCode_gt?: Maybe<String>;
  cityCode_gte?: Maybe<String>;
  cityCode_contains?: Maybe<String>;
  cityCode_not_contains?: Maybe<String>;
  cityCode_starts_with?: Maybe<String>;
  cityCode_not_starts_with?: Maybe<String>;
  cityCode_ends_with?: Maybe<String>;
  cityCode_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  relateId?: Maybe<String>;
  relateId_not?: Maybe<String>;
  relateId_in?: Maybe<String[] | String>;
  relateId_not_in?: Maybe<String[] | String>;
  relateId_lt?: Maybe<String>;
  relateId_lte?: Maybe<String>;
  relateId_gt?: Maybe<String>;
  relateId_gte?: Maybe<String>;
  relateId_contains?: Maybe<String>;
  relateId_not_contains?: Maybe<String>;
  relateId_starts_with?: Maybe<String>;
  relateId_not_starts_with?: Maybe<String>;
  relateId_ends_with?: Maybe<String>;
  relateId_not_ends_with?: Maybe<String>;
  relateType?: Maybe<Int>;
  relateType_not?: Maybe<Int>;
  relateType_in?: Maybe<Int[] | Int>;
  relateType_not_in?: Maybe<Int[] | Int>;
  relateType_lt?: Maybe<Int>;
  relateType_lte?: Maybe<Int>;
  relateType_gt?: Maybe<Int>;
  relateType_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduAdvertisementWhereInput[] | ChongduAdvertisementWhereInput
  >;
  OR?: Maybe<ChongduAdvertisementWhereInput[] | ChongduAdvertisementWhereInput>;
  NOT?: Maybe<
    ChongduAdvertisementWhereInput[] | ChongduAdvertisementWhereInput
  >;
}

export type ChongduCorrelationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduProductauthentLogCreateInput {
  id?: Maybe<Int>;
  productauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminCreateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduCorrelationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  petLevelId?: Maybe<Int>;
  petLevelId_not?: Maybe<Int>;
  petLevelId_in?: Maybe<Int[] | Int>;
  petLevelId_not_in?: Maybe<Int[] | Int>;
  petLevelId_lt?: Maybe<Int>;
  petLevelId_lte?: Maybe<Int>;
  petLevelId_gt?: Maybe<Int>;
  petLevelId_gte?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeId_not?: Maybe<Int>;
  petTypeId_in?: Maybe<Int[] | Int>;
  petTypeId_not_in?: Maybe<Int[] | Int>;
  petTypeId_lt?: Maybe<Int>;
  petTypeId_lte?: Maybe<Int>;
  petTypeId_gt?: Maybe<Int>;
  petTypeId_gte?: Maybe<Int>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduCorrelationWhereInput[] | ChongduCorrelationWhereInput>;
  OR?: Maybe<ChongduCorrelationWhereInput[] | ChongduCorrelationWhereInput>;
  NOT?: Maybe<ChongduCorrelationWhereInput[] | ChongduCorrelationWhereInput>;
}

export interface ChongduProductTypeUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pettypeId?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduServiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServiceWhereInput>;
  AND?: Maybe<
    | ChongduServiceSubscriptionWhereInput[]
    | ChongduServiceSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceSubscriptionWhereInput[]
    | ChongduServiceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceSubscriptionWhereInput[]
    | ChongduServiceSubscriptionWhereInput
  >;
}

export interface ChongduProductTypeUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pettypeId?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduRoleMenuChildrenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRoleMenuChildrenWhereInput>;
  AND?: Maybe<
    | ChongduRoleMenuChildrenSubscriptionWhereInput[]
    | ChongduRoleMenuChildrenSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRoleMenuChildrenSubscriptionWhereInput[]
    | ChongduRoleMenuChildrenSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRoleMenuChildrenSubscriptionWhereInput[]
    | ChongduRoleMenuChildrenSubscriptionWhereInput
  >;
}

export type ChongduRepellentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduRoleMenuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRoleMenuWhereInput>;
  AND?: Maybe<
    | ChongduRoleMenuSubscriptionWhereInput[]
    | ChongduRoleMenuSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRoleMenuSubscriptionWhereInput[]
    | ChongduRoleMenuSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRoleMenuSubscriptionWhereInput[]
    | ChongduRoleMenuSubscriptionWhereInput
  >;
}

export interface ChongduProductSkuUpdateManyMutationInput {
  attribute?: Maybe<String>;
  d?: Maybe<Int>;
  lockStock?: Maybe<Int>;
  lowStock?: Maybe<Int>;
  num?: Maybe<Int>;
  price?: Maybe<Float>;
  productId?: Maybe<String>;
  salesVolume?: Maybe<Int>;
  skuCode?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduCommentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  anonymity?: Maybe<Int>;
  anonymity_not?: Maybe<Int>;
  anonymity_in?: Maybe<Int[] | Int>;
  anonymity_not_in?: Maybe<Int[] | Int>;
  anonymity_lt?: Maybe<Int>;
  anonymity_lte?: Maybe<Int>;
  anonymity_gt?: Maybe<Int>;
  anonymity_gte?: Maybe<Int>;
  brower?: Maybe<Int>;
  brower_not?: Maybe<Int>;
  brower_in?: Maybe<Int[] | Int>;
  brower_not_in?: Maybe<Int[] | Int>;
  brower_lt?: Maybe<Int>;
  brower_lte?: Maybe<Int>;
  brower_gt?: Maybe<Int>;
  brower_gte?: Maybe<Int>;
  commentType?: Maybe<Int>;
  commentType_not?: Maybe<Int>;
  commentType_in?: Maybe<Int[] | Int>;
  commentType_not_in?: Maybe<Int[] | Int>;
  commentType_lt?: Maybe<Int>;
  commentType_lte?: Maybe<Int>;
  commentType_gt?: Maybe<Int>;
  commentType_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  isAdd?: Maybe<Int>;
  isAdd_not?: Maybe<Int>;
  isAdd_in?: Maybe<Int[] | Int>;
  isAdd_not_in?: Maybe<Int[] | Int>;
  isAdd_lt?: Maybe<Int>;
  isAdd_lte?: Maybe<Int>;
  isAdd_gt?: Maybe<Int>;
  isAdd_gte?: Maybe<Int>;
  likedNum?: Maybe<Int>;
  likedNum_not?: Maybe<Int>;
  likedNum_in?: Maybe<Int[] | Int>;
  likedNum_not_in?: Maybe<Int[] | Int>;
  likedNum_lt?: Maybe<Int>;
  likedNum_lte?: Maybe<Int>;
  likedNum_gt?: Maybe<Int>;
  likedNum_gte?: Maybe<Int>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  replyNum?: Maybe<Int>;
  replyNum_not?: Maybe<Int>;
  replyNum_in?: Maybe<Int[] | Int>;
  replyNum_not_in?: Maybe<Int[] | Int>;
  replyNum_lt?: Maybe<Int>;
  replyNum_lte?: Maybe<Int>;
  replyNum_gt?: Maybe<Int>;
  replyNum_gte?: Maybe<Int>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  shareNum?: Maybe<Int>;
  shareNum_not?: Maybe<Int>;
  shareNum_in?: Maybe<Int[] | Int>;
  shareNum_not_in?: Maybe<Int[] | Int>;
  shareNum_lt?: Maybe<Int>;
  shareNum_lte?: Maybe<Int>;
  shareNum_gt?: Maybe<Int>;
  shareNum_gte?: Maybe<Int>;
  starNum?: Maybe<Float>;
  starNum_not?: Maybe<Float>;
  starNum_in?: Maybe<Float[] | Float>;
  starNum_not_in?: Maybe<Float[] | Float>;
  starNum_lt?: Maybe<Float>;
  starNum_lte?: Maybe<Float>;
  starNum_gt?: Maybe<Float>;
  starNum_gte?: Maybe<Float>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  video?: Maybe<String>;
  video_not?: Maybe<String>;
  video_in?: Maybe<String[] | String>;
  video_not_in?: Maybe<String[] | String>;
  video_lt?: Maybe<String>;
  video_lte?: Maybe<String>;
  video_gt?: Maybe<String>;
  video_gte?: Maybe<String>;
  video_contains?: Maybe<String>;
  video_not_contains?: Maybe<String>;
  video_starts_with?: Maybe<String>;
  video_not_starts_with?: Maybe<String>;
  video_ends_with?: Maybe<String>;
  video_not_ends_with?: Maybe<String>;
  orderSn?: Maybe<String>;
  orderSn_not?: Maybe<String>;
  orderSn_in?: Maybe<String[] | String>;
  orderSn_not_in?: Maybe<String[] | String>;
  orderSn_lt?: Maybe<String>;
  orderSn_lte?: Maybe<String>;
  orderSn_gt?: Maybe<String>;
  orderSn_gte?: Maybe<String>;
  orderSn_contains?: Maybe<String>;
  orderSn_not_contains?: Maybe<String>;
  orderSn_starts_with?: Maybe<String>;
  orderSn_not_starts_with?: Maybe<String>;
  orderSn_ends_with?: Maybe<String>;
  orderSn_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduCommentWhereInput[] | ChongduCommentWhereInput>;
  OR?: Maybe<ChongduCommentWhereInput[] | ChongduCommentWhereInput>;
  NOT?: Maybe<ChongduCommentWhereInput[] | ChongduCommentWhereInput>;
}

export interface ChongduRepellentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  brandId?: Maybe<Int>;
  brandId_not?: Maybe<Int>;
  brandId_in?: Maybe<Int[] | Int>;
  brandId_not_in?: Maybe<Int[] | Int>;
  brandId_lt?: Maybe<Int>;
  brandId_lte?: Maybe<Int>;
  brandId_gt?: Maybe<Int>;
  brandId_gte?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityCode_not?: Maybe<String>;
  cityCode_in?: Maybe<String[] | String>;
  cityCode_not_in?: Maybe<String[] | String>;
  cityCode_lt?: Maybe<String>;
  cityCode_lte?: Maybe<String>;
  cityCode_gt?: Maybe<String>;
  cityCode_gte?: Maybe<String>;
  cityCode_contains?: Maybe<String>;
  cityCode_not_contains?: Maybe<String>;
  cityCode_starts_with?: Maybe<String>;
  cityCode_not_starts_with?: Maybe<String>;
  cityCode_ends_with?: Maybe<String>;
  cityCode_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexNum?: Maybe<Int>;
  indexNum_not?: Maybe<Int>;
  indexNum_in?: Maybe<Int[] | Int>;
  indexNum_not_in?: Maybe<Int[] | Int>;
  indexNum_lt?: Maybe<Int>;
  indexNum_lte?: Maybe<Int>;
  indexNum_gt?: Maybe<Int>;
  indexNum_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  petId?: Maybe<String>;
  petId_not?: Maybe<String>;
  petId_in?: Maybe<String[] | String>;
  petId_not_in?: Maybe<String[] | String>;
  petId_lt?: Maybe<String>;
  petId_lte?: Maybe<String>;
  petId_gt?: Maybe<String>;
  petId_gte?: Maybe<String>;
  petId_contains?: Maybe<String>;
  petId_not_contains?: Maybe<String>;
  petId_starts_with?: Maybe<String>;
  petId_not_starts_with?: Maybe<String>;
  petId_ends_with?: Maybe<String>;
  petId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduRepellentWhereInput[] | ChongduRepellentWhereInput>;
  OR?: Maybe<ChongduRepellentWhereInput[] | ChongduRepellentWhereInput>;
  NOT?: Maybe<ChongduRepellentWhereInput[] | ChongduRepellentWhereInput>;
}

export interface ChongduRoleDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRoleDetailWhereInput>;
  AND?: Maybe<
    | ChongduRoleDetailSubscriptionWhereInput[]
    | ChongduRoleDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRoleDetailSubscriptionWhereInput[]
    | ChongduRoleDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRoleDetailSubscriptionWhereInput[]
    | ChongduRoleDetailSubscriptionWhereInput
  >;
}

export interface ChongduProductSkuUpdateInput {
  attribute?: Maybe<String>;
  d?: Maybe<Int>;
  lockStock?: Maybe<Int>;
  lowStock?: Maybe<Int>;
  num?: Maybe<Int>;
  price?: Maybe<Float>;
  productId?: Maybe<String>;
  salesVolume?: Maybe<Int>;
  skuCode?: Maybe<String>;
  status?: Maybe<Int>;
}

export type ChongduDiscussWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductSkuCreateInput {
  id?: Maybe<Int>;
  attribute?: Maybe<String>;
  d?: Maybe<Int>;
  lockStock?: Maybe<Int>;
  lowStock?: Maybe<Int>;
  num?: Maybe<Int>;
  price?: Maybe<Float>;
  productId?: Maybe<String>;
  salesVolume?: Maybe<Int>;
  skuCode?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduDiscussWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  pSComId?: Maybe<Int>;
  pSComId_not?: Maybe<Int>;
  pSComId_in?: Maybe<Int[] | Int>;
  pSComId_not_in?: Maybe<Int[] | Int>;
  pSComId_lt?: Maybe<Int>;
  pSComId_lte?: Maybe<Int>;
  pSComId_gt?: Maybe<Int>;
  pSComId_gte?: Maybe<Int>;
  replyType?: Maybe<Int>;
  replyType_not?: Maybe<Int>;
  replyType_in?: Maybe<Int[] | Int>;
  replyType_not_in?: Maybe<Int[] | Int>;
  replyType_lt?: Maybe<Int>;
  replyType_lte?: Maybe<Int>;
  replyType_gt?: Maybe<Int>;
  replyType_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduDiscussWhereInput[] | ChongduDiscussWhereInput>;
  OR?: Maybe<ChongduDiscussWhereInput[] | ChongduDiscussWhereInput>;
  NOT?: Maybe<ChongduDiscussWhereInput[] | ChongduDiscussWhereInput>;
}

export interface ChongduProductRecommendUpdateManyMutationInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  productId?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduRefreshSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRefreshWhereInput>;
  AND?: Maybe<
    | ChongduRefreshSubscriptionWhereInput[]
    | ChongduRefreshSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRefreshSubscriptionWhereInput[]
    | ChongduRefreshSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRefreshSubscriptionWhereInput[]
    | ChongduRefreshSubscriptionWhereInput
  >;
}

export interface ChongduProductRecommendUpdateInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  productId?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduProductauthentLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductauthentLogWhereInput>;
  AND?: Maybe<
    | ChongduProductauthentLogSubscriptionWhereInput[]
    | ChongduProductauthentLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductauthentLogSubscriptionWhereInput[]
    | ChongduProductauthentLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductauthentLogSubscriptionWhereInput[]
    | ChongduProductauthentLogSubscriptionWhereInput
  >;
}

export type ChongduRoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduProductTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductTypeWhereInput>;
  AND?: Maybe<
    | ChongduProductTypeSubscriptionWhereInput[]
    | ChongduProductTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductTypeSubscriptionWhereInput[]
    | ChongduProductTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductTypeSubscriptionWhereInput[]
    | ChongduProductTypeSubscriptionWhereInput
  >;
}

export interface ChongduProductRecommendCreateInput {
  id?: Maybe<Int>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  productId?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export type ChongduCommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduRoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduRoleWhereInput[] | ChongduRoleWhereInput>;
  OR?: Maybe<ChongduRoleWhereInput[] | ChongduRoleWhereInput>;
  NOT?: Maybe<ChongduRoleWhereInput[] | ChongduRoleWhereInput>;
}

export interface ChongduProductRecommendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductRecommendWhereInput>;
  AND?: Maybe<
    | ChongduProductRecommendSubscriptionWhereInput[]
    | ChongduProductRecommendSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductRecommendSubscriptionWhereInput[]
    | ChongduProductRecommendSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductRecommendSubscriptionWhereInput[]
    | ChongduProductRecommendSubscriptionWhereInput
  >;
}

export type ChongduAdvertisementWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduFocusingWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductPettypeUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  level?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  productId?: Maybe<String>;
}

export interface ChongduFocusingWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  fUserId?: Maybe<String>;
  fUserId_not?: Maybe<String>;
  fUserId_in?: Maybe<String[] | String>;
  fUserId_not_in?: Maybe<String[] | String>;
  fUserId_lt?: Maybe<String>;
  fUserId_lte?: Maybe<String>;
  fUserId_gt?: Maybe<String>;
  fUserId_gte?: Maybe<String>;
  fUserId_contains?: Maybe<String>;
  fUserId_not_contains?: Maybe<String>;
  fUserId_starts_with?: Maybe<String>;
  fUserId_not_starts_with?: Maybe<String>;
  fUserId_ends_with?: Maybe<String>;
  fUserId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduFocusingWhereInput[] | ChongduFocusingWhereInput>;
  OR?: Maybe<ChongduFocusingWhereInput[] | ChongduFocusingWhereInput>;
  NOT?: Maybe<ChongduFocusingWhereInput[] | ChongduFocusingWhereInput>;
}

export interface ChongduProductPettypeUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  level?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  productId?: Maybe<String>;
}

export interface ChongduProductAuthentdetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductAuthentdetailWhereInput>;
  AND?: Maybe<
    | ChongduProductAuthentdetailSubscriptionWhereInput[]
    | ChongduProductAuthentdetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductAuthentdetailSubscriptionWhereInput[]
    | ChongduProductAuthentdetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductAuthentdetailSubscriptionWhereInput[]
    | ChongduProductAuthentdetailSubscriptionWhereInput
  >;
}

export interface ChongduProductPettypeCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  level?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  productId?: Maybe<String>;
}

export interface ChongduPlatformExecuteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPlatformExecuteWhereInput>;
  AND?: Maybe<
    | ChongduPlatformExecuteSubscriptionWhereInput[]
    | ChongduPlatformExecuteSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPlatformExecuteSubscriptionWhereInput[]
    | ChongduPlatformExecuteSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPlatformExecuteSubscriptionWhereInput[]
    | ChongduPlatformExecuteSubscriptionWhereInput
  >;
}

export type ChongduRoleAuthWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPlatformBusinessSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPlatformBusinessWhereInput>;
  AND?: Maybe<
    | ChongduPlatformBusinessSubscriptionWhereInput[]
    | ChongduPlatformBusinessSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPlatformBusinessSubscriptionWhereInput[]
    | ChongduPlatformBusinessSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPlatformBusinessSubscriptionWhereInput[]
    | ChongduPlatformBusinessSubscriptionWhereInput
  >;
}

export interface ChongduProductImgUpdateManyMutationInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  productId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetauthentdetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetauthentdetailWhereInput>;
  AND?: Maybe<
    | ChongduPetauthentdetailSubscriptionWhereInput[]
    | ChongduPetauthentdetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPetauthentdetailSubscriptionWhereInput[]
    | ChongduPetauthentdetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPetauthentdetailSubscriptionWhereInput[]
    | ChongduPetauthentdetailSubscriptionWhereInput
  >;
}

export interface ChongduRoleAuthWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  action?: Maybe<String>;
  action_not?: Maybe<String>;
  action_in?: Maybe<String[] | String>;
  action_not_in?: Maybe<String[] | String>;
  action_lt?: Maybe<String>;
  action_lte?: Maybe<String>;
  action_gt?: Maybe<String>;
  action_gte?: Maybe<String>;
  action_contains?: Maybe<String>;
  action_not_contains?: Maybe<String>;
  action_starts_with?: Maybe<String>;
  action_not_starts_with?: Maybe<String>;
  action_ends_with?: Maybe<String>;
  action_not_ends_with?: Maybe<String>;
  method?: Maybe<String>;
  method_not?: Maybe<String>;
  method_in?: Maybe<String[] | String>;
  method_not_in?: Maybe<String[] | String>;
  method_lt?: Maybe<String>;
  method_lte?: Maybe<String>;
  method_gt?: Maybe<String>;
  method_gte?: Maybe<String>;
  method_contains?: Maybe<String>;
  method_not_contains?: Maybe<String>;
  method_starts_with?: Maybe<String>;
  method_not_starts_with?: Maybe<String>;
  method_ends_with?: Maybe<String>;
  method_not_ends_with?: Maybe<String>;
  operationName?: Maybe<String>;
  operationName_not?: Maybe<String>;
  operationName_in?: Maybe<String[] | String>;
  operationName_not_in?: Maybe<String[] | String>;
  operationName_lt?: Maybe<String>;
  operationName_lte?: Maybe<String>;
  operationName_gt?: Maybe<String>;
  operationName_gte?: Maybe<String>;
  operationName_contains?: Maybe<String>;
  operationName_not_contains?: Maybe<String>;
  operationName_starts_with?: Maybe<String>;
  operationName_not_starts_with?: Maybe<String>;
  operationName_ends_with?: Maybe<String>;
  operationName_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduRoleAuthWhereInput[] | ChongduRoleAuthWhereInput>;
  OR?: Maybe<ChongduRoleAuthWhereInput[] | ChongduRoleAuthWhereInput>;
  NOT?: Maybe<ChongduRoleAuthWhereInput[] | ChongduRoleAuthWhereInput>;
}

export interface ChongduPetTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetTypeWhereInput>;
  AND?: Maybe<
    | ChongduPetTypeSubscriptionWhereInput[]
    | ChongduPetTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPetTypeSubscriptionWhereInput[]
    | ChongduPetTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPetTypeSubscriptionWhereInput[]
    | ChongduPetTypeSubscriptionWhereInput
  >;
}

export interface ChongduProductImgUpdateInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  productId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduLockWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductImgCreateInput {
  id?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  productId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduLockWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  thread?: Maybe<String>;
  thread_not?: Maybe<String>;
  thread_in?: Maybe<String[] | String>;
  thread_not_in?: Maybe<String[] | String>;
  thread_lt?: Maybe<String>;
  thread_lte?: Maybe<String>;
  thread_gt?: Maybe<String>;
  thread_gte?: Maybe<String>;
  thread_contains?: Maybe<String>;
  thread_not_contains?: Maybe<String>;
  thread_starts_with?: Maybe<String>;
  thread_not_starts_with?: Maybe<String>;
  thread_ends_with?: Maybe<String>;
  thread_not_ends_with?: Maybe<String>;
  tName?: Maybe<String>;
  tName_not?: Maybe<String>;
  tName_in?: Maybe<String[] | String>;
  tName_not_in?: Maybe<String[] | String>;
  tName_lt?: Maybe<String>;
  tName_lte?: Maybe<String>;
  tName_gt?: Maybe<String>;
  tName_gte?: Maybe<String>;
  tName_contains?: Maybe<String>;
  tName_not_contains?: Maybe<String>;
  tName_starts_with?: Maybe<String>;
  tName_not_starts_with?: Maybe<String>;
  tName_ends_with?: Maybe<String>;
  tName_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduLockWhereInput[] | ChongduLockWhereInput>;
  OR?: Maybe<ChongduLockWhereInput[] | ChongduLockWhereInput>;
  NOT?: Maybe<ChongduLockWhereInput[] | ChongduLockWhereInput>;
}

export interface ChongduProductBrandUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  firstLetter?: Maybe<String>;
  logoImg?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduPetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetWhereInput>;
  AND?: Maybe<
    ChongduPetSubscriptionWhereInput[] | ChongduPetSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduPetSubscriptionWhereInput[] | ChongduPetSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduPetSubscriptionWhereInput[] | ChongduPetSubscriptionWhereInput
  >;
}

export interface ChongduProductBrandUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  firstLetter?: Maybe<String>;
  logoImg?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduPayInfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPayInfoWhereInput>;
  AND?: Maybe<
    | ChongduPayInfoSubscriptionWhereInput[]
    | ChongduPayInfoSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPayInfoSubscriptionWhereInput[]
    | ChongduPayInfoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPayInfoSubscriptionWhereInput[]
    | ChongduPayInfoSubscriptionWhereInput
  >;
}

export type ChongduRoleDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduOrderstatisticSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduOrderstatisticWhereInput>;
  AND?: Maybe<
    | ChongduOrderstatisticSubscriptionWhereInput[]
    | ChongduOrderstatisticSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduOrderstatisticSubscriptionWhereInput[]
    | ChongduOrderstatisticSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduOrderstatisticSubscriptionWhereInput[]
    | ChongduOrderstatisticSubscriptionWhereInput
  >;
}

export interface ChongduProductAuthentdetailUpdateManyMutationInput {
  audit?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
}

export interface ChongduCityWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduCityWhereInput[] | ChongduCityWhereInput>;
  OR?: Maybe<ChongduCityWhereInput[] | ChongduCityWhereInput>;
  NOT?: Maybe<ChongduCityWhereInput[] | ChongduCityWhereInput>;
}

export interface ChongduRoleDetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  modeldetailId?: Maybe<String>;
  modeldetailId_not?: Maybe<String>;
  modeldetailId_in?: Maybe<String[] | String>;
  modeldetailId_not_in?: Maybe<String[] | String>;
  modeldetailId_lt?: Maybe<String>;
  modeldetailId_lte?: Maybe<String>;
  modeldetailId_gt?: Maybe<String>;
  modeldetailId_gte?: Maybe<String>;
  modeldetailId_contains?: Maybe<String>;
  modeldetailId_not_contains?: Maybe<String>;
  modeldetailId_starts_with?: Maybe<String>;
  modeldetailId_not_starts_with?: Maybe<String>;
  modeldetailId_ends_with?: Maybe<String>;
  modeldetailId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  roleId?: Maybe<String>;
  roleId_not?: Maybe<String>;
  roleId_in?: Maybe<String[] | String>;
  roleId_not_in?: Maybe<String[] | String>;
  roleId_lt?: Maybe<String>;
  roleId_lte?: Maybe<String>;
  roleId_gt?: Maybe<String>;
  roleId_gte?: Maybe<String>;
  roleId_contains?: Maybe<String>;
  roleId_not_contains?: Maybe<String>;
  roleId_starts_with?: Maybe<String>;
  roleId_not_starts_with?: Maybe<String>;
  roleId_ends_with?: Maybe<String>;
  roleId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduRoleDetailWhereInput[] | ChongduRoleDetailWhereInput>;
  OR?: Maybe<ChongduRoleDetailWhereInput[] | ChongduRoleDetailWhereInput>;
  NOT?: Maybe<ChongduRoleDetailWhereInput[] | ChongduRoleDetailWhereInput>;
}

export interface ChongduOrderinvoicedetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduOrderinvoicedetailWhereInput>;
  AND?: Maybe<
    | ChongduOrderinvoicedetailSubscriptionWhereInput[]
    | ChongduOrderinvoicedetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduOrderinvoicedetailSubscriptionWhereInput[]
    | ChongduOrderinvoicedetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduOrderinvoicedetailSubscriptionWhereInput[]
    | ChongduOrderinvoicedetailSubscriptionWhereInput
  >;
}

export interface ChongduProductUpsertNestedInput {
  update: ChongduProductUpdateDataInput;
  create: ChongduProductCreateInput;
}

export type ChongduLoginLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductUpdateDataInput {
  brandId?: Maybe<ChongduProductBrandUpdateOneInput>;
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantUpdateOneInput>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  promotionPrice?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  stock?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduProductTypeUpdateOneInput>;
  userId?: Maybe<String>;
}

export interface ChongduLoginLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  adminId?: Maybe<String>;
  adminId_not?: Maybe<String>;
  adminId_in?: Maybe<String[] | String>;
  adminId_not_in?: Maybe<String[] | String>;
  adminId_lt?: Maybe<String>;
  adminId_lte?: Maybe<String>;
  adminId_gt?: Maybe<String>;
  adminId_gte?: Maybe<String>;
  adminId_contains?: Maybe<String>;
  adminId_not_contains?: Maybe<String>;
  adminId_starts_with?: Maybe<String>;
  adminId_not_starts_with?: Maybe<String>;
  adminId_ends_with?: Maybe<String>;
  adminId_not_ends_with?: Maybe<String>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  loginTime?: Maybe<String>;
  loginTime_not?: Maybe<String>;
  loginTime_in?: Maybe<String[] | String>;
  loginTime_not_in?: Maybe<String[] | String>;
  loginTime_lt?: Maybe<String>;
  loginTime_lte?: Maybe<String>;
  loginTime_gt?: Maybe<String>;
  loginTime_gte?: Maybe<String>;
  loginTime_contains?: Maybe<String>;
  loginTime_not_contains?: Maybe<String>;
  loginTime_starts_with?: Maybe<String>;
  loginTime_not_starts_with?: Maybe<String>;
  loginTime_ends_with?: Maybe<String>;
  loginTime_not_ends_with?: Maybe<String>;
  mac?: Maybe<String>;
  mac_not?: Maybe<String>;
  mac_in?: Maybe<String[] | String>;
  mac_not_in?: Maybe<String[] | String>;
  mac_lt?: Maybe<String>;
  mac_lte?: Maybe<String>;
  mac_gt?: Maybe<String>;
  mac_gte?: Maybe<String>;
  mac_contains?: Maybe<String>;
  mac_not_contains?: Maybe<String>;
  mac_starts_with?: Maybe<String>;
  mac_not_starts_with?: Maybe<String>;
  mac_ends_with?: Maybe<String>;
  mac_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduLoginLogWhereInput[] | ChongduLoginLogWhereInput>;
  OR?: Maybe<ChongduLoginLogWhereInput[] | ChongduLoginLogWhereInput>;
  NOT?: Maybe<ChongduLoginLogWhereInput[] | ChongduLoginLogWhereInput>;
}

export interface ChongduProductUpdateOneInput {
  create?: Maybe<ChongduProductCreateInput>;
  update?: Maybe<ChongduProductUpdateDataInput>;
  upsert?: Maybe<ChongduProductUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduProductWhereUniqueInput>;
}

export interface ChongduModeldetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduModeldetailWhereInput>;
  AND?: Maybe<
    | ChongduModeldetailSubscriptionWhereInput[]
    | ChongduModeldetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduModeldetailSubscriptionWhereInput[]
    | ChongduModeldetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduModeldetailSubscriptionWhereInput[]
    | ChongduModeldetailSubscriptionWhereInput
  >;
}

export interface ChongduProductAuthentdetailUpdateInput {
  audit?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  productId?: Maybe<ChongduProductUpdateOneInput>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<ChongduUserUpdateOneInput>;
}

export interface ChongduMessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduMessageWhereInput>;
  AND?: Maybe<
    | ChongduMessageSubscriptionWhereInput[]
    | ChongduMessageSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduMessageSubscriptionWhereInput[]
    | ChongduMessageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduMessageSubscriptionWhereInput[]
    | ChongduMessageSubscriptionWhereInput
  >;
}

export type ChongduRoleGroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduMerchantstatisticSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduMerchantstatisticWhereInput>;
  AND?: Maybe<
    | ChongduMerchantstatisticSubscriptionWhereInput[]
    | ChongduMerchantstatisticSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduMerchantstatisticSubscriptionWhereInput[]
    | ChongduMerchantstatisticSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduMerchantstatisticSubscriptionWhereInput[]
    | ChongduMerchantstatisticSubscriptionWhereInput
  >;
}

export interface ChongduProductCreateOneInput {
  create?: Maybe<ChongduProductCreateInput>;
  connect?: Maybe<ChongduProductWhereUniqueInput>;
}

export type ChongduCityWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductAuthentdetailCreateInput {
  id?: Maybe<Int>;
  audit?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  productId?: Maybe<ChongduProductCreateOneInput>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<ChongduUserCreateOneInput>;
}

export interface ChongduMerchantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduMerchantWhereInput>;
  AND?: Maybe<
    | ChongduMerchantSubscriptionWhereInput[]
    | ChongduMerchantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduMerchantSubscriptionWhereInput[]
    | ChongduMerchantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduMerchantSubscriptionWhereInput[]
    | ChongduMerchantSubscriptionWhereInput
  >;
}

export interface ChongduProductUpdateManyMutationInput {
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  promotionPrice?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  stock?: Maybe<Int>;
  title?: Maybe<String>;
  userId?: Maybe<String>;
}

export type ChongduMerchantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduProductTypeUpsertNestedInput {
  update: ChongduProductTypeUpdateDataInput;
  create: ChongduProductTypeCreateInput;
}

export interface ChongduLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduLogWhereInput>;
  AND?: Maybe<
    ChongduLogSubscriptionWhereInput[] | ChongduLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduLogSubscriptionWhereInput[] | ChongduLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduLogSubscriptionWhereInput[] | ChongduLogSubscriptionWhereInput
  >;
}

export type ChongduRoleMenuWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduInformSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduInformWhereInput>;
  AND?: Maybe<
    ChongduInformSubscriptionWhereInput[] | ChongduInformSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduInformSubscriptionWhereInput[] | ChongduInformSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduInformSubscriptionWhereInput[] | ChongduInformSubscriptionWhereInput
  >;
}

export interface ChongduProductTypeUpdateDataInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pettypeId?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduFilemanageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduFilemanageWhereInput>;
  AND?: Maybe<
    | ChongduFilemanageSubscriptionWhereInput[]
    | ChongduFilemanageSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduFilemanageSubscriptionWhereInput[]
    | ChongduFilemanageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduFilemanageSubscriptionWhereInput[]
    | ChongduFilemanageSubscriptionWhereInput
  >;
}

export interface ChongduRoleMenuWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  menuName?: Maybe<String>;
  menuName_not?: Maybe<String>;
  menuName_in?: Maybe<String[] | String>;
  menuName_not_in?: Maybe<String[] | String>;
  menuName_lt?: Maybe<String>;
  menuName_lte?: Maybe<String>;
  menuName_gt?: Maybe<String>;
  menuName_gte?: Maybe<String>;
  menuName_contains?: Maybe<String>;
  menuName_not_contains?: Maybe<String>;
  menuName_starts_with?: Maybe<String>;
  menuName_not_starts_with?: Maybe<String>;
  menuName_ends_with?: Maybe<String>;
  menuName_not_ends_with?: Maybe<String>;
  menuUrl?: Maybe<String>;
  menuUrl_not?: Maybe<String>;
  menuUrl_in?: Maybe<String[] | String>;
  menuUrl_not_in?: Maybe<String[] | String>;
  menuUrl_lt?: Maybe<String>;
  menuUrl_lte?: Maybe<String>;
  menuUrl_gt?: Maybe<String>;
  menuUrl_gte?: Maybe<String>;
  menuUrl_contains?: Maybe<String>;
  menuUrl_not_contains?: Maybe<String>;
  menuUrl_starts_with?: Maybe<String>;
  menuUrl_not_starts_with?: Maybe<String>;
  menuUrl_ends_with?: Maybe<String>;
  menuUrl_not_ends_with?: Maybe<String>;
  menuChildrenId?: Maybe<String>;
  menuChildrenId_not?: Maybe<String>;
  menuChildrenId_in?: Maybe<String[] | String>;
  menuChildrenId_not_in?: Maybe<String[] | String>;
  menuChildrenId_lt?: Maybe<String>;
  menuChildrenId_lte?: Maybe<String>;
  menuChildrenId_gt?: Maybe<String>;
  menuChildrenId_gte?: Maybe<String>;
  menuChildrenId_contains?: Maybe<String>;
  menuChildrenId_not_contains?: Maybe<String>;
  menuChildrenId_starts_with?: Maybe<String>;
  menuChildrenId_not_starts_with?: Maybe<String>;
  menuChildrenId_ends_with?: Maybe<String>;
  menuChildrenId_not_ends_with?: Maybe<String>;
  roleGroupId?: Maybe<ChongduRoleGroupWhereInput>;
  AND?: Maybe<ChongduRoleMenuWhereInput[] | ChongduRoleMenuWhereInput>;
  OR?: Maybe<ChongduRoleMenuWhereInput[] | ChongduRoleMenuWhereInput>;
  NOT?: Maybe<ChongduRoleMenuWhereInput[] | ChongduRoleMenuWhereInput>;
}

export interface ChongduDiscussSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduDiscussWhereInput>;
  AND?: Maybe<
    | ChongduDiscussSubscriptionWhereInput[]
    | ChongduDiscussSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduDiscussSubscriptionWhereInput[]
    | ChongduDiscussSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduDiscussSubscriptionWhereInput[]
    | ChongduDiscussSubscriptionWhereInput
  >;
}

export interface ChongduAdminRoleWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  adminId?: Maybe<String>;
  adminId_not?: Maybe<String>;
  adminId_in?: Maybe<String[] | String>;
  adminId_not_in?: Maybe<String[] | String>;
  adminId_lt?: Maybe<String>;
  adminId_lte?: Maybe<String>;
  adminId_gt?: Maybe<String>;
  adminId_gte?: Maybe<String>;
  adminId_contains?: Maybe<String>;
  adminId_not_contains?: Maybe<String>;
  adminId_starts_with?: Maybe<String>;
  adminId_not_starts_with?: Maybe<String>;
  adminId_ends_with?: Maybe<String>;
  adminId_not_ends_with?: Maybe<String>;
  cadminId?: Maybe<String>;
  cadminId_not?: Maybe<String>;
  cadminId_in?: Maybe<String[] | String>;
  cadminId_not_in?: Maybe<String[] | String>;
  cadminId_lt?: Maybe<String>;
  cadminId_lte?: Maybe<String>;
  cadminId_gt?: Maybe<String>;
  cadminId_gte?: Maybe<String>;
  cadminId_contains?: Maybe<String>;
  cadminId_not_contains?: Maybe<String>;
  cadminId_starts_with?: Maybe<String>;
  cadminId_not_starts_with?: Maybe<String>;
  cadminId_ends_with?: Maybe<String>;
  cadminId_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  roleId?: Maybe<Int>;
  roleId_not?: Maybe<Int>;
  roleId_in?: Maybe<Int[] | Int>;
  roleId_not_in?: Maybe<Int[] | Int>;
  roleId_lt?: Maybe<Int>;
  roleId_lte?: Maybe<Int>;
  roleId_gt?: Maybe<Int>;
  roleId_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduAdminRoleWhereInput[] | ChongduAdminRoleWhereInput>;
  OR?: Maybe<ChongduAdminRoleWhereInput[] | ChongduAdminRoleWhereInput>;
  NOT?: Maybe<ChongduAdminRoleWhereInput[] | ChongduAdminRoleWhereInput>;
}

export interface ChongduDataVersionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduDataVersionWhereInput>;
  AND?: Maybe<
    | ChongduDataVersionSubscriptionWhereInput[]
    | ChongduDataVersionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduDataVersionSubscriptionWhereInput[]
    | ChongduDataVersionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduDataVersionSubscriptionWhereInput[]
    | ChongduDataVersionSubscriptionWhereInput
  >;
}

export interface ChongduProductTypeUpdateOneInput {
  create?: Maybe<ChongduProductTypeCreateInput>;
  update?: Maybe<ChongduProductTypeUpdateDataInput>;
  upsert?: Maybe<ChongduProductTypeUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduProductTypeWhereUniqueInput>;
}

export interface ChongduCompanyrecommendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCompanyrecommendWhereInput>;
  AND?: Maybe<
    | ChongduCompanyrecommendSubscriptionWhereInput[]
    | ChongduCompanyrecommendSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCompanyrecommendSubscriptionWhereInput[]
    | ChongduCompanyrecommendSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCompanyrecommendSubscriptionWhereInput[]
    | ChongduCompanyrecommendSubscriptionWhereInput
  >;
}

export interface ChongduMerchantUpsertNestedInput {
  update: ChongduMerchantUpdateDataInput;
  create: ChongduMerchantCreateInput;
}

export type ChongduMerchantstatisticWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduMerchantUpdateDataInput {
  address?: Maybe<String>;
  attention?: Maybe<Int>;
  beginTime?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  endTime?: Maybe<String>;
  icon?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  name?: Maybe<String>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduMerchantstatisticWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  day?: Maybe<Int>;
  day_not?: Maybe<Int>;
  day_in?: Maybe<Int[] | Int>;
  day_not_in?: Maybe<Int[] | Int>;
  day_lt?: Maybe<Int>;
  day_lte?: Maybe<Int>;
  day_gt?: Maybe<Int>;
  day_gte?: Maybe<Int>;
  hour?: Maybe<Int>;
  hour_not?: Maybe<Int>;
  hour_in?: Maybe<Int[] | Int>;
  hour_not_in?: Maybe<Int[] | Int>;
  hour_lt?: Maybe<Int>;
  hour_lte?: Maybe<Int>;
  hour_gt?: Maybe<Int>;
  hour_gte?: Maybe<Int>;
  month?: Maybe<Int>;
  month_not?: Maybe<Int>;
  month_in?: Maybe<Int[] | Int>;
  month_not_in?: Maybe<Int[] | Int>;
  month_lt?: Maybe<Int>;
  month_lte?: Maybe<Int>;
  month_gt?: Maybe<Int>;
  month_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduMerchantstatisticWhereInput[] | ChongduMerchantstatisticWhereInput
  >;
  OR?: Maybe<
    ChongduMerchantstatisticWhereInput[] | ChongduMerchantstatisticWhereInput
  >;
  NOT?: Maybe<
    ChongduMerchantstatisticWhereInput[] | ChongduMerchantstatisticWhereInput
  >;
}

export type ChongduRoleMenuChildrenWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduCommentReplySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCommentReplyWhereInput>;
  AND?: Maybe<
    | ChongduCommentReplySubscriptionWhereInput[]
    | ChongduCommentReplySubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCommentReplySubscriptionWhereInput[]
    | ChongduCommentReplySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCommentReplySubscriptionWhereInput[]
    | ChongduCommentReplySubscriptionWhereInput
  >;
}

export interface ChongduMerchantUpdateOneInput {
  create?: Maybe<ChongduMerchantCreateInput>;
  update?: Maybe<ChongduMerchantUpdateDataInput>;
  upsert?: Maybe<ChongduMerchantUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduMerchantWhereUniqueInput>;
}

export interface ChongduCommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCommentWhereInput>;
  AND?: Maybe<
    | ChongduCommentSubscriptionWhereInput[]
    | ChongduCommentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCommentSubscriptionWhereInput[]
    | ChongduCommentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCommentSubscriptionWhereInput[]
    | ChongduCommentSubscriptionWhereInput
  >;
}

export interface ChongduRoleMenuChildrenWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  menuId?: Maybe<ChongduRoleMenuWhereInput>;
  action?: Maybe<String>;
  action_not?: Maybe<String>;
  action_in?: Maybe<String[] | String>;
  action_not_in?: Maybe<String[] | String>;
  action_lt?: Maybe<String>;
  action_lte?: Maybe<String>;
  action_gt?: Maybe<String>;
  action_gte?: Maybe<String>;
  action_contains?: Maybe<String>;
  action_not_contains?: Maybe<String>;
  action_starts_with?: Maybe<String>;
  action_not_starts_with?: Maybe<String>;
  action_ends_with?: Maybe<String>;
  action_not_ends_with?: Maybe<String>;
  authName?: Maybe<String>;
  authName_not?: Maybe<String>;
  authName_in?: Maybe<String[] | String>;
  authName_not_in?: Maybe<String[] | String>;
  authName_lt?: Maybe<String>;
  authName_lte?: Maybe<String>;
  authName_gt?: Maybe<String>;
  authName_gte?: Maybe<String>;
  authName_contains?: Maybe<String>;
  authName_not_contains?: Maybe<String>;
  authName_starts_with?: Maybe<String>;
  authName_not_starts_with?: Maybe<String>;
  authName_ends_with?: Maybe<String>;
  authName_not_ends_with?: Maybe<String>;
  menuUrlName?: Maybe<String>;
  menuUrlName_not?: Maybe<String>;
  menuUrlName_in?: Maybe<String[] | String>;
  menuUrlName_not_in?: Maybe<String[] | String>;
  menuUrlName_lt?: Maybe<String>;
  menuUrlName_lte?: Maybe<String>;
  menuUrlName_gt?: Maybe<String>;
  menuUrlName_gte?: Maybe<String>;
  menuUrlName_contains?: Maybe<String>;
  menuUrlName_not_contains?: Maybe<String>;
  menuUrlName_starts_with?: Maybe<String>;
  menuUrlName_not_starts_with?: Maybe<String>;
  menuUrlName_ends_with?: Maybe<String>;
  menuUrlName_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduRoleMenuChildrenWhereInput[] | ChongduRoleMenuChildrenWhereInput
  >;
  OR?: Maybe<
    ChongduRoleMenuChildrenWhereInput[] | ChongduRoleMenuChildrenWhereInput
  >;
  NOT?: Maybe<
    ChongduRoleMenuChildrenWhereInput[] | ChongduRoleMenuChildrenWhereInput
  >;
}

export interface ChongduCitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCityWhereInput>;
  AND?: Maybe<
    ChongduCitySubscriptionWhereInput[] | ChongduCitySubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduCitySubscriptionWhereInput[] | ChongduCitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduCitySubscriptionWhereInput[] | ChongduCitySubscriptionWhereInput
  >;
}

export interface ChongduProductBrandUpsertNestedInput {
  update: ChongduProductBrandUpdateDataInput;
  create: ChongduProductBrandCreateInput;
}

export interface ChongduCartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  checked?: Maybe<Int>;
  checked_not?: Maybe<Int>;
  checked_in?: Maybe<Int[] | Int>;
  checked_not_in?: Maybe<Int[] | Int>;
  checked_lt?: Maybe<Int>;
  checked_lte?: Maybe<Int>;
  checked_gt?: Maybe<Int>;
  checked_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  num?: Maybe<Int>;
  num_not?: Maybe<Int>;
  num_in?: Maybe<Int[] | Int>;
  num_not_in?: Maybe<Int[] | Int>;
  num_lt?: Maybe<Int>;
  num_lte?: Maybe<Int>;
  num_gt?: Maybe<Int>;
  num_gte?: Maybe<Int>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduCartWhereInput[] | ChongduCartWhereInput>;
  OR?: Maybe<ChongduCartWhereInput[] | ChongduCartWhereInput>;
  NOT?: Maybe<ChongduCartWhereInput[] | ChongduCartWhereInput>;
}

export interface ChongduProductBrandUpdateDataInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  firstLetter?: Maybe<String>;
  logoImg?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduAppointmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAppointmentWhereInput>;
  AND?: Maybe<
    | ChongduAppointmentSubscriptionWhereInput[]
    | ChongduAppointmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAppointmentSubscriptionWhereInput[]
    | ChongduAppointmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAppointmentSubscriptionWhereInput[]
    | ChongduAppointmentSubscriptionWhereInput
  >;
}

export interface ChongduProductBrandUpdateOneInput {
  create?: Maybe<ChongduProductBrandCreateInput>;
  update?: Maybe<ChongduProductBrandUpdateDataInput>;
  upsert?: Maybe<ChongduProductBrandUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduProductBrandWhereUniqueInput>;
}

export type ChongduModelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduProductUpdateInput {
  brandId?: Maybe<ChongduProductBrandUpdateOneInput>;
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantUpdateOneInput>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  promotionPrice?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  stock?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduProductTypeUpdateOneInput>;
  userId?: Maybe<String>;
}

export interface ChongduModelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  action?: Maybe<String>;
  action_not?: Maybe<String>;
  action_in?: Maybe<String[] | String>;
  action_not_in?: Maybe<String[] | String>;
  action_lt?: Maybe<String>;
  action_lte?: Maybe<String>;
  action_gt?: Maybe<String>;
  action_gte?: Maybe<String>;
  action_contains?: Maybe<String>;
  action_not_contains?: Maybe<String>;
  action_starts_with?: Maybe<String>;
  action_not_starts_with?: Maybe<String>;
  action_ends_with?: Maybe<String>;
  action_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  namespace?: Maybe<String>;
  namespace_not?: Maybe<String>;
  namespace_in?: Maybe<String[] | String>;
  namespace_not_in?: Maybe<String[] | String>;
  namespace_lt?: Maybe<String>;
  namespace_lte?: Maybe<String>;
  namespace_gt?: Maybe<String>;
  namespace_gte?: Maybe<String>;
  namespace_contains?: Maybe<String>;
  namespace_not_contains?: Maybe<String>;
  namespace_starts_with?: Maybe<String>;
  namespace_not_starts_with?: Maybe<String>;
  namespace_ends_with?: Maybe<String>;
  namespace_not_ends_with?: Maybe<String>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduModelWhereInput[] | ChongduModelWhereInput>;
  OR?: Maybe<ChongduModelWhereInput[] | ChongduModelWhereInput>;
  NOT?: Maybe<ChongduModelWhereInput[] | ChongduModelWhereInput>;
}

export type ChongduSearchthinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduAdvertisementSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAdvertisementWhereInput>;
  AND?: Maybe<
    | ChongduAdvertisementSubscriptionWhereInput[]
    | ChongduAdvertisementSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAdvertisementSubscriptionWhereInput[]
    | ChongduAdvertisementSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAdvertisementSubscriptionWhereInput[]
    | ChongduAdvertisementSubscriptionWhereInput
  >;
}

export interface ChongduProductTypeCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pettypeId?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduAdminSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAdminWhereInput>;
  AND?: Maybe<
    ChongduAdminSubscriptionWhereInput[] | ChongduAdminSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduAdminSubscriptionWhereInput[] | ChongduAdminSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduAdminSubscriptionWhereInput[] | ChongduAdminSubscriptionWhereInput
  >;
}

export interface ChongduSearchthinkWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  hot?: Maybe<Int>;
  hot_not?: Maybe<Int>;
  hot_in?: Maybe<Int[] | Int>;
  hot_not_in?: Maybe<Int[] | Int>;
  hot_lt?: Maybe<Int>;
  hot_lte?: Maybe<Int>;
  hot_gt?: Maybe<Int>;
  hot_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduSearchthinkWhereInput[] | ChongduSearchthinkWhereInput>;
  OR?: Maybe<ChongduSearchthinkWhereInput[] | ChongduSearchthinkWhereInput>;
  NOT?: Maybe<ChongduSearchthinkWhereInput[] | ChongduSearchthinkWhereInput>;
}

export interface ChongduAddressRelationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAddressRelationWhereInput>;
  AND?: Maybe<
    | ChongduAddressRelationSubscriptionWhereInput[]
    | ChongduAddressRelationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAddressRelationSubscriptionWhereInput[]
    | ChongduAddressRelationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAddressRelationSubscriptionWhereInput[]
    | ChongduAddressRelationSubscriptionWhereInput
  >;
}

export type ChongduAdminRoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduCartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduProductTypeCreateOneInput {
  create?: Maybe<ChongduProductTypeCreateInput>;
  connect?: Maybe<ChongduProductTypeWhereUniqueInput>;
}

export interface ChongduAccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAccountWhereInput>;
  AND?: Maybe<
    | ChongduAccountSubscriptionWhereInput[]
    | ChongduAccountSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAccountSubscriptionWhereInput[]
    | ChongduAccountSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAccountSubscriptionWhereInput[]
    | ChongduAccountSubscriptionWhereInput
  >;
}

export interface ChongduMerchantCreateOneInput {
  create?: Maybe<ChongduMerchantCreateInput>;
  connect?: Maybe<ChongduMerchantWhereUniqueInput>;
}

export type ChongduOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductBrandCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  firstLetter?: Maybe<String>;
  logoImg?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduOrderWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  addressId?: Maybe<Int>;
  addressId_not?: Maybe<Int>;
  addressId_in?: Maybe<Int[] | Int>;
  addressId_not_in?: Maybe<Int[] | Int>;
  addressId_lt?: Maybe<Int>;
  addressId_lte?: Maybe<Int>;
  addressId_gt?: Maybe<Int>;
  addressId_gte?: Maybe<Int>;
  closeTime?: Maybe<String>;
  closeTime_not?: Maybe<String>;
  closeTime_in?: Maybe<String[] | String>;
  closeTime_not_in?: Maybe<String[] | String>;
  closeTime_lt?: Maybe<String>;
  closeTime_lte?: Maybe<String>;
  closeTime_gt?: Maybe<String>;
  closeTime_gte?: Maybe<String>;
  closeTime_contains?: Maybe<String>;
  closeTime_not_contains?: Maybe<String>;
  closeTime_starts_with?: Maybe<String>;
  closeTime_not_starts_with?: Maybe<String>;
  closeTime_ends_with?: Maybe<String>;
  closeTime_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  orderNo?: Maybe<String>;
  orderNo_not?: Maybe<String>;
  orderNo_in?: Maybe<String[] | String>;
  orderNo_not_in?: Maybe<String[] | String>;
  orderNo_lt?: Maybe<String>;
  orderNo_lte?: Maybe<String>;
  orderNo_gt?: Maybe<String>;
  orderNo_gte?: Maybe<String>;
  orderNo_contains?: Maybe<String>;
  orderNo_not_contains?: Maybe<String>;
  orderNo_starts_with?: Maybe<String>;
  orderNo_not_starts_with?: Maybe<String>;
  orderNo_ends_with?: Maybe<String>;
  orderNo_not_ends_with?: Maybe<String>;
  payment?: Maybe<Float>;
  payment_not?: Maybe<Float>;
  payment_in?: Maybe<Float[] | Float>;
  payment_not_in?: Maybe<Float[] | Float>;
  payment_lt?: Maybe<Float>;
  payment_lte?: Maybe<Float>;
  payment_gt?: Maybe<Float>;
  payment_gte?: Maybe<Float>;
  paymentTime?: Maybe<String>;
  paymentTime_not?: Maybe<String>;
  paymentTime_in?: Maybe<String[] | String>;
  paymentTime_not_in?: Maybe<String[] | String>;
  paymentTime_lt?: Maybe<String>;
  paymentTime_lte?: Maybe<String>;
  paymentTime_gt?: Maybe<String>;
  paymentTime_gte?: Maybe<String>;
  paymentTime_contains?: Maybe<String>;
  paymentTime_not_contains?: Maybe<String>;
  paymentTime_starts_with?: Maybe<String>;
  paymentTime_not_starts_with?: Maybe<String>;
  paymentTime_ends_with?: Maybe<String>;
  paymentTime_not_ends_with?: Maybe<String>;
  paymentType?: Maybe<Int>;
  paymentType_not?: Maybe<Int>;
  paymentType_in?: Maybe<Int[] | Int>;
  paymentType_not_in?: Maybe<Int[] | Int>;
  paymentType_lt?: Maybe<Int>;
  paymentType_lte?: Maybe<Int>;
  paymentType_gt?: Maybe<Int>;
  paymentType_gte?: Maybe<Int>;
  postage?: Maybe<Float>;
  postage_not?: Maybe<Float>;
  postage_in?: Maybe<Float[] | Float>;
  postage_not_in?: Maybe<Float[] | Float>;
  postage_lt?: Maybe<Float>;
  postage_lte?: Maybe<Float>;
  postage_gt?: Maybe<Float>;
  postage_gte?: Maybe<Float>;
  sendTime?: Maybe<String>;
  sendTime_not?: Maybe<String>;
  sendTime_in?: Maybe<String[] | String>;
  sendTime_not_in?: Maybe<String[] | String>;
  sendTime_lt?: Maybe<String>;
  sendTime_lte?: Maybe<String>;
  sendTime_gt?: Maybe<String>;
  sendTime_gte?: Maybe<String>;
  sendTime_contains?: Maybe<String>;
  sendTime_not_contains?: Maybe<String>;
  sendTime_starts_with?: Maybe<String>;
  sendTime_not_starts_with?: Maybe<String>;
  sendTime_ends_with?: Maybe<String>;
  sendTime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduOrderWhereInput[] | ChongduOrderWhereInput>;
  OR?: Maybe<ChongduOrderWhereInput[] | ChongduOrderWhereInput>;
  NOT?: Maybe<ChongduOrderWhereInput[] | ChongduOrderWhereInput>;
}

export type ChongduServiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduWorldUpdateOneInput {
  create?: Maybe<ChongduWorldCreateInput>;
  update?: Maybe<ChongduWorldUpdateDataInput>;
  upsert?: Maybe<ChongduWorldUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduWorldWhereUniqueInput>;
}

export interface ChongduProductBrandCreateOneInput {
  create?: Maybe<ChongduProductBrandCreateInput>;
  connect?: Maybe<ChongduProductBrandWhereUniqueInput>;
}

export interface ChongduWorldCreateOneInput {
  create?: Maybe<ChongduWorldCreateInput>;
  connect?: Maybe<ChongduWorldWhereUniqueInput>;
}

export interface ChongduProductCreateInput {
  id?: Maybe<ID_Input>;
  brandId?: Maybe<ChongduProductBrandCreateOneInput>;
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantCreateOneInput>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  promotionPrice?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  stock?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduProductTypeCreateOneInput>;
  userId?: Maybe<String>;
}

export interface ChongduWorldShieldCreateInput {
  id?: Maybe<Int>;
  type?: Maybe<Int>;
  worldId?: Maybe<ChongduWorldCreateOneInput>;
  userId?: Maybe<ChongduUserCreateOneInput>;
  shieldBy?: Maybe<String>;
  status?: Maybe<Int>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduServiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  area?: Maybe<String>;
  area_not?: Maybe<String>;
  area_in?: Maybe<String[] | String>;
  area_not_in?: Maybe<String[] | String>;
  area_lt?: Maybe<String>;
  area_lte?: Maybe<String>;
  area_gt?: Maybe<String>;
  area_gte?: Maybe<String>;
  area_contains?: Maybe<String>;
  area_not_contains?: Maybe<String>;
  area_starts_with?: Maybe<String>;
  area_not_starts_with?: Maybe<String>;
  area_ends_with?: Maybe<String>;
  area_not_ends_with?: Maybe<String>;
  browser?: Maybe<Int>;
  browser_not?: Maybe<Int>;
  browser_in?: Maybe<Int[] | Int>;
  browser_not_in?: Maybe<Int[] | Int>;
  browser_lt?: Maybe<Int>;
  browser_lte?: Maybe<Int>;
  browser_gt?: Maybe<Int>;
  browser_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  endtime?: Maybe<String>;
  endtime_not?: Maybe<String>;
  endtime_in?: Maybe<String[] | String>;
  endtime_not_in?: Maybe<String[] | String>;
  endtime_lt?: Maybe<String>;
  endtime_lte?: Maybe<String>;
  endtime_gt?: Maybe<String>;
  endtime_gte?: Maybe<String>;
  endtime_contains?: Maybe<String>;
  endtime_not_contains?: Maybe<String>;
  endtime_starts_with?: Maybe<String>;
  endtime_not_starts_with?: Maybe<String>;
  endtime_ends_with?: Maybe<String>;
  endtime_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantWhereInput>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  sale?: Maybe<Int>;
  sale_not?: Maybe<Int>;
  sale_in?: Maybe<Int[] | Int>;
  sale_not_in?: Maybe<Int[] | Int>;
  sale_lt?: Maybe<Int>;
  sale_lte?: Maybe<Int>;
  sale_gt?: Maybe<Int>;
  sale_gte?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  shareCount_not?: Maybe<Int>;
  shareCount_in?: Maybe<Int[] | Int>;
  shareCount_not_in?: Maybe<Int[] | Int>;
  shareCount_lt?: Maybe<Int>;
  shareCount_lte?: Maybe<Int>;
  shareCount_gt?: Maybe<Int>;
  shareCount_gte?: Maybe<Int>;
  starttime?: Maybe<String>;
  starttime_not?: Maybe<String>;
  starttime_in?: Maybe<String[] | String>;
  starttime_not_in?: Maybe<String[] | String>;
  starttime_lt?: Maybe<String>;
  starttime_lte?: Maybe<String>;
  starttime_gt?: Maybe<String>;
  starttime_gte?: Maybe<String>;
  starttime_contains?: Maybe<String>;
  starttime_not_contains?: Maybe<String>;
  starttime_starts_with?: Maybe<String>;
  starttime_not_starts_with?: Maybe<String>;
  starttime_ends_with?: Maybe<String>;
  starttime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  typeId?: Maybe<ChongduServiceTypeWhereInput>;
  userId?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<ChongduServiceWhereInput[] | ChongduServiceWhereInput>;
  OR?: Maybe<ChongduServiceWhereInput[] | ChongduServiceWhereInput>;
  NOT?: Maybe<ChongduServiceWhereInput[] | ChongduServiceWhereInput>;
}

export interface ChongduWorldReplyUpdateManyMutationInput {
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduServiceTypeWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduServiceTypeWhereInput[] | ChongduServiceTypeWhereInput>;
  OR?: Maybe<ChongduServiceTypeWhereInput[] | ChongduServiceTypeWhereInput>;
  NOT?: Maybe<ChongduServiceTypeWhereInput[] | ChongduServiceTypeWhereInput>;
}

export interface ChongduWorldReplyCreateInput {
  id?: Maybe<Int>;
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduPlatformExecuteUpdateManyMutationInput {
  business?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  endtime?: Maybe<String>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  oneprice?: Maybe<Float>;
  relateId?: Maybe<Int>;
  relateType?: Maybe<Int>;
  residue?: Maybe<Int>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  timestep?: Maybe<String>;
  type?: Maybe<Int>;
  userarea?: Maybe<String>;
  userId?: Maybe<String>;
  username?: Maybe<String>;
}

export type ChongduOrderinvoiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPlatformExecuteUpdateInput {
  business?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  endtime?: Maybe<String>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  oneprice?: Maybe<Float>;
  relateId?: Maybe<Int>;
  relateType?: Maybe<Int>;
  residue?: Maybe<Int>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  timestep?: Maybe<String>;
  type?: Maybe<Int>;
  userarea?: Maybe<String>;
  userId?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduOrderinvoiceWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  accountnum?: Maybe<String>;
  accountnum_not?: Maybe<String>;
  accountnum_in?: Maybe<String[] | String>;
  accountnum_not_in?: Maybe<String[] | String>;
  accountnum_lt?: Maybe<String>;
  accountnum_lte?: Maybe<String>;
  accountnum_gt?: Maybe<String>;
  accountnum_gte?: Maybe<String>;
  accountnum_contains?: Maybe<String>;
  accountnum_not_contains?: Maybe<String>;
  accountnum_starts_with?: Maybe<String>;
  accountnum_not_starts_with?: Maybe<String>;
  accountnum_ends_with?: Maybe<String>;
  accountnum_not_ends_with?: Maybe<String>;
  addressid?: Maybe<Int>;
  addressid_not?: Maybe<Int>;
  addressid_in?: Maybe<Int[] | Int>;
  addressid_not_in?: Maybe<Int[] | Int>;
  addressid_lt?: Maybe<Int>;
  addressid_lte?: Maybe<Int>;
  addressid_gt?: Maybe<Int>;
  addressid_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  head?: Maybe<String>;
  head_not?: Maybe<String>;
  head_in?: Maybe<String[] | String>;
  head_not_in?: Maybe<String[] | String>;
  head_lt?: Maybe<String>;
  head_lte?: Maybe<String>;
  head_gt?: Maybe<String>;
  head_gte?: Maybe<String>;
  head_contains?: Maybe<String>;
  head_not_contains?: Maybe<String>;
  head_starts_with?: Maybe<String>;
  head_not_starts_with?: Maybe<String>;
  head_ends_with?: Maybe<String>;
  head_not_ends_with?: Maybe<String>;
  invoicename?: Maybe<String>;
  invoicename_not?: Maybe<String>;
  invoicename_in?: Maybe<String[] | String>;
  invoicename_not_in?: Maybe<String[] | String>;
  invoicename_lt?: Maybe<String>;
  invoicename_lte?: Maybe<String>;
  invoicename_gt?: Maybe<String>;
  invoicename_gte?: Maybe<String>;
  invoicename_contains?: Maybe<String>;
  invoicename_not_contains?: Maybe<String>;
  invoicename_starts_with?: Maybe<String>;
  invoicename_not_starts_with?: Maybe<String>;
  invoicename_ends_with?: Maybe<String>;
  invoicename_not_ends_with?: Maybe<String>;
  money?: Maybe<Float>;
  money_not?: Maybe<Float>;
  money_in?: Maybe<Float[] | Float>;
  money_not_in?: Maybe<Float[] | Float>;
  money_lt?: Maybe<Float>;
  money_lte?: Maybe<Float>;
  money_gt?: Maybe<Float>;
  money_gte?: Maybe<Float>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nature?: Maybe<Int>;
  nature_not?: Maybe<Int>;
  nature_in?: Maybe<Int[] | Int>;
  nature_not_in?: Maybe<Int[] | Int>;
  nature_lt?: Maybe<Int>;
  nature_lte?: Maybe<Int>;
  nature_gt?: Maybe<Int>;
  nature_gte?: Maybe<Int>;
  orderid?: Maybe<String>;
  orderid_not?: Maybe<String>;
  orderid_in?: Maybe<String[] | String>;
  orderid_not_in?: Maybe<String[] | String>;
  orderid_lt?: Maybe<String>;
  orderid_lte?: Maybe<String>;
  orderid_gt?: Maybe<String>;
  orderid_gte?: Maybe<String>;
  orderid_contains?: Maybe<String>;
  orderid_not_contains?: Maybe<String>;
  orderid_starts_with?: Maybe<String>;
  orderid_not_starts_with?: Maybe<String>;
  orderid_ends_with?: Maybe<String>;
  orderid_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  usernum?: Maybe<String>;
  usernum_not?: Maybe<String>;
  usernum_in?: Maybe<String[] | String>;
  usernum_not_in?: Maybe<String[] | String>;
  usernum_lt?: Maybe<String>;
  usernum_lte?: Maybe<String>;
  usernum_gt?: Maybe<String>;
  usernum_gte?: Maybe<String>;
  usernum_contains?: Maybe<String>;
  usernum_not_contains?: Maybe<String>;
  usernum_starts_with?: Maybe<String>;
  usernum_not_starts_with?: Maybe<String>;
  usernum_ends_with?: Maybe<String>;
  usernum_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduOrderinvoiceWhereInput[] | ChongduOrderinvoiceWhereInput>;
  OR?: Maybe<ChongduOrderinvoiceWhereInput[] | ChongduOrderinvoiceWhereInput>;
  NOT?: Maybe<ChongduOrderinvoiceWhereInput[] | ChongduOrderinvoiceWhereInput>;
}

export interface ChongduPlatformExecuteCreateInput {
  id?: Maybe<Int>;
  business?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  endtime?: Maybe<String>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  oneprice?: Maybe<Float>;
  relateId?: Maybe<Int>;
  relateType?: Maybe<Int>;
  residue?: Maybe<Int>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  timestep?: Maybe<String>;
  type?: Maybe<Int>;
  userarea?: Maybe<String>;
  userId?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduWorldJoinUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduPlatformBusinessUpdateManyMutationInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  currency?: Maybe<Float>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  length?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  rNum?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  timestep?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduWorldJoinCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export type ChongduServiceAuthentdetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldCommentUpdateManyMutationInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduPlatformBusinessUpdateInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  currency?: Maybe<Float>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  length?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  rNum?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  timestep?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduAppointmentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceid?: Maybe<String>;
  deviceid_not?: Maybe<String>;
  deviceid_in?: Maybe<String[] | String>;
  deviceid_not_in?: Maybe<String[] | String>;
  deviceid_lt?: Maybe<String>;
  deviceid_lte?: Maybe<String>;
  deviceid_gt?: Maybe<String>;
  deviceid_gte?: Maybe<String>;
  deviceid_contains?: Maybe<String>;
  deviceid_not_contains?: Maybe<String>;
  deviceid_starts_with?: Maybe<String>;
  deviceid_not_starts_with?: Maybe<String>;
  deviceid_ends_with?: Maybe<String>;
  deviceid_not_ends_with?: Maybe<String>;
  devicename?: Maybe<String>;
  devicename_not?: Maybe<String>;
  devicename_in?: Maybe<String[] | String>;
  devicename_not_in?: Maybe<String[] | String>;
  devicename_lt?: Maybe<String>;
  devicename_lte?: Maybe<String>;
  devicename_gt?: Maybe<String>;
  devicename_gte?: Maybe<String>;
  devicename_contains?: Maybe<String>;
  devicename_not_contains?: Maybe<String>;
  devicename_starts_with?: Maybe<String>;
  devicename_not_starts_with?: Maybe<String>;
  devicename_ends_with?: Maybe<String>;
  devicename_not_ends_with?: Maybe<String>;
  devicetype?: Maybe<Int>;
  devicetype_not?: Maybe<Int>;
  devicetype_in?: Maybe<Int[] | Int>;
  devicetype_not_in?: Maybe<Int[] | Int>;
  devicetype_lt?: Maybe<Int>;
  devicetype_lte?: Maybe<Int>;
  devicetype_gt?: Maybe<Int>;
  devicetype_gte?: Maybe<Int>;
  isOk?: Maybe<Int>;
  isOk_not?: Maybe<Int>;
  isOk_in?: Maybe<Int[] | Int>;
  isOk_not_in?: Maybe<Int[] | Int>;
  isOk_lt?: Maybe<Int>;
  isOk_lte?: Maybe<Int>;
  isOk_gt?: Maybe<Int>;
  isOk_gte?: Maybe<Int>;
  levelmessage?: Maybe<String>;
  levelmessage_not?: Maybe<String>;
  levelmessage_in?: Maybe<String[] | String>;
  levelmessage_not_in?: Maybe<String[] | String>;
  levelmessage_lt?: Maybe<String>;
  levelmessage_lte?: Maybe<String>;
  levelmessage_gt?: Maybe<String>;
  levelmessage_gte?: Maybe<String>;
  levelmessage_contains?: Maybe<String>;
  levelmessage_not_contains?: Maybe<String>;
  levelmessage_starts_with?: Maybe<String>;
  levelmessage_not_starts_with?: Maybe<String>;
  levelmessage_ends_with?: Maybe<String>;
  levelmessage_not_ends_with?: Maybe<String>;
  mark?: Maybe<String>;
  mark_not?: Maybe<String>;
  mark_in?: Maybe<String[] | String>;
  mark_not_in?: Maybe<String[] | String>;
  mark_lt?: Maybe<String>;
  mark_lte?: Maybe<String>;
  mark_gt?: Maybe<String>;
  mark_gte?: Maybe<String>;
  mark_contains?: Maybe<String>;
  mark_not_contains?: Maybe<String>;
  mark_starts_with?: Maybe<String>;
  mark_not_starts_with?: Maybe<String>;
  mark_ends_with?: Maybe<String>;
  mark_not_ends_with?: Maybe<String>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  state?: Maybe<Int>;
  state_not?: Maybe<Int>;
  state_in?: Maybe<Int[] | Int>;
  state_not_in?: Maybe<Int[] | Int>;
  state_lt?: Maybe<Int>;
  state_lte?: Maybe<Int>;
  state_gt?: Maybe<Int>;
  state_gte?: Maybe<Int>;
  subtype?: Maybe<Int>;
  subtype_not?: Maybe<Int>;
  subtype_in?: Maybe<Int[] | Int>;
  subtype_not_in?: Maybe<Int[] | Int>;
  subtype_lt?: Maybe<Int>;
  subtype_lte?: Maybe<Int>;
  subtype_gt?: Maybe<Int>;
  subtype_gte?: Maybe<Int>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  timebegin?: Maybe<String>;
  timebegin_not?: Maybe<String>;
  timebegin_in?: Maybe<String[] | String>;
  timebegin_not_in?: Maybe<String[] | String>;
  timebegin_lt?: Maybe<String>;
  timebegin_lte?: Maybe<String>;
  timebegin_gt?: Maybe<String>;
  timebegin_gte?: Maybe<String>;
  timebegin_contains?: Maybe<String>;
  timebegin_not_contains?: Maybe<String>;
  timebegin_starts_with?: Maybe<String>;
  timebegin_not_starts_with?: Maybe<String>;
  timebegin_ends_with?: Maybe<String>;
  timebegin_not_ends_with?: Maybe<String>;
  timeend?: Maybe<String>;
  timeend_not?: Maybe<String>;
  timeend_in?: Maybe<String[] | String>;
  timeend_not_in?: Maybe<String[] | String>;
  timeend_lt?: Maybe<String>;
  timeend_lte?: Maybe<String>;
  timeend_gt?: Maybe<String>;
  timeend_gte?: Maybe<String>;
  timeend_contains?: Maybe<String>;
  timeend_not_contains?: Maybe<String>;
  timeend_starts_with?: Maybe<String>;
  timeend_not_starts_with?: Maybe<String>;
  timeend_ends_with?: Maybe<String>;
  timeend_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  orderSn?: Maybe<String>;
  orderSn_not?: Maybe<String>;
  orderSn_in?: Maybe<String[] | String>;
  orderSn_not_in?: Maybe<String[] | String>;
  orderSn_lt?: Maybe<String>;
  orderSn_lte?: Maybe<String>;
  orderSn_gt?: Maybe<String>;
  orderSn_gte?: Maybe<String>;
  orderSn_contains?: Maybe<String>;
  orderSn_not_contains?: Maybe<String>;
  orderSn_starts_with?: Maybe<String>;
  orderSn_not_starts_with?: Maybe<String>;
  orderSn_ends_with?: Maybe<String>;
  orderSn_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduAppointmentWhereInput[] | ChongduAppointmentWhereInput>;
  OR?: Maybe<ChongduAppointmentWhereInput[] | ChongduAppointmentWhereInput>;
  NOT?: Maybe<ChongduAppointmentWhereInput[] | ChongduAppointmentWhereInput>;
}

export interface ChongduServiceAuthentdetailWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  audit?: Maybe<Int>;
  audit_not?: Maybe<Int>;
  audit_in?: Maybe<Int[] | Int>;
  audit_not_in?: Maybe<Int[] | Int>;
  audit_lt?: Maybe<Int>;
  audit_lte?: Maybe<Int>;
  audit_gt?: Maybe<Int>;
  audit_gte?: Maybe<Int>;
  audittime?: Maybe<String>;
  audittime_not?: Maybe<String>;
  audittime_in?: Maybe<String[] | String>;
  audittime_not_in?: Maybe<String[] | String>;
  audittime_lt?: Maybe<String>;
  audittime_lte?: Maybe<String>;
  audittime_gt?: Maybe<String>;
  audittime_gte?: Maybe<String>;
  audittime_contains?: Maybe<String>;
  audittime_not_contains?: Maybe<String>;
  audittime_starts_with?: Maybe<String>;
  audittime_not_starts_with?: Maybe<String>;
  audittime_ends_with?: Maybe<String>;
  audittime_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    | ChongduServiceAuthentdetailWhereInput[]
    | ChongduServiceAuthentdetailWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceAuthentdetailWhereInput[]
    | ChongduServiceAuthentdetailWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceAuthentdetailWhereInput[]
    | ChongduServiceAuthentdetailWhereInput
  >;
}

export interface ChongduWorldCommentCreateInput {
  id?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduPlatformBusinessCreateInput {
  id?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  currency?: Maybe<Float>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  length?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  rNum?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  timestep?: Maybe<Int>;
  type?: Maybe<Int>;
}

export type ChongduOrderserialWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPetauthentdetailUpdateManyMutationInput {
  audit?: Maybe<Int>;
  authtime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
}

export interface ChongduOrderserialWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  context?: Maybe<String>;
  context_not?: Maybe<String>;
  context_in?: Maybe<String[] | String>;
  context_not_in?: Maybe<String[] | String>;
  context_lt?: Maybe<String>;
  context_lte?: Maybe<String>;
  context_gt?: Maybe<String>;
  context_gte?: Maybe<String>;
  context_contains?: Maybe<String>;
  context_not_contains?: Maybe<String>;
  context_starts_with?: Maybe<String>;
  context_not_starts_with?: Maybe<String>;
  context_ends_with?: Maybe<String>;
  context_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  money?: Maybe<Float>;
  money_not?: Maybe<Float>;
  money_in?: Maybe<Float[] | Float>;
  money_not_in?: Maybe<Float[] | Float>;
  money_lt?: Maybe<Float>;
  money_lte?: Maybe<Float>;
  money_gt?: Maybe<Float>;
  money_gte?: Maybe<Float>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  orderid?: Maybe<Int>;
  orderid_not?: Maybe<Int>;
  orderid_in?: Maybe<Int[] | Int>;
  orderid_not_in?: Maybe<Int[] | Int>;
  orderid_lt?: Maybe<Int>;
  orderid_lte?: Maybe<Int>;
  orderid_gt?: Maybe<Int>;
  orderid_gte?: Maybe<Int>;
  ordersn?: Maybe<String>;
  ordersn_not?: Maybe<String>;
  ordersn_in?: Maybe<String[] | String>;
  ordersn_not_in?: Maybe<String[] | String>;
  ordersn_lt?: Maybe<String>;
  ordersn_lte?: Maybe<String>;
  ordersn_gt?: Maybe<String>;
  ordersn_gte?: Maybe<String>;
  ordersn_contains?: Maybe<String>;
  ordersn_not_contains?: Maybe<String>;
  ordersn_starts_with?: Maybe<String>;
  ordersn_not_starts_with?: Maybe<String>;
  ordersn_ends_with?: Maybe<String>;
  ordersn_not_ends_with?: Maybe<String>;
  platformtype?: Maybe<Int>;
  platformtype_not?: Maybe<Int>;
  platformtype_in?: Maybe<Int[] | Int>;
  platformtype_not_in?: Maybe<Int[] | Int>;
  platformtype_lt?: Maybe<Int>;
  platformtype_lte?: Maybe<Int>;
  platformtype_gt?: Maybe<Int>;
  platformtype_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduOrderserialWhereInput[] | ChongduOrderserialWhereInput>;
  OR?: Maybe<ChongduOrderserialWhereInput[] | ChongduOrderserialWhereInput>;
  NOT?: Maybe<ChongduOrderserialWhereInput[] | ChongduOrderserialWhereInput>;
}

export interface ChongduPetUpsertNestedInput {
  update: ChongduPetUpdateDataInput;
  create: ChongduPetCreateInput;
}

export interface ChongduViewcountUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  ip?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  pid?: Maybe<String>;
  s?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
  xu?: Maybe<Int>;
}

export interface ChongduPetUpdateDataInput {
  addressId?: Maybe<Int>;
  birthday?: Maybe<String>;
  browser?: Maybe<Int>;
  citycode?: Maybe<String>;
  code?: Maybe<String>;
  color?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isMeet?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  pType?: Maybe<Int>;
  sex?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduPetTypeUpdateOneInput>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
}

export interface ChongduViewcountCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  ip?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  pid?: Maybe<String>;
  s?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
  xu?: Maybe<Int>;
}

export type ChongduServiceImgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduVersionUpdateManyMutationInput {
  ip?: Maybe<String>;
  mac?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  tyep?: Maybe<Int>;
  versionCode?: Maybe<String>;
}

export interface ChongduPetUpdateOneInput {
  create?: Maybe<ChongduPetCreateInput>;
  update?: Maybe<ChongduPetUpdateDataInput>;
  upsert?: Maybe<ChongduPetUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduPetWhereUniqueInput>;
}

export type ChongduAppointmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduServiceImgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  addr_not?: Maybe<String>;
  addr_in?: Maybe<String[] | String>;
  addr_not_in?: Maybe<String[] | String>;
  addr_lt?: Maybe<String>;
  addr_lte?: Maybe<String>;
  addr_gt?: Maybe<String>;
  addr_gte?: Maybe<String>;
  addr_contains?: Maybe<String>;
  addr_not_contains?: Maybe<String>;
  addr_starts_with?: Maybe<String>;
  addr_not_starts_with?: Maybe<String>;
  addr_ends_with?: Maybe<String>;
  addr_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  imgType?: Maybe<Int>;
  imgType_not?: Maybe<Int>;
  imgType_in?: Maybe<Int[] | Int>;
  imgType_not_in?: Maybe<Int[] | Int>;
  imgType_lt?: Maybe<Int>;
  imgType_lte?: Maybe<Int>;
  imgType_gt?: Maybe<Int>;
  imgType_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduServiceImgWhereInput[] | ChongduServiceImgWhereInput>;
  OR?: Maybe<ChongduServiceImgWhereInput[] | ChongduServiceImgWhereInput>;
  NOT?: Maybe<ChongduServiceImgWhereInput[] | ChongduServiceImgWhereInput>;
}

export interface ChongduVersionCreateInput {
  id?: Maybe<Int>;
  ip?: Maybe<String>;
  mac?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  tyep?: Maybe<Int>;
  versionCode?: Maybe<String>;
}

export interface ChongduPetauthentdetailUpdateInput {
  audit?: Maybe<Int>;
  authtime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  petid?: Maybe<ChongduPetUpdateOneInput>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  userid?: Maybe<ChongduUserUpdateOneInput>;
}

export type ChongduPayInfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPetCreateOneInput {
  create?: Maybe<ChongduPetCreateInput>;
  connect?: Maybe<ChongduPetWhereUniqueInput>;
}

export interface ChongduPayInfoWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  orderNo?: Maybe<String>;
  orderNo_not?: Maybe<String>;
  orderNo_in?: Maybe<String[] | String>;
  orderNo_not_in?: Maybe<String[] | String>;
  orderNo_lt?: Maybe<String>;
  orderNo_lte?: Maybe<String>;
  orderNo_gt?: Maybe<String>;
  orderNo_gte?: Maybe<String>;
  orderNo_contains?: Maybe<String>;
  orderNo_not_contains?: Maybe<String>;
  orderNo_starts_with?: Maybe<String>;
  orderNo_not_starts_with?: Maybe<String>;
  orderNo_ends_with?: Maybe<String>;
  orderNo_not_ends_with?: Maybe<String>;
  payNo?: Maybe<String>;
  payNo_not?: Maybe<String>;
  payNo_in?: Maybe<String[] | String>;
  payNo_not_in?: Maybe<String[] | String>;
  payNo_lt?: Maybe<String>;
  payNo_lte?: Maybe<String>;
  payNo_gt?: Maybe<String>;
  payNo_gte?: Maybe<String>;
  payNo_contains?: Maybe<String>;
  payNo_not_contains?: Maybe<String>;
  payNo_starts_with?: Maybe<String>;
  payNo_not_starts_with?: Maybe<String>;
  payNo_ends_with?: Maybe<String>;
  payNo_not_ends_with?: Maybe<String>;
  payPlatform?: Maybe<String>;
  payPlatform_not?: Maybe<String>;
  payPlatform_in?: Maybe<String[] | String>;
  payPlatform_not_in?: Maybe<String[] | String>;
  payPlatform_lt?: Maybe<String>;
  payPlatform_lte?: Maybe<String>;
  payPlatform_gt?: Maybe<String>;
  payPlatform_gte?: Maybe<String>;
  payPlatform_contains?: Maybe<String>;
  payPlatform_not_contains?: Maybe<String>;
  payPlatform_starts_with?: Maybe<String>;
  payPlatform_not_starts_with?: Maybe<String>;
  payPlatform_ends_with?: Maybe<String>;
  payPlatform_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduPayInfoWhereInput[] | ChongduPayInfoWhereInput>;
  OR?: Maybe<ChongduPayInfoWhereInput[] | ChongduPayInfoWhereInput>;
  NOT?: Maybe<ChongduPayInfoWhereInput[] | ChongduPayInfoWhereInput>;
}

export interface ChongduPetauthentdetailCreateInput {
  id?: Maybe<Int>;
  audit?: Maybe<Int>;
  authtime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  petid?: Maybe<ChongduPetCreateOneInput>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  userid?: Maybe<ChongduUserCreateOneInput>;
}

export interface ChongduVaccineBrandUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduPetauthentLogUpdateManyMutationInput {
  petauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduVaccineBrandCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  type?: Maybe<Int>;
}

export type ChongduServicePettypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduVaccineUpdateManyMutationInput {
  brandId?: Maybe<Int>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  indexNum?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  street?: Maybe<String>;
  time?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduPetauthentLogUpdateInput {
  petauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminUpdateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduVaccineUpdateInput {
  brandId?: Maybe<Int>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  indexNum?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  street?: Maybe<String>;
  time?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduServicePettypeWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeId_not?: Maybe<Int>;
  petTypeId_in?: Maybe<Int[] | Int>;
  petTypeId_not_in?: Maybe<Int[] | Int>;
  petTypeId_lt?: Maybe<Int>;
  petTypeId_lte?: Maybe<Int>;
  petTypeId_gt?: Maybe<Int>;
  petTypeId_gte?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  petTypeName_not?: Maybe<String>;
  petTypeName_in?: Maybe<String[] | String>;
  petTypeName_not_in?: Maybe<String[] | String>;
  petTypeName_lt?: Maybe<String>;
  petTypeName_lte?: Maybe<String>;
  petTypeName_gt?: Maybe<String>;
  petTypeName_gte?: Maybe<String>;
  petTypeName_contains?: Maybe<String>;
  petTypeName_not_contains?: Maybe<String>;
  petTypeName_starts_with?: Maybe<String>;
  petTypeName_not_starts_with?: Maybe<String>;
  petTypeName_ends_with?: Maybe<String>;
  petTypeName_not_ends_with?: Maybe<String>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduServicePettypeWhereInput[] | ChongduServicePettypeWhereInput
  >;
  OR?: Maybe<
    ChongduServicePettypeWhereInput[] | ChongduServicePettypeWhereInput
  >;
  NOT?: Maybe<
    ChongduServicePettypeWhereInput[] | ChongduServicePettypeWhereInput
  >;
}

export interface ChongduUserstatisticUpdateManyMutationInput {
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduRoleGroupWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  roleName?: Maybe<String>;
  roleName_not?: Maybe<String>;
  roleName_in?: Maybe<String[] | String>;
  roleName_not_in?: Maybe<String[] | String>;
  roleName_lt?: Maybe<String>;
  roleName_lte?: Maybe<String>;
  roleName_gt?: Maybe<String>;
  roleName_gte?: Maybe<String>;
  roleName_contains?: Maybe<String>;
  roleName_not_contains?: Maybe<String>;
  roleName_starts_with?: Maybe<String>;
  roleName_not_starts_with?: Maybe<String>;
  roleName_ends_with?: Maybe<String>;
  roleName_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduRoleGroupWhereInput[] | ChongduRoleGroupWhereInput>;
  OR?: Maybe<ChongduRoleGroupWhereInput[] | ChongduRoleGroupWhereInput>;
  NOT?: Maybe<ChongduRoleGroupWhereInput[] | ChongduRoleGroupWhereInput>;
}

export type ChongduPetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduPetauthentLogCreateInput {
  id?: Maybe<Int>;
  petauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminCreateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduUserdetailUpdateManyMutationInput {
  deviceCode?: Maybe<String>;
  deviceName?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetTypeUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  image?: Maybe<String>;
  level?: Maybe<Int>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  ppid?: Maybe<Int>;
  sort?: Maybe<Int>;
}

export interface ChongduPetTypeWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  ppid?: Maybe<Int>;
  ppid_not?: Maybe<Int>;
  ppid_in?: Maybe<Int[] | Int>;
  ppid_not_in?: Maybe<Int[] | Int>;
  ppid_lt?: Maybe<Int>;
  ppid_lte?: Maybe<Int>;
  ppid_gt?: Maybe<Int>;
  ppid_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  AND?: Maybe<ChongduPetTypeWhereInput[] | ChongduPetTypeWhereInput>;
  OR?: Maybe<ChongduPetTypeWhereInput[] | ChongduPetTypeWhereInput>;
  NOT?: Maybe<ChongduPetTypeWhereInput[] | ChongduPetTypeWhereInput>;
}

export interface ChongduPetTypeUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  image?: Maybe<String>;
  level?: Maybe<Int>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  ppid?: Maybe<Int>;
  sort?: Maybe<Int>;
}

export interface ChongduUserdetailCreateInput {
  id?: Maybe<Int>;
  deviceCode?: Maybe<String>;
  deviceName?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduServiceRecommendWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserbindUpdateInput {
  bindtime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetRecommendUpdateManyMutationInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduUserbindCreateInput {
  id?: Maybe<Int>;
  bindtime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServiceRecommendWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceid?: Maybe<String>;
  deviceid_not?: Maybe<String>;
  deviceid_in?: Maybe<String[] | String>;
  deviceid_not_in?: Maybe<String[] | String>;
  deviceid_lt?: Maybe<String>;
  deviceid_lte?: Maybe<String>;
  deviceid_gt?: Maybe<String>;
  deviceid_gte?: Maybe<String>;
  deviceid_contains?: Maybe<String>;
  deviceid_not_contains?: Maybe<String>;
  deviceid_starts_with?: Maybe<String>;
  deviceid_not_starts_with?: Maybe<String>;
  deviceid_ends_with?: Maybe<String>;
  deviceid_not_ends_with?: Maybe<String>;
  devicename?: Maybe<String>;
  devicename_not?: Maybe<String>;
  devicename_in?: Maybe<String[] | String>;
  devicename_not_in?: Maybe<String[] | String>;
  devicename_lt?: Maybe<String>;
  devicename_lte?: Maybe<String>;
  devicename_gt?: Maybe<String>;
  devicename_gte?: Maybe<String>;
  devicename_contains?: Maybe<String>;
  devicename_not_contains?: Maybe<String>;
  devicename_starts_with?: Maybe<String>;
  devicename_not_starts_with?: Maybe<String>;
  devicename_ends_with?: Maybe<String>;
  devicename_not_ends_with?: Maybe<String>;
  devicetype?: Maybe<Int>;
  devicetype_not?: Maybe<Int>;
  devicetype_in?: Maybe<Int[] | Int>;
  devicetype_not_in?: Maybe<Int[] | Int>;
  devicetype_lt?: Maybe<Int>;
  devicetype_lte?: Maybe<Int>;
  devicetype_gt?: Maybe<Int>;
  devicetype_gte?: Maybe<Int>;
  endtime?: Maybe<String>;
  endtime_not?: Maybe<String>;
  endtime_in?: Maybe<String[] | String>;
  endtime_not_in?: Maybe<String[] | String>;
  endtime_lt?: Maybe<String>;
  endtime_lte?: Maybe<String>;
  endtime_gt?: Maybe<String>;
  endtime_gte?: Maybe<String>;
  endtime_contains?: Maybe<String>;
  endtime_not_contains?: Maybe<String>;
  endtime_starts_with?: Maybe<String>;
  endtime_not_starts_with?: Maybe<String>;
  endtime_ends_with?: Maybe<String>;
  endtime_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  s?: Maybe<Int>;
  s_not?: Maybe<Int>;
  s_in?: Maybe<Int[] | Int>;
  s_not_in?: Maybe<Int[] | Int>;
  s_lt?: Maybe<Int>;
  s_lte?: Maybe<Int>;
  s_gt?: Maybe<Int>;
  s_gte?: Maybe<Int>;
  serviceId?: Maybe<String>;
  serviceId_not?: Maybe<String>;
  serviceId_in?: Maybe<String[] | String>;
  serviceId_not_in?: Maybe<String[] | String>;
  serviceId_lt?: Maybe<String>;
  serviceId_lte?: Maybe<String>;
  serviceId_gt?: Maybe<String>;
  serviceId_gte?: Maybe<String>;
  serviceId_contains?: Maybe<String>;
  serviceId_not_contains?: Maybe<String>;
  serviceId_starts_with?: Maybe<String>;
  serviceId_not_starts_with?: Maybe<String>;
  serviceId_ends_with?: Maybe<String>;
  serviceId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  starttime?: Maybe<String>;
  starttime_not?: Maybe<String>;
  starttime_in?: Maybe<String[] | String>;
  starttime_not_in?: Maybe<String[] | String>;
  starttime_lt?: Maybe<String>;
  starttime_lte?: Maybe<String>;
  starttime_gt?: Maybe<String>;
  starttime_gte?: Maybe<String>;
  starttime_contains?: Maybe<String>;
  starttime_not_contains?: Maybe<String>;
  starttime_starts_with?: Maybe<String>;
  starttime_not_starts_with?: Maybe<String>;
  starttime_ends_with?: Maybe<String>;
  starttime_not_ends_with?: Maybe<String>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduServiceRecommendWhereInput[] | ChongduServiceRecommendWhereInput
  >;
  OR?: Maybe<
    ChongduServiceRecommendWhereInput[] | ChongduServiceRecommendWhereInput
  >;
  NOT?: Maybe<
    ChongduServiceRecommendWhereInput[] | ChongduServiceRecommendWhereInput
  >;
}

export interface ChongduAppVersionWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  appCode?: Maybe<String>;
  appCode_not?: Maybe<String>;
  appCode_in?: Maybe<String[] | String>;
  appCode_not_in?: Maybe<String[] | String>;
  appCode_lt?: Maybe<String>;
  appCode_lte?: Maybe<String>;
  appCode_gt?: Maybe<String>;
  appCode_gte?: Maybe<String>;
  appCode_contains?: Maybe<String>;
  appCode_not_contains?: Maybe<String>;
  appCode_starts_with?: Maybe<String>;
  appCode_not_starts_with?: Maybe<String>;
  appCode_ends_with?: Maybe<String>;
  appCode_not_ends_with?: Maybe<String>;
  appId?: Maybe<String>;
  appId_not?: Maybe<String>;
  appId_in?: Maybe<String[] | String>;
  appId_not_in?: Maybe<String[] | String>;
  appId_lt?: Maybe<String>;
  appId_lte?: Maybe<String>;
  appId_gt?: Maybe<String>;
  appId_gte?: Maybe<String>;
  appId_contains?: Maybe<String>;
  appId_not_contains?: Maybe<String>;
  appId_starts_with?: Maybe<String>;
  appId_not_starts_with?: Maybe<String>;
  appId_ends_with?: Maybe<String>;
  appId_not_ends_with?: Maybe<String>;
  appVersion?: Maybe<String>;
  appVersion_not?: Maybe<String>;
  appVersion_in?: Maybe<String[] | String>;
  appVersion_not_in?: Maybe<String[] | String>;
  appVersion_lt?: Maybe<String>;
  appVersion_lte?: Maybe<String>;
  appVersion_gt?: Maybe<String>;
  appVersion_gte?: Maybe<String>;
  appVersion_contains?: Maybe<String>;
  appVersion_not_contains?: Maybe<String>;
  appVersion_starts_with?: Maybe<String>;
  appVersion_not_starts_with?: Maybe<String>;
  appVersion_ends_with?: Maybe<String>;
  appVersion_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  deviceType?: Maybe<Int>;
  deviceType_not?: Maybe<Int>;
  deviceType_in?: Maybe<Int[] | Int>;
  deviceType_not_in?: Maybe<Int[] | Int>;
  deviceType_lt?: Maybe<Int>;
  deviceType_lte?: Maybe<Int>;
  deviceType_gt?: Maybe<Int>;
  deviceType_gte?: Maybe<Int>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  forces?: Maybe<Int>;
  forces_not?: Maybe<Int>;
  forces_in?: Maybe<Int[] | Int>;
  forces_not_in?: Maybe<Int[] | Int>;
  forces_lt?: Maybe<Int>;
  forces_lte?: Maybe<Int>;
  forces_gt?: Maybe<Int>;
  forces_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduAppVersionWhereInput[] | ChongduAppVersionWhereInput>;
  OR?: Maybe<ChongduAppVersionWhereInput[] | ChongduAppVersionWhereInput>;
  NOT?: Maybe<ChongduAppVersionWhereInput[] | ChongduAppVersionWhereInput>;
}

export interface ChongduAdminWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  agentAdminId?: Maybe<String>;
  agentAdminId_not?: Maybe<String>;
  agentAdminId_in?: Maybe<String[] | String>;
  agentAdminId_not_in?: Maybe<String[] | String>;
  agentAdminId_lt?: Maybe<String>;
  agentAdminId_lte?: Maybe<String>;
  agentAdminId_gt?: Maybe<String>;
  agentAdminId_gte?: Maybe<String>;
  agentAdminId_contains?: Maybe<String>;
  agentAdminId_not_contains?: Maybe<String>;
  agentAdminId_starts_with?: Maybe<String>;
  agentAdminId_not_starts_with?: Maybe<String>;
  agentAdminId_ends_with?: Maybe<String>;
  agentAdminId_not_ends_with?: Maybe<String>;
  agentId?: Maybe<String>;
  agentId_not?: Maybe<String>;
  agentId_in?: Maybe<String[] | String>;
  agentId_not_in?: Maybe<String[] | String>;
  agentId_lt?: Maybe<String>;
  agentId_lte?: Maybe<String>;
  agentId_gt?: Maybe<String>;
  agentId_gte?: Maybe<String>;
  agentId_contains?: Maybe<String>;
  agentId_not_contains?: Maybe<String>;
  agentId_starts_with?: Maybe<String>;
  agentId_not_starts_with?: Maybe<String>;
  agentId_ends_with?: Maybe<String>;
  agentId_not_ends_with?: Maybe<String>;
  cityCode?: Maybe<String>;
  cityCode_not?: Maybe<String>;
  cityCode_in?: Maybe<String[] | String>;
  cityCode_not_in?: Maybe<String[] | String>;
  cityCode_lt?: Maybe<String>;
  cityCode_lte?: Maybe<String>;
  cityCode_gt?: Maybe<String>;
  cityCode_gte?: Maybe<String>;
  cityCode_contains?: Maybe<String>;
  cityCode_not_contains?: Maybe<String>;
  cityCode_starts_with?: Maybe<String>;
  cityCode_not_starts_with?: Maybe<String>;
  cityCode_ends_with?: Maybe<String>;
  cityCode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  isAuth?: Maybe<Int>;
  isAuth_not?: Maybe<Int>;
  isAuth_in?: Maybe<Int[] | Int>;
  isAuth_not_in?: Maybe<Int[] | Int>;
  isAuth_lt?: Maybe<Int>;
  isAuth_lte?: Maybe<Int>;
  isAuth_gt?: Maybe<Int>;
  isAuth_gte?: Maybe<Int>;
  lastLoginTime?: Maybe<String>;
  lastLoginTime_not?: Maybe<String>;
  lastLoginTime_in?: Maybe<String[] | String>;
  lastLoginTime_not_in?: Maybe<String[] | String>;
  lastLoginTime_lt?: Maybe<String>;
  lastLoginTime_lte?: Maybe<String>;
  lastLoginTime_gt?: Maybe<String>;
  lastLoginTime_gte?: Maybe<String>;
  lastLoginTime_contains?: Maybe<String>;
  lastLoginTime_not_contains?: Maybe<String>;
  lastLoginTime_starts_with?: Maybe<String>;
  lastLoginTime_not_starts_with?: Maybe<String>;
  lastLoginTime_ends_with?: Maybe<String>;
  lastLoginTime_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  mac?: Maybe<String>;
  mac_not?: Maybe<String>;
  mac_in?: Maybe<String[] | String>;
  mac_not_in?: Maybe<String[] | String>;
  mac_lt?: Maybe<String>;
  mac_lte?: Maybe<String>;
  mac_gt?: Maybe<String>;
  mac_gte?: Maybe<String>;
  mac_contains?: Maybe<String>;
  mac_not_contains?: Maybe<String>;
  mac_starts_with?: Maybe<String>;
  mac_not_starts_with?: Maybe<String>;
  mac_ends_with?: Maybe<String>;
  mac_not_ends_with?: Maybe<String>;
  mail?: Maybe<String>;
  mail_not?: Maybe<String>;
  mail_in?: Maybe<String[] | String>;
  mail_not_in?: Maybe<String[] | String>;
  mail_lt?: Maybe<String>;
  mail_lte?: Maybe<String>;
  mail_gt?: Maybe<String>;
  mail_gte?: Maybe<String>;
  mail_contains?: Maybe<String>;
  mail_not_contains?: Maybe<String>;
  mail_starts_with?: Maybe<String>;
  mail_not_starts_with?: Maybe<String>;
  mail_ends_with?: Maybe<String>;
  mail_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  pwd?: Maybe<String>;
  pwd_not?: Maybe<String>;
  pwd_in?: Maybe<String[] | String>;
  pwd_not_in?: Maybe<String[] | String>;
  pwd_lt?: Maybe<String>;
  pwd_lte?: Maybe<String>;
  pwd_gt?: Maybe<String>;
  pwd_gte?: Maybe<String>;
  pwd_contains?: Maybe<String>;
  pwd_not_contains?: Maybe<String>;
  pwd_starts_with?: Maybe<String>;
  pwd_not_starts_with?: Maybe<String>;
  pwd_ends_with?: Maybe<String>;
  pwd_not_ends_with?: Maybe<String>;
  realName?: Maybe<String>;
  realName_not?: Maybe<String>;
  realName_in?: Maybe<String[] | String>;
  realName_not_in?: Maybe<String[] | String>;
  realName_lt?: Maybe<String>;
  realName_lte?: Maybe<String>;
  realName_gt?: Maybe<String>;
  realName_gte?: Maybe<String>;
  realName_contains?: Maybe<String>;
  realName_not_contains?: Maybe<String>;
  realName_starts_with?: Maybe<String>;
  realName_not_starts_with?: Maybe<String>;
  realName_ends_with?: Maybe<String>;
  realName_not_ends_with?: Maybe<String>;
  rt?: Maybe<Int>;
  rt_not?: Maybe<Int>;
  rt_in?: Maybe<Int[] | Int>;
  rt_not_in?: Maybe<Int[] | Int>;
  rt_lt?: Maybe<Int>;
  rt_lte?: Maybe<Int>;
  rt_gt?: Maybe<Int>;
  rt_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  tel?: Maybe<String>;
  tel_not?: Maybe<String>;
  tel_in?: Maybe<String[] | String>;
  tel_not_in?: Maybe<String[] | String>;
  tel_lt?: Maybe<String>;
  tel_lte?: Maybe<String>;
  tel_gt?: Maybe<String>;
  tel_gte?: Maybe<String>;
  tel_contains?: Maybe<String>;
  tel_not_contains?: Maybe<String>;
  tel_starts_with?: Maybe<String>;
  tel_not_starts_with?: Maybe<String>;
  tel_ends_with?: Maybe<String>;
  tel_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  groupId?: Maybe<ChongduRoleGroupWhereInput>;
  AND?: Maybe<ChongduAdminWhereInput[] | ChongduAdminWhereInput>;
  OR?: Maybe<ChongduAdminWhereInput[] | ChongduAdminWhereInput>;
  NOT?: Maybe<ChongduAdminWhereInput[] | ChongduAdminWhereInput>;
}

export interface ChongduUserauthentLogUpdateInput {
  userauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminUpdateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduPetRecommendUpdateInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export type ChongduPetImgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduPetRecommendCreateInput {
  id?: Maybe<Int>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduPetImgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  addr_not?: Maybe<String>;
  addr_in?: Maybe<String[] | String>;
  addr_not_in?: Maybe<String[] | String>;
  addr_lt?: Maybe<String>;
  addr_lte?: Maybe<String>;
  addr_gt?: Maybe<String>;
  addr_gte?: Maybe<String>;
  addr_contains?: Maybe<String>;
  addr_not_contains?: Maybe<String>;
  addr_starts_with?: Maybe<String>;
  addr_not_starts_with?: Maybe<String>;
  addr_ends_with?: Maybe<String>;
  addr_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  imgType?: Maybe<Int>;
  imgType_not?: Maybe<Int>;
  imgType_in?: Maybe<Int[] | Int>;
  imgType_not_in?: Maybe<Int[] | Int>;
  imgType_lt?: Maybe<Int>;
  imgType_lte?: Maybe<Int>;
  imgType_gt?: Maybe<Int>;
  imgType_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  petId?: Maybe<String>;
  petId_not?: Maybe<String>;
  petId_in?: Maybe<String[] | String>;
  petId_not_in?: Maybe<String[] | String>;
  petId_lt?: Maybe<String>;
  petId_lte?: Maybe<String>;
  petId_gt?: Maybe<String>;
  petId_gte?: Maybe<String>;
  petId_contains?: Maybe<String>;
  petId_not_contains?: Maybe<String>;
  petId_starts_with?: Maybe<String>;
  petId_not_starts_with?: Maybe<String>;
  petId_ends_with?: Maybe<String>;
  petId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduPetImgWhereInput[] | ChongduPetImgWhereInput>;
  OR?: Maybe<ChongduPetImgWhereInput[] | ChongduPetImgWhereInput>;
  NOT?: Maybe<ChongduPetImgWhereInput[] | ChongduPetImgWhereInput>;
}

export interface ChongduPetImgUpdateManyMutationInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduUserauthentCreateInput {
  id?: Maybe<ID_Input>;
  authtime?: Maybe<String>;
  backPhoto?: Maybe<String>;
  beginTime?: Maybe<String>;
  birthday?: Maybe<String>;
  cardAddress?: Maybe<String>;
  cardNum?: Maybe<String>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  handPhoto?: Maybe<String>;
  nation?: Maybe<String>;
  realName?: Maybe<String>;
  sex?: Maybe<Int>;
  signFrom?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<ChongduUserCreateOneInput>;
}

export type ChongduServiceTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserFavouriteUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetImgUpdateInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduUserFavouriteCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetImgCreateInput {
  id?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduAppVersionWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPetCardUpdateManyMutationInput {
  birthday?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isSteriliz?: Maybe<Int>;
  name?: Maybe<String>;
  petType?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  sex?: Maybe<Int>;
  userId?: Maybe<String>;
  weight?: Maybe<String>;
}

export interface ChongduUserUpdateInput {
  balance?: Maybe<Float>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hash?: Maybe<String>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isaudit?: Maybe<Int>;
  isauthent?: Maybe<Int>;
  lastlogintime?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  nickname?: Maybe<String>;
  openidDy?: Maybe<String>;
  openidQq?: Maybe<String>;
  openidWx?: Maybe<String>;
  phone?: Maybe<String>;
  regeistType?: Maybe<Int>;
  regtime?: Maybe<String>;
  salt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  updateBy?: Maybe<String>;
  username?: Maybe<String>;
  vip?: Maybe<Int>;
}

export interface ChongduPetCardUpdateInput {
  birthday?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isSteriliz?: Maybe<Int>;
  name?: Maybe<String>;
  petType?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  sex?: Maybe<Int>;
  userId?: Maybe<String>;
  weight?: Maybe<String>;
}

export type ChongduPetTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduServiceauthentLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduTradingAreaCreateInput {
  id?: Maybe<Int>;
  pCityCode?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityName?: Maybe<String>;
  tradingAreaName?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  distance?: Maybe<Float>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
}

export interface ChongduPetCardCreateInput {
  id?: Maybe<Int>;
  birthday?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isSteriliz?: Maybe<Int>;
  name?: Maybe<String>;
  petType?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  sex?: Maybe<Int>;
  userId?: Maybe<String>;
  weight?: Maybe<String>;
}

export interface ChongduTagDetailUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  tagId?: Maybe<Int>;
  worldId?: Maybe<Int>;
}

export interface ChongduServiceauthentLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  serviceauthentId?: Maybe<String>;
  serviceauthentId_not?: Maybe<String>;
  serviceauthentId_in?: Maybe<String[] | String>;
  serviceauthentId_not_in?: Maybe<String[] | String>;
  serviceauthentId_lt?: Maybe<String>;
  serviceauthentId_lte?: Maybe<String>;
  serviceauthentId_gt?: Maybe<String>;
  serviceauthentId_gte?: Maybe<String>;
  serviceauthentId_contains?: Maybe<String>;
  serviceauthentId_not_contains?: Maybe<String>;
  serviceauthentId_starts_with?: Maybe<String>;
  serviceauthentId_not_starts_with?: Maybe<String>;
  serviceauthentId_ends_with?: Maybe<String>;
  serviceauthentId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminWhereInput>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduServiceauthentLogWhereInput[] | ChongduServiceauthentLogWhereInput
  >;
  OR?: Maybe<
    ChongduServiceauthentLogWhereInput[] | ChongduServiceauthentLogWhereInput
  >;
  NOT?: Maybe<
    ChongduServiceauthentLogWhereInput[] | ChongduServiceauthentLogWhereInput
  >;
}

export interface ChongduTagDetailCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  tagId?: Maybe<Int>;
  worldId?: Maybe<Int>;
}

export interface ChongduPetUpdateManyMutationInput {
  addressId?: Maybe<Int>;
  birthday?: Maybe<String>;
  browser?: Maybe<Int>;
  citycode?: Maybe<String>;
  code?: Maybe<String>;
  color?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isMeet?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  pType?: Maybe<Int>;
  sex?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
}

export interface ChongduTagUpdateManyMutationInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduPetTypeUpsertNestedInput {
  update: ChongduPetTypeUpdateDataInput;
  create: ChongduPetTypeCreateInput;
}

export interface ChongduTagCreateInput {
  id?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduPetTypeUpdateDataInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  image?: Maybe<String>;
  level?: Maybe<Int>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  ppid?: Maybe<Int>;
  sort?: Maybe<Int>;
}

export type ChongduPetauthentdetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPetTypeUpdateOneInput {
  create?: Maybe<ChongduPetTypeCreateInput>;
  update?: Maybe<ChongduPetTypeUpdateDataInput>;
  upsert?: Maybe<ChongduPetTypeUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduPetTypeWhereUniqueInput>;
}

export interface ChongduPetauthentdetailWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  audit?: Maybe<Int>;
  audit_not?: Maybe<Int>;
  audit_in?: Maybe<Int[] | Int>;
  audit_not_in?: Maybe<Int[] | Int>;
  audit_lt?: Maybe<Int>;
  audit_lte?: Maybe<Int>;
  audit_gt?: Maybe<Int>;
  audit_gte?: Maybe<Int>;
  authtime?: Maybe<String>;
  authtime_not?: Maybe<String>;
  authtime_in?: Maybe<String[] | String>;
  authtime_not_in?: Maybe<String[] | String>;
  authtime_lt?: Maybe<String>;
  authtime_lte?: Maybe<String>;
  authtime_gt?: Maybe<String>;
  authtime_gte?: Maybe<String>;
  authtime_contains?: Maybe<String>;
  authtime_not_contains?: Maybe<String>;
  authtime_starts_with?: Maybe<String>;
  authtime_not_starts_with?: Maybe<String>;
  authtime_ends_with?: Maybe<String>;
  authtime_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  petid?: Maybe<ChongduPetWhereInput>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  userid?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<
    ChongduPetauthentdetailWhereInput[] | ChongduPetauthentdetailWhereInput
  >;
  OR?: Maybe<
    ChongduPetauthentdetailWhereInput[] | ChongduPetauthentdetailWhereInput
  >;
  NOT?: Maybe<
    ChongduPetauthentdetailWhereInput[] | ChongduPetauthentdetailWhereInput
  >;
}

export type ChongduStatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduServiceauthentLogUpdateManyMutationInput {
  serviceauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduPetUpdateInput {
  addressId?: Maybe<Int>;
  birthday?: Maybe<String>;
  browser?: Maybe<Int>;
  citycode?: Maybe<String>;
  code?: Maybe<String>;
  color?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isMeet?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  pType?: Maybe<Int>;
  sex?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduPetTypeUpdateOneInput>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
}

export interface ChongduServiceauthentLogCreateInput {
  id?: Maybe<Int>;
  serviceauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminCreateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduStatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  agentId?: Maybe<String>;
  agentId_not?: Maybe<String>;
  agentId_in?: Maybe<String[] | String>;
  agentId_not_in?: Maybe<String[] | String>;
  agentId_lt?: Maybe<String>;
  agentId_lte?: Maybe<String>;
  agentId_gt?: Maybe<String>;
  agentId_gte?: Maybe<String>;
  agentId_contains?: Maybe<String>;
  agentId_not_contains?: Maybe<String>;
  agentId_starts_with?: Maybe<String>;
  agentId_not_starts_with?: Maybe<String>;
  agentId_ends_with?: Maybe<String>;
  agentId_not_ends_with?: Maybe<String>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  num?: Maybe<Int>;
  num_not?: Maybe<Int>;
  num_in?: Maybe<Int[] | Int>;
  num_not_in?: Maybe<Int[] | Int>;
  num_lt?: Maybe<Int>;
  num_lte?: Maybe<Int>;
  num_gt?: Maybe<Int>;
  num_gte?: Maybe<Int>;
  satus?: Maybe<Int>;
  satus_not?: Maybe<Int>;
  satus_in?: Maybe<Int[] | Int>;
  satus_not_in?: Maybe<Int[] | Int>;
  satus_lt?: Maybe<Int>;
  satus_lte?: Maybe<Int>;
  satus_gt?: Maybe<Int>;
  satus_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduStatWhereInput[] | ChongduStatWhereInput>;
  OR?: Maybe<ChongduStatWhereInput[] | ChongduStatWhereInput>;
  NOT?: Maybe<ChongduStatWhereInput[] | ChongduStatWhereInput>;
}

export interface ChongduServiceTypeUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduPetTypeCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  image?: Maybe<String>;
  level?: Maybe<Int>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  ppid?: Maybe<Int>;
  sort?: Maybe<Int>;
}

export interface ChongduAgentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduAgentWhereInput[] | ChongduAgentWhereInput>;
  OR?: Maybe<ChongduAgentWhereInput[] | ChongduAgentWhereInput>;
  NOT?: Maybe<ChongduAgentWhereInput[] | ChongduAgentWhereInput>;
}

export interface ChongduPetTypeCreateOneInput {
  create?: Maybe<ChongduPetTypeCreateInput>;
  connect?: Maybe<ChongduPetTypeWhereUniqueInput>;
}

export interface ChongduServiceRecommendUpdateManyMutationInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  s?: Maybe<Int>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduPetCreateInput {
  id?: Maybe<ID_Input>;
  addressId?: Maybe<Int>;
  birthday?: Maybe<String>;
  browser?: Maybe<Int>;
  citycode?: Maybe<String>;
  code?: Maybe<String>;
  color?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  isMeet?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  pType?: Maybe<Int>;
  sex?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduPetTypeCreateOneInput>;
  userId?: Maybe<ChongduUserCreateOneInput>;
}

export type ChongduPlatformExecuteWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPermissionUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  name?: Maybe<String>;
  parentId?: Maybe<String>;
  parentIds?: Maybe<String>;
  permission?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduPlatformExecuteWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  business?: Maybe<Int>;
  business_not?: Maybe<Int>;
  business_in?: Maybe<Int[] | Int>;
  business_not_in?: Maybe<Int[] | Int>;
  business_lt?: Maybe<Int>;
  business_lte?: Maybe<Int>;
  business_gt?: Maybe<Int>;
  business_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  endtime?: Maybe<String>;
  endtime_not?: Maybe<String>;
  endtime_in?: Maybe<String[] | String>;
  endtime_not_in?: Maybe<String[] | String>;
  endtime_lt?: Maybe<String>;
  endtime_lte?: Maybe<String>;
  endtime_gt?: Maybe<String>;
  endtime_gte?: Maybe<String>;
  endtime_contains?: Maybe<String>;
  endtime_not_contains?: Maybe<String>;
  endtime_starts_with?: Maybe<String>;
  endtime_not_starts_with?: Maybe<String>;
  endtime_ends_with?: Maybe<String>;
  endtime_not_ends_with?: Maybe<String>;
  money?: Maybe<Float>;
  money_not?: Maybe<Float>;
  money_in?: Maybe<Float[] | Float>;
  money_not_in?: Maybe<Float[] | Float>;
  money_lt?: Maybe<Float>;
  money_lte?: Maybe<Float>;
  money_gt?: Maybe<Float>;
  money_gte?: Maybe<Float>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  oneprice?: Maybe<Float>;
  oneprice_not?: Maybe<Float>;
  oneprice_in?: Maybe<Float[] | Float>;
  oneprice_not_in?: Maybe<Float[] | Float>;
  oneprice_lt?: Maybe<Float>;
  oneprice_lte?: Maybe<Float>;
  oneprice_gt?: Maybe<Float>;
  oneprice_gte?: Maybe<Float>;
  relateId?: Maybe<Int>;
  relateId_not?: Maybe<Int>;
  relateId_in?: Maybe<Int[] | Int>;
  relateId_not_in?: Maybe<Int[] | Int>;
  relateId_lt?: Maybe<Int>;
  relateId_lte?: Maybe<Int>;
  relateId_gt?: Maybe<Int>;
  relateId_gte?: Maybe<Int>;
  relateType?: Maybe<Int>;
  relateType_not?: Maybe<Int>;
  relateType_in?: Maybe<Int[] | Int>;
  relateType_not_in?: Maybe<Int[] | Int>;
  relateType_lt?: Maybe<Int>;
  relateType_lte?: Maybe<Int>;
  relateType_gt?: Maybe<Int>;
  relateType_gte?: Maybe<Int>;
  residue?: Maybe<Int>;
  residue_not?: Maybe<Int>;
  residue_in?: Maybe<Int[] | Int>;
  residue_not_in?: Maybe<Int[] | Int>;
  residue_lt?: Maybe<Int>;
  residue_lte?: Maybe<Int>;
  residue_gt?: Maybe<Int>;
  residue_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  starttime?: Maybe<String>;
  starttime_not?: Maybe<String>;
  starttime_in?: Maybe<String[] | String>;
  starttime_not_in?: Maybe<String[] | String>;
  starttime_lt?: Maybe<String>;
  starttime_lte?: Maybe<String>;
  starttime_gt?: Maybe<String>;
  starttime_gte?: Maybe<String>;
  starttime_contains?: Maybe<String>;
  starttime_not_contains?: Maybe<String>;
  starttime_starts_with?: Maybe<String>;
  starttime_not_starts_with?: Maybe<String>;
  starttime_ends_with?: Maybe<String>;
  starttime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  timestep?: Maybe<String>;
  timestep_not?: Maybe<String>;
  timestep_in?: Maybe<String[] | String>;
  timestep_not_in?: Maybe<String[] | String>;
  timestep_lt?: Maybe<String>;
  timestep_lte?: Maybe<String>;
  timestep_gt?: Maybe<String>;
  timestep_gte?: Maybe<String>;
  timestep_contains?: Maybe<String>;
  timestep_not_contains?: Maybe<String>;
  timestep_starts_with?: Maybe<String>;
  timestep_not_starts_with?: Maybe<String>;
  timestep_ends_with?: Maybe<String>;
  timestep_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userarea?: Maybe<String>;
  userarea_not?: Maybe<String>;
  userarea_in?: Maybe<String[] | String>;
  userarea_not_in?: Maybe<String[] | String>;
  userarea_lt?: Maybe<String>;
  userarea_lte?: Maybe<String>;
  userarea_gt?: Maybe<String>;
  userarea_gte?: Maybe<String>;
  userarea_contains?: Maybe<String>;
  userarea_not_contains?: Maybe<String>;
  userarea_starts_with?: Maybe<String>;
  userarea_not_starts_with?: Maybe<String>;
  userarea_ends_with?: Maybe<String>;
  userarea_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduPlatformExecuteWhereInput[] | ChongduPlatformExecuteWhereInput
  >;
  OR?: Maybe<
    ChongduPlatformExecuteWhereInput[] | ChongduPlatformExecuteWhereInput
  >;
  NOT?: Maybe<
    ChongduPlatformExecuteWhereInput[] | ChongduPlatformExecuteWhereInput
  >;
}

export type ChongduTagWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduServicePettypeUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  level?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  serviceId?: Maybe<String>;
}

export interface ChongduPermissionUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  name?: Maybe<String>;
  parentId?: Maybe<String>;
  parentIds?: Maybe<String>;
  permission?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduServiceImgUpdateManyMutationInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  serviceId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduTagWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  petCardId_not?: Maybe<Int>;
  petCardId_in?: Maybe<Int[] | Int>;
  petCardId_not_in?: Maybe<Int[] | Int>;
  petCardId_lt?: Maybe<Int>;
  petCardId_lte?: Maybe<Int>;
  petCardId_gt?: Maybe<Int>;
  petCardId_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  worldId?: Maybe<Int>;
  worldId_not?: Maybe<Int>;
  worldId_in?: Maybe<Int[] | Int>;
  worldId_not_in?: Maybe<Int[] | Int>;
  worldId_lt?: Maybe<Int>;
  worldId_lte?: Maybe<Int>;
  worldId_gt?: Maybe<Int>;
  worldId_gte?: Maybe<Int>;
  AND?: Maybe<ChongduTagWhereInput[] | ChongduTagWhereInput>;
  OR?: Maybe<ChongduTagWhereInput[] | ChongduTagWhereInput>;
  NOT?: Maybe<ChongduTagWhereInput[] | ChongduTagWhereInput>;
}

export interface ChongduServiceImgUpdateInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  serviceId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduAdminWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduServiceAuthentdetailUpdateManyMutationInput {
  audit?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduPermissionCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  name?: Maybe<String>;
  parentId?: Maybe<String>;
  parentIds?: Maybe<String>;
  permission?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduProductBrandWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  firstLetter?: Maybe<String>;
  firstLetter_not?: Maybe<String>;
  firstLetter_in?: Maybe<String[] | String>;
  firstLetter_not_in?: Maybe<String[] | String>;
  firstLetter_lt?: Maybe<String>;
  firstLetter_lte?: Maybe<String>;
  firstLetter_gt?: Maybe<String>;
  firstLetter_gte?: Maybe<String>;
  firstLetter_contains?: Maybe<String>;
  firstLetter_not_contains?: Maybe<String>;
  firstLetter_starts_with?: Maybe<String>;
  firstLetter_not_starts_with?: Maybe<String>;
  firstLetter_ends_with?: Maybe<String>;
  firstLetter_not_ends_with?: Maybe<String>;
  logoImg?: Maybe<String>;
  logoImg_not?: Maybe<String>;
  logoImg_in?: Maybe<String[] | String>;
  logoImg_not_in?: Maybe<String[] | String>;
  logoImg_lt?: Maybe<String>;
  logoImg_lte?: Maybe<String>;
  logoImg_gt?: Maybe<String>;
  logoImg_gte?: Maybe<String>;
  logoImg_contains?: Maybe<String>;
  logoImg_not_contains?: Maybe<String>;
  logoImg_starts_with?: Maybe<String>;
  logoImg_not_starts_with?: Maybe<String>;
  logoImg_ends_with?: Maybe<String>;
  logoImg_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduProductBrandWhereInput[] | ChongduProductBrandWhereInput>;
  OR?: Maybe<ChongduProductBrandWhereInput[] | ChongduProductBrandWhereInput>;
  NOT?: Maybe<ChongduProductBrandWhereInput[] | ChongduProductBrandWhereInput>;
}

export interface ChongduPayInfoUpdateManyMutationInput {
  ct?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  payNo?: Maybe<String>;
  payPlatform?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduAgentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduPayInfoUpdateInput {
  ct?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  payNo?: Maybe<String>;
  payPlatform?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServiceAuthentdetailCreateInput {
  id?: Maybe<Int>;
  audit?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export type ChongduTagDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduProductAuthentdetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPayInfoCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  payNo?: Maybe<String>;
  payPlatform?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduProductAuthentdetailWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  audit?: Maybe<Int>;
  audit_not?: Maybe<Int>;
  audit_in?: Maybe<Int[] | Int>;
  audit_not_in?: Maybe<Int[] | Int>;
  audit_lt?: Maybe<Int>;
  audit_lte?: Maybe<Int>;
  audit_gt?: Maybe<Int>;
  audit_gte?: Maybe<Int>;
  audittime?: Maybe<String>;
  audittime_not?: Maybe<String>;
  audittime_in?: Maybe<String[] | String>;
  audittime_not_in?: Maybe<String[] | String>;
  audittime_lt?: Maybe<String>;
  audittime_lte?: Maybe<String>;
  audittime_gt?: Maybe<String>;
  audittime_gte?: Maybe<String>;
  audittime_contains?: Maybe<String>;
  audittime_not_contains?: Maybe<String>;
  audittime_starts_with?: Maybe<String>;
  audittime_not_starts_with?: Maybe<String>;
  audittime_ends_with?: Maybe<String>;
  audittime_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  productId?: Maybe<ChongduProductWhereInput>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<
    | ChongduProductAuthentdetailWhereInput[]
    | ChongduProductAuthentdetailWhereInput
  >;
  OR?: Maybe<
    | ChongduProductAuthentdetailWhereInput[]
    | ChongduProductAuthentdetailWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductAuthentdetailWhereInput[]
    | ChongduProductAuthentdetailWhereInput
  >;
}

export interface ChongduTagDetailWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  petCardId_not?: Maybe<Int>;
  petCardId_in?: Maybe<Int[] | Int>;
  petCardId_not_in?: Maybe<Int[] | Int>;
  petCardId_lt?: Maybe<Int>;
  petCardId_lte?: Maybe<Int>;
  petCardId_gt?: Maybe<Int>;
  petCardId_gte?: Maybe<Int>;
  tagId?: Maybe<Int>;
  tagId_not?: Maybe<Int>;
  tagId_in?: Maybe<Int[] | Int>;
  tagId_not_in?: Maybe<Int[] | Int>;
  tagId_lt?: Maybe<Int>;
  tagId_lte?: Maybe<Int>;
  tagId_gt?: Maybe<Int>;
  tagId_gte?: Maybe<Int>;
  worldId?: Maybe<Int>;
  worldId_not?: Maybe<Int>;
  worldId_in?: Maybe<Int[] | Int>;
  worldId_not_in?: Maybe<Int[] | Int>;
  worldId_lt?: Maybe<Int>;
  worldId_lte?: Maybe<Int>;
  worldId_gt?: Maybe<Int>;
  worldId_gte?: Maybe<Int>;
  AND?: Maybe<ChongduTagDetailWhereInput[] | ChongduTagDetailWhereInput>;
  OR?: Maybe<ChongduTagDetailWhereInput[] | ChongduTagDetailWhereInput>;
  NOT?: Maybe<ChongduTagDetailWhereInput[] | ChongduTagDetailWhereInput>;
}

export interface ChongduServiceTypeUpdateOneInput {
  create?: Maybe<ChongduServiceTypeCreateInput>;
  update?: Maybe<ChongduServiceTypeUpdateDataInput>;
  upsert?: Maybe<ChongduServiceTypeUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduServiceTypeWhereUniqueInput>;
}

export interface ChongduOrderstatisticUpdateManyMutationInput {
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduServiceTypeCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduOrderstatisticUpdateInput {
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduServiceTypeCreateOneInput {
  create?: Maybe<ChongduServiceTypeCreateInput>;
  connect?: Maybe<ChongduServiceTypeWhereUniqueInput>;
}

export interface ChongduOrderstatisticCreateInput {
  id?: Maybe<Int>;
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduSearchthinkUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hot?: Maybe<Int>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduOrderserialUpdateManyMutationInput {
  context?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  orderid?: Maybe<Int>;
  ordersn?: Maybe<String>;
  platformtype?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export type ChongduProductImgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ChongduTradingAreaWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductImgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  addr_not?: Maybe<String>;
  addr_in?: Maybe<String[] | String>;
  addr_not_in?: Maybe<String[] | String>;
  addr_lt?: Maybe<String>;
  addr_lte?: Maybe<String>;
  addr_gt?: Maybe<String>;
  addr_gte?: Maybe<String>;
  addr_contains?: Maybe<String>;
  addr_not_contains?: Maybe<String>;
  addr_starts_with?: Maybe<String>;
  addr_not_starts_with?: Maybe<String>;
  addr_ends_with?: Maybe<String>;
  addr_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  imgType?: Maybe<Int>;
  imgType_not?: Maybe<Int>;
  imgType_in?: Maybe<Int[] | Int>;
  imgType_not_in?: Maybe<Int[] | Int>;
  imgType_lt?: Maybe<Int>;
  imgType_lte?: Maybe<Int>;
  imgType_gt?: Maybe<Int>;
  imgType_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduProductImgWhereInput[] | ChongduProductImgWhereInput>;
  OR?: Maybe<ChongduProductImgWhereInput[] | ChongduProductImgWhereInput>;
  NOT?: Maybe<ChongduProductImgWhereInput[] | ChongduProductImgWhereInput>;
}

export interface ChongduOrderserialUpdateInput {
  context?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  orderid?: Maybe<Int>;
  ordersn?: Maybe<String>;
  platformtype?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduRoleMenuUpsertNestedInput {
  update: ChongduRoleMenuUpdateDataInput;
  create: ChongduRoleMenuCreateInput;
}

export interface ChongduTradingAreaWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  pCityCode?: Maybe<Int>;
  pCityCode_not?: Maybe<Int>;
  pCityCode_in?: Maybe<Int[] | Int>;
  pCityCode_not_in?: Maybe<Int[] | Int>;
  pCityCode_lt?: Maybe<Int>;
  pCityCode_lte?: Maybe<Int>;
  pCityCode_gt?: Maybe<Int>;
  pCityCode_gte?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityCode_not?: Maybe<String>;
  cityCode_in?: Maybe<String[] | String>;
  cityCode_not_in?: Maybe<String[] | String>;
  cityCode_lt?: Maybe<String>;
  cityCode_lte?: Maybe<String>;
  cityCode_gt?: Maybe<String>;
  cityCode_gte?: Maybe<String>;
  cityCode_contains?: Maybe<String>;
  cityCode_not_contains?: Maybe<String>;
  cityCode_starts_with?: Maybe<String>;
  cityCode_not_starts_with?: Maybe<String>;
  cityCode_ends_with?: Maybe<String>;
  cityCode_not_ends_with?: Maybe<String>;
  cityName?: Maybe<String>;
  cityName_not?: Maybe<String>;
  cityName_in?: Maybe<String[] | String>;
  cityName_not_in?: Maybe<String[] | String>;
  cityName_lt?: Maybe<String>;
  cityName_lte?: Maybe<String>;
  cityName_gt?: Maybe<String>;
  cityName_gte?: Maybe<String>;
  cityName_contains?: Maybe<String>;
  cityName_not_contains?: Maybe<String>;
  cityName_starts_with?: Maybe<String>;
  cityName_not_starts_with?: Maybe<String>;
  cityName_ends_with?: Maybe<String>;
  cityName_not_ends_with?: Maybe<String>;
  tradingAreaName?: Maybe<String>;
  tradingAreaName_not?: Maybe<String>;
  tradingAreaName_in?: Maybe<String[] | String>;
  tradingAreaName_not_in?: Maybe<String[] | String>;
  tradingAreaName_lt?: Maybe<String>;
  tradingAreaName_lte?: Maybe<String>;
  tradingAreaName_gt?: Maybe<String>;
  tradingAreaName_gte?: Maybe<String>;
  tradingAreaName_contains?: Maybe<String>;
  tradingAreaName_not_contains?: Maybe<String>;
  tradingAreaName_starts_with?: Maybe<String>;
  tradingAreaName_not_starts_with?: Maybe<String>;
  tradingAreaName_ends_with?: Maybe<String>;
  tradingAreaName_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  distance?: Maybe<Float>;
  distance_not?: Maybe<Float>;
  distance_in?: Maybe<Float[] | Float>;
  distance_not_in?: Maybe<Float[] | Float>;
  distance_lt?: Maybe<Float>;
  distance_lte?: Maybe<Float>;
  distance_gt?: Maybe<Float>;
  distance_gte?: Maybe<Float>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduTradingAreaWhereInput[] | ChongduTradingAreaWhereInput>;
  OR?: Maybe<ChongduTradingAreaWhereInput[] | ChongduTradingAreaWhereInput>;
  NOT?: Maybe<ChongduTradingAreaWhereInput[] | ChongduTradingAreaWhereInput>;
}

export interface ChongduRoleMenuUpdateOneInput {
  create?: Maybe<ChongduRoleMenuCreateInput>;
  update?: Maybe<ChongduRoleMenuUpdateDataInput>;
  upsert?: Maybe<ChongduRoleMenuUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduRoleMenuWhereUniqueInput>;
}

export interface ChongduOrderserialCreateInput {
  id?: Maybe<Int>;
  context?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  orderid?: Maybe<Int>;
  ordersn?: Maybe<String>;
  platformtype?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduRoleMenuChildrenUpdateInput {
  menuId?: Maybe<ChongduRoleMenuUpdateOneInput>;
  action?: Maybe<String>;
  authName?: Maybe<String>;
  menuUrlName?: Maybe<String>;
}

export interface ChongduOrderinvoicedetailUpdateManyMutationInput {
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  invoiceid?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduAdviceWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  useid?: Maybe<String>;
  useid_not?: Maybe<String>;
  useid_in?: Maybe<String[] | String>;
  useid_not_in?: Maybe<String[] | String>;
  useid_lt?: Maybe<String>;
  useid_lte?: Maybe<String>;
  useid_gt?: Maybe<String>;
  useid_gte?: Maybe<String>;
  useid_contains?: Maybe<String>;
  useid_not_contains?: Maybe<String>;
  useid_starts_with?: Maybe<String>;
  useid_not_starts_with?: Maybe<String>;
  useid_ends_with?: Maybe<String>;
  useid_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduAdviceWhereInput[] | ChongduAdviceWhereInput>;
  OR?: Maybe<ChongduAdviceWhereInput[] | ChongduAdviceWhereInput>;
  NOT?: Maybe<ChongduAdviceWhereInput[] | ChongduAdviceWhereInput>;
}

export interface ChongduOrderinvoicedetailUpdateInput {
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  invoiceid?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduRoleMenuChildrenCreateInput {
  id?: Maybe<Int>;
  menuId?: Maybe<ChongduRoleMenuCreateOneInput>;
  action?: Maybe<String>;
  authName?: Maybe<String>;
  menuUrlName?: Maybe<String>;
}

export interface ChongduOrderinvoicedetailCreateInput {
  id?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  invoiceid?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export type ChongduProductRecommendWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduUserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduProductRecommendWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceid?: Maybe<String>;
  deviceid_not?: Maybe<String>;
  deviceid_in?: Maybe<String[] | String>;
  deviceid_not_in?: Maybe<String[] | String>;
  deviceid_lt?: Maybe<String>;
  deviceid_lte?: Maybe<String>;
  deviceid_gt?: Maybe<String>;
  deviceid_gte?: Maybe<String>;
  deviceid_contains?: Maybe<String>;
  deviceid_not_contains?: Maybe<String>;
  deviceid_starts_with?: Maybe<String>;
  deviceid_not_starts_with?: Maybe<String>;
  deviceid_ends_with?: Maybe<String>;
  deviceid_not_ends_with?: Maybe<String>;
  devicename?: Maybe<String>;
  devicename_not?: Maybe<String>;
  devicename_in?: Maybe<String[] | String>;
  devicename_not_in?: Maybe<String[] | String>;
  devicename_lt?: Maybe<String>;
  devicename_lte?: Maybe<String>;
  devicename_gt?: Maybe<String>;
  devicename_gte?: Maybe<String>;
  devicename_contains?: Maybe<String>;
  devicename_not_contains?: Maybe<String>;
  devicename_starts_with?: Maybe<String>;
  devicename_not_starts_with?: Maybe<String>;
  devicename_ends_with?: Maybe<String>;
  devicename_not_ends_with?: Maybe<String>;
  devicetype?: Maybe<Int>;
  devicetype_not?: Maybe<Int>;
  devicetype_in?: Maybe<Int[] | Int>;
  devicetype_not_in?: Maybe<Int[] | Int>;
  devicetype_lt?: Maybe<Int>;
  devicetype_lte?: Maybe<Int>;
  devicetype_gt?: Maybe<Int>;
  devicetype_gte?: Maybe<Int>;
  endtime?: Maybe<String>;
  endtime_not?: Maybe<String>;
  endtime_in?: Maybe<String[] | String>;
  endtime_not_in?: Maybe<String[] | String>;
  endtime_lt?: Maybe<String>;
  endtime_lte?: Maybe<String>;
  endtime_gt?: Maybe<String>;
  endtime_gte?: Maybe<String>;
  endtime_contains?: Maybe<String>;
  endtime_not_contains?: Maybe<String>;
  endtime_starts_with?: Maybe<String>;
  endtime_not_starts_with?: Maybe<String>;
  endtime_ends_with?: Maybe<String>;
  endtime_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  starttime?: Maybe<String>;
  starttime_not?: Maybe<String>;
  starttime_in?: Maybe<String[] | String>;
  starttime_not_in?: Maybe<String[] | String>;
  starttime_lt?: Maybe<String>;
  starttime_lte?: Maybe<String>;
  starttime_gt?: Maybe<String>;
  starttime_gte?: Maybe<String>;
  starttime_contains?: Maybe<String>;
  starttime_not_contains?: Maybe<String>;
  starttime_starts_with?: Maybe<String>;
  starttime_not_starts_with?: Maybe<String>;
  starttime_ends_with?: Maybe<String>;
  starttime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduProductRecommendWhereInput[] | ChongduProductRecommendWhereInput
  >;
  OR?: Maybe<
    ChongduProductRecommendWhereInput[] | ChongduProductRecommendWhereInput
  >;
  NOT?: Maybe<
    ChongduProductRecommendWhereInput[] | ChongduProductRecommendWhereInput
  >;
}

export interface ChongduOrderinvoiceUpdateManyMutationInput {
  accountnum?: Maybe<String>;
  addressid?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  head?: Maybe<String>;
  invoicename?: Maybe<String>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  nature?: Maybe<Int>;
  orderid?: Maybe<String>;
  phone?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
  usernum?: Maybe<String>;
}

export interface ChongduRoleGroupUpdateManyMutationInput {
  userId?: Maybe<String>;
  roleName?: Maybe<String>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
}

export interface ChongduOrderinvoiceUpdateInput {
  accountnum?: Maybe<String>;
  addressid?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  head?: Maybe<String>;
  invoicename?: Maybe<String>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  nature?: Maybe<Int>;
  orderid?: Maybe<String>;
  phone?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
  usernum?: Maybe<String>;
}

export interface ChongduRoleDetailUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  modeldetailId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  roleId?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduOrderinvoiceCreateInput {
  id?: Maybe<Int>;
  accountnum?: Maybe<String>;
  addressid?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  head?: Maybe<String>;
  invoicename?: Maybe<String>;
  money?: Maybe<Float>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  nature?: Maybe<Int>;
  orderid?: Maybe<String>;
  phone?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
  usernum?: Maybe<String>;
}

export interface ChongduRoleDetailUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  modeldetailId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  roleId?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduOrderItemUpdateManyMutationInput {
  closeTime?: Maybe<String>;
  ct?: Maybe<String>;
  currentPrice?: Maybe<Float>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  image?: Maybe<String>;
  merchantId?: Maybe<String>;
  merOrderNo?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  paymentTime?: Maybe<String>;
  paymentType?: Maybe<Int>;
  postage?: Maybe<Float>;
  productId?: Maybe<String>;
  productName?: Maybe<String>;
  quantity?: Maybe<Int>;
  remark?: Maybe<String>;
  reStatus?: Maybe<Int>;
  sendTime?: Maybe<String>;
  status?: Maybe<Int>;
  totalPrice?: Maybe<Float>;
  userId?: Maybe<String>;
}

export type ChongduAdviceWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduUserFavouriteWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduRoleAuthUpdateManyMutationInput {
  userId?: Maybe<String>;
  action?: Maybe<String>;
  method?: Maybe<String>;
  operationName?: Maybe<String>;
}

export interface ChongduOrderItemUpdateInput {
  closeTime?: Maybe<String>;
  ct?: Maybe<String>;
  currentPrice?: Maybe<Float>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  image?: Maybe<String>;
  merchantId?: Maybe<String>;
  merOrderNo?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  paymentTime?: Maybe<String>;
  paymentType?: Maybe<Int>;
  postage?: Maybe<Float>;
  productId?: Maybe<String>;
  productName?: Maybe<String>;
  quantity?: Maybe<Int>;
  remark?: Maybe<String>;
  reStatus?: Maybe<Int>;
  sendTime?: Maybe<String>;
  status?: Maybe<Int>;
  totalPrice?: Maybe<Float>;
  userId?: Maybe<String>;
}

export type ChongduProductTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserFavouriteWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  relateId?: Maybe<String>;
  relateId_not?: Maybe<String>;
  relateId_in?: Maybe<String[] | String>;
  relateId_not_in?: Maybe<String[] | String>;
  relateId_lt?: Maybe<String>;
  relateId_lte?: Maybe<String>;
  relateId_gt?: Maybe<String>;
  relateId_gte?: Maybe<String>;
  relateId_contains?: Maybe<String>;
  relateId_not_contains?: Maybe<String>;
  relateId_starts_with?: Maybe<String>;
  relateId_not_starts_with?: Maybe<String>;
  relateId_ends_with?: Maybe<String>;
  relateId_not_ends_with?: Maybe<String>;
  relateType?: Maybe<Int>;
  relateType_not?: Maybe<Int>;
  relateType_in?: Maybe<Int[] | Int>;
  relateType_not_in?: Maybe<Int[] | Int>;
  relateType_lt?: Maybe<Int>;
  relateType_lte?: Maybe<Int>;
  relateType_gt?: Maybe<Int>;
  relateType_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduUserFavouriteWhereInput[] | ChongduUserFavouriteWhereInput
  >;
  OR?: Maybe<ChongduUserFavouriteWhereInput[] | ChongduUserFavouriteWhereInput>;
  NOT?: Maybe<
    ChongduUserFavouriteWhereInput[] | ChongduUserFavouriteWhereInput
  >;
}

export interface ChongduWorldShieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduWorldShieldWhereInput>;
  AND?: Maybe<
    | ChongduWorldShieldSubscriptionWhereInput[]
    | ChongduWorldShieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduWorldShieldSubscriptionWhereInput[]
    | ChongduWorldShieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduWorldShieldSubscriptionWhereInput[]
    | ChongduWorldShieldSubscriptionWhereInput
  >;
}

export interface ChongduAddressRelationWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  detailAdd_not?: Maybe<String>;
  detailAdd_in?: Maybe<String[] | String>;
  detailAdd_not_in?: Maybe<String[] | String>;
  detailAdd_lt?: Maybe<String>;
  detailAdd_lte?: Maybe<String>;
  detailAdd_gt?: Maybe<String>;
  detailAdd_gte?: Maybe<String>;
  detailAdd_contains?: Maybe<String>;
  detailAdd_not_contains?: Maybe<String>;
  detailAdd_starts_with?: Maybe<String>;
  detailAdd_not_starts_with?: Maybe<String>;
  detailAdd_ends_with?: Maybe<String>;
  detailAdd_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  province?: Maybe<String>;
  province_not?: Maybe<String>;
  province_in?: Maybe<String[] | String>;
  province_not_in?: Maybe<String[] | String>;
  province_lt?: Maybe<String>;
  province_lte?: Maybe<String>;
  province_gt?: Maybe<String>;
  province_gte?: Maybe<String>;
  province_contains?: Maybe<String>;
  province_not_contains?: Maybe<String>;
  province_starts_with?: Maybe<String>;
  province_not_starts_with?: Maybe<String>;
  province_ends_with?: Maybe<String>;
  province_not_ends_with?: Maybe<String>;
  region?: Maybe<String>;
  region_not?: Maybe<String>;
  region_in?: Maybe<String[] | String>;
  region_not_in?: Maybe<String[] | String>;
  region_lt?: Maybe<String>;
  region_lte?: Maybe<String>;
  region_gt?: Maybe<String>;
  region_gte?: Maybe<String>;
  region_contains?: Maybe<String>;
  region_not_contains?: Maybe<String>;
  region_starts_with?: Maybe<String>;
  region_not_starts_with?: Maybe<String>;
  region_ends_with?: Maybe<String>;
  region_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  tel?: Maybe<String>;
  tel_not?: Maybe<String>;
  tel_in?: Maybe<String[] | String>;
  tel_not_in?: Maybe<String[] | String>;
  tel_lt?: Maybe<String>;
  tel_lte?: Maybe<String>;
  tel_gt?: Maybe<String>;
  tel_gte?: Maybe<String>;
  tel_contains?: Maybe<String>;
  tel_not_contains?: Maybe<String>;
  tel_starts_with?: Maybe<String>;
  tel_not_starts_with?: Maybe<String>;
  tel_ends_with?: Maybe<String>;
  tel_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduAddressRelationWhereInput[] | ChongduAddressRelationWhereInput
  >;
  OR?: Maybe<
    ChongduAddressRelationWhereInput[] | ChongduAddressRelationWhereInput
  >;
  NOT?: Maybe<
    ChongduAddressRelationWhereInput[] | ChongduAddressRelationWhereInput
  >;
}

export interface ChongduCommentPraiseWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  relateId?: Maybe<Int>;
  relateId_not?: Maybe<Int>;
  relateId_in?: Maybe<Int[] | Int>;
  relateId_not_in?: Maybe<Int[] | Int>;
  relateId_lt?: Maybe<Int>;
  relateId_lte?: Maybe<Int>;
  relateId_gt?: Maybe<Int>;
  relateId_gte?: Maybe<Int>;
  relateType?: Maybe<Int>;
  relateType_not?: Maybe<Int>;
  relateType_in?: Maybe<Int[] | Int>;
  relateType_not_in?: Maybe<Int[] | Int>;
  relateType_lt?: Maybe<Int>;
  relateType_lte?: Maybe<Int>;
  relateType_gt?: Maybe<Int>;
  relateType_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduCommentPraiseWhereInput[] | ChongduCommentPraiseWhereInput
  >;
  OR?: Maybe<ChongduCommentPraiseWhereInput[] | ChongduCommentPraiseWhereInput>;
  NOT?: Maybe<
    ChongduCommentPraiseWhereInput[] | ChongduCommentPraiseWhereInput
  >;
}

export interface ChongduOrderItemCreateInput {
  id?: Maybe<Int>;
  closeTime?: Maybe<String>;
  ct?: Maybe<String>;
  currentPrice?: Maybe<Float>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  image?: Maybe<String>;
  merchantId?: Maybe<String>;
  merOrderNo?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  paymentTime?: Maybe<String>;
  paymentType?: Maybe<Int>;
  postage?: Maybe<Float>;
  productId?: Maybe<String>;
  productName?: Maybe<String>;
  quantity?: Maybe<Int>;
  remark?: Maybe<String>;
  reStatus?: Maybe<Int>;
  sendTime?: Maybe<String>;
  status?: Maybe<Int>;
  totalPrice?: Maybe<Float>;
  userId?: Maybe<String>;
}

export type ChongduCommentReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduOrderUpdateManyMutationInput {
  addressId?: Maybe<Int>;
  closeTime?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  payment?: Maybe<Float>;
  paymentTime?: Maybe<String>;
  paymentType?: Maybe<Int>;
  postage?: Maybe<Float>;
  sendTime?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduVersionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduVersionWhereInput>;
  AND?: Maybe<
    | ChongduVersionSubscriptionWhereInput[]
    | ChongduVersionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduVersionSubscriptionWhereInput[]
    | ChongduVersionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduVersionSubscriptionWhereInput[]
    | ChongduVersionSubscriptionWhereInput
  >;
}

export interface ChongduOrderUpdateInput {
  addressId?: Maybe<Int>;
  closeTime?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  payment?: Maybe<Float>;
  paymentTime?: Maybe<String>;
  paymentType?: Maybe<Int>;
  postage?: Maybe<Float>;
  sendTime?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduVaccineSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduVaccineWhereInput>;
  AND?: Maybe<
    | ChongduVaccineSubscriptionWhereInput[]
    | ChongduVaccineSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduVaccineSubscriptionWhereInput[]
    | ChongduVaccineSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduVaccineSubscriptionWhereInput[]
    | ChongduVaccineSubscriptionWhereInput
  >;
}

export type ChongduUserauthentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ChongduCommentPraiseWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduOrderCreateInput {
  id?: Maybe<Int>;
  addressId?: Maybe<Int>;
  closeTime?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  mt?: Maybe<String>;
  orderNo?: Maybe<String>;
  payment?: Maybe<Float>;
  paymentTime?: Maybe<String>;
  paymentType?: Maybe<Int>;
  postage?: Maybe<Float>;
  sendTime?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduCompanyauthentLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserauthentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  authtime?: Maybe<String>;
  authtime_not?: Maybe<String>;
  authtime_in?: Maybe<String[] | String>;
  authtime_not_in?: Maybe<String[] | String>;
  authtime_lt?: Maybe<String>;
  authtime_lte?: Maybe<String>;
  authtime_gt?: Maybe<String>;
  authtime_gte?: Maybe<String>;
  authtime_contains?: Maybe<String>;
  authtime_not_contains?: Maybe<String>;
  authtime_starts_with?: Maybe<String>;
  authtime_not_starts_with?: Maybe<String>;
  authtime_ends_with?: Maybe<String>;
  authtime_not_ends_with?: Maybe<String>;
  backPhoto?: Maybe<String>;
  backPhoto_not?: Maybe<String>;
  backPhoto_in?: Maybe<String[] | String>;
  backPhoto_not_in?: Maybe<String[] | String>;
  backPhoto_lt?: Maybe<String>;
  backPhoto_lte?: Maybe<String>;
  backPhoto_gt?: Maybe<String>;
  backPhoto_gte?: Maybe<String>;
  backPhoto_contains?: Maybe<String>;
  backPhoto_not_contains?: Maybe<String>;
  backPhoto_starts_with?: Maybe<String>;
  backPhoto_not_starts_with?: Maybe<String>;
  backPhoto_ends_with?: Maybe<String>;
  backPhoto_not_ends_with?: Maybe<String>;
  beginTime?: Maybe<String>;
  beginTime_not?: Maybe<String>;
  beginTime_in?: Maybe<String[] | String>;
  beginTime_not_in?: Maybe<String[] | String>;
  beginTime_lt?: Maybe<String>;
  beginTime_lte?: Maybe<String>;
  beginTime_gt?: Maybe<String>;
  beginTime_gte?: Maybe<String>;
  beginTime_contains?: Maybe<String>;
  beginTime_not_contains?: Maybe<String>;
  beginTime_starts_with?: Maybe<String>;
  beginTime_not_starts_with?: Maybe<String>;
  beginTime_ends_with?: Maybe<String>;
  beginTime_not_ends_with?: Maybe<String>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  cardAddress?: Maybe<String>;
  cardAddress_not?: Maybe<String>;
  cardAddress_in?: Maybe<String[] | String>;
  cardAddress_not_in?: Maybe<String[] | String>;
  cardAddress_lt?: Maybe<String>;
  cardAddress_lte?: Maybe<String>;
  cardAddress_gt?: Maybe<String>;
  cardAddress_gte?: Maybe<String>;
  cardAddress_contains?: Maybe<String>;
  cardAddress_not_contains?: Maybe<String>;
  cardAddress_starts_with?: Maybe<String>;
  cardAddress_not_starts_with?: Maybe<String>;
  cardAddress_ends_with?: Maybe<String>;
  cardAddress_not_ends_with?: Maybe<String>;
  cardNum?: Maybe<String>;
  cardNum_not?: Maybe<String>;
  cardNum_in?: Maybe<String[] | String>;
  cardNum_not_in?: Maybe<String[] | String>;
  cardNum_lt?: Maybe<String>;
  cardNum_lte?: Maybe<String>;
  cardNum_gt?: Maybe<String>;
  cardNum_gte?: Maybe<String>;
  cardNum_contains?: Maybe<String>;
  cardNum_not_contains?: Maybe<String>;
  cardNum_starts_with?: Maybe<String>;
  cardNum_not_starts_with?: Maybe<String>;
  cardNum_ends_with?: Maybe<String>;
  cardNum_not_ends_with?: Maybe<String>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  frontPhoto_not?: Maybe<String>;
  frontPhoto_in?: Maybe<String[] | String>;
  frontPhoto_not_in?: Maybe<String[] | String>;
  frontPhoto_lt?: Maybe<String>;
  frontPhoto_lte?: Maybe<String>;
  frontPhoto_gt?: Maybe<String>;
  frontPhoto_gte?: Maybe<String>;
  frontPhoto_contains?: Maybe<String>;
  frontPhoto_not_contains?: Maybe<String>;
  frontPhoto_starts_with?: Maybe<String>;
  frontPhoto_not_starts_with?: Maybe<String>;
  frontPhoto_ends_with?: Maybe<String>;
  frontPhoto_not_ends_with?: Maybe<String>;
  handPhoto?: Maybe<String>;
  handPhoto_not?: Maybe<String>;
  handPhoto_in?: Maybe<String[] | String>;
  handPhoto_not_in?: Maybe<String[] | String>;
  handPhoto_lt?: Maybe<String>;
  handPhoto_lte?: Maybe<String>;
  handPhoto_gt?: Maybe<String>;
  handPhoto_gte?: Maybe<String>;
  handPhoto_contains?: Maybe<String>;
  handPhoto_not_contains?: Maybe<String>;
  handPhoto_starts_with?: Maybe<String>;
  handPhoto_not_starts_with?: Maybe<String>;
  handPhoto_ends_with?: Maybe<String>;
  handPhoto_not_ends_with?: Maybe<String>;
  nation?: Maybe<String>;
  nation_not?: Maybe<String>;
  nation_in?: Maybe<String[] | String>;
  nation_not_in?: Maybe<String[] | String>;
  nation_lt?: Maybe<String>;
  nation_lte?: Maybe<String>;
  nation_gt?: Maybe<String>;
  nation_gte?: Maybe<String>;
  nation_contains?: Maybe<String>;
  nation_not_contains?: Maybe<String>;
  nation_starts_with?: Maybe<String>;
  nation_not_starts_with?: Maybe<String>;
  nation_ends_with?: Maybe<String>;
  nation_not_ends_with?: Maybe<String>;
  realName?: Maybe<String>;
  realName_not?: Maybe<String>;
  realName_in?: Maybe<String[] | String>;
  realName_not_in?: Maybe<String[] | String>;
  realName_lt?: Maybe<String>;
  realName_lte?: Maybe<String>;
  realName_gt?: Maybe<String>;
  realName_gte?: Maybe<String>;
  realName_contains?: Maybe<String>;
  realName_not_contains?: Maybe<String>;
  realName_starts_with?: Maybe<String>;
  realName_not_starts_with?: Maybe<String>;
  realName_ends_with?: Maybe<String>;
  realName_not_ends_with?: Maybe<String>;
  sex?: Maybe<Int>;
  sex_not?: Maybe<Int>;
  sex_in?: Maybe<Int[] | Int>;
  sex_not_in?: Maybe<Int[] | Int>;
  sex_lt?: Maybe<Int>;
  sex_lte?: Maybe<Int>;
  sex_gt?: Maybe<Int>;
  sex_gte?: Maybe<Int>;
  signFrom?: Maybe<String>;
  signFrom_not?: Maybe<String>;
  signFrom_in?: Maybe<String[] | String>;
  signFrom_not_in?: Maybe<String[] | String>;
  signFrom_lt?: Maybe<String>;
  signFrom_lte?: Maybe<String>;
  signFrom_gt?: Maybe<String>;
  signFrom_gte?: Maybe<String>;
  signFrom_contains?: Maybe<String>;
  signFrom_not_contains?: Maybe<String>;
  signFrom_starts_with?: Maybe<String>;
  signFrom_not_starts_with?: Maybe<String>;
  signFrom_ends_with?: Maybe<String>;
  signFrom_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<ChongduUserauthentWhereInput[] | ChongduUserauthentWhereInput>;
  OR?: Maybe<ChongduUserauthentWhereInput[] | ChongduUserauthentWhereInput>;
  NOT?: Maybe<ChongduUserauthentWhereInput[] | ChongduUserauthentWhereInput>;
}

export interface ChongduUserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<
    ChongduUserSubscriptionWhereInput[] | ChongduUserSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduUserSubscriptionWhereInput[] | ChongduUserSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduUserSubscriptionWhereInput[] | ChongduUserSubscriptionWhereInput
  >;
}

export interface ChongduModeldetailUpdateManyMutationInput {
  action?: Maybe<String>;
  alert?: Maybe<String>;
  ask?: Maybe<Int>;
  auth?: Maybe<String>;
  buttomname?: Maybe<String>;
  button?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  function?: Maybe<String>;
  heght?: Maybe<String>;
  method?: Maybe<String>;
  methodname?: Maybe<String>;
  modelId?: Maybe<String>;
  mt?: Maybe<String>;
  namespace?: Maybe<String>;
  param?: Maybe<String>;
  refresh?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  viewname?: Maybe<String>;
  width?: Maybe<String>;
}

export interface ChongduTagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduTagWhereInput>;
  AND?: Maybe<
    ChongduTagSubscriptionWhereInput[] | ChongduTagSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduTagSubscriptionWhereInput[] | ChongduTagSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduTagSubscriptionWhereInput[] | ChongduTagSubscriptionWhereInput
  >;
}

export interface ChongduModeldetailUpdateInput {
  action?: Maybe<String>;
  alert?: Maybe<String>;
  ask?: Maybe<Int>;
  auth?: Maybe<String>;
  buttomname?: Maybe<String>;
  button?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  function?: Maybe<String>;
  heght?: Maybe<String>;
  method?: Maybe<String>;
  methodname?: Maybe<String>;
  modelId?: Maybe<String>;
  mt?: Maybe<String>;
  namespace?: Maybe<String>;
  param?: Maybe<String>;
  refresh?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  viewname?: Maybe<String>;
  width?: Maybe<String>;
}

export interface ChongduServiceTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServiceTypeWhereInput>;
  AND?: Maybe<
    | ChongduServiceTypeSubscriptionWhereInput[]
    | ChongduServiceTypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceTypeSubscriptionWhereInput[]
    | ChongduServiceTypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceTypeSubscriptionWhereInput[]
    | ChongduServiceTypeSubscriptionWhereInput
  >;
}

export interface ChongduModeldetailCreateInput {
  id?: Maybe<ID_Input>;
  action?: Maybe<String>;
  alert?: Maybe<String>;
  ask?: Maybe<Int>;
  auth?: Maybe<String>;
  buttomname?: Maybe<String>;
  button?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  function?: Maybe<String>;
  heght?: Maybe<String>;
  method?: Maybe<String>;
  methodname?: Maybe<String>;
  modelId?: Maybe<String>;
  mt?: Maybe<String>;
  namespace?: Maybe<String>;
  param?: Maybe<String>;
  refresh?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  viewname?: Maybe<String>;
  width?: Maybe<String>;
}

export interface ChongduServiceImgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServiceImgWhereInput>;
  AND?: Maybe<
    | ChongduServiceImgSubscriptionWhereInput[]
    | ChongduServiceImgSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceImgSubscriptionWhereInput[]
    | ChongduServiceImgSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceImgSubscriptionWhereInput[]
    | ChongduServiceImgSubscriptionWhereInput
  >;
}

export interface ChongduModelUpdateManyMutationInput {
  action?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  namespace?: Maybe<String>;
  path?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduSearchthinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduSearchthinkWhereInput>;
  AND?: Maybe<
    | ChongduSearchthinkSubscriptionWhereInput[]
    | ChongduSearchthinkSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduSearchthinkSubscriptionWhereInput[]
    | ChongduSearchthinkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduSearchthinkSubscriptionWhereInput[]
    | ChongduSearchthinkSubscriptionWhereInput
  >;
}

export type ChongduUserauthentLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduDataVersionWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  mac?: Maybe<String>;
  mac_not?: Maybe<String>;
  mac_in?: Maybe<String[] | String>;
  mac_not_in?: Maybe<String[] | String>;
  mac_lt?: Maybe<String>;
  mac_lte?: Maybe<String>;
  mac_gt?: Maybe<String>;
  mac_gte?: Maybe<String>;
  mac_contains?: Maybe<String>;
  mac_not_contains?: Maybe<String>;
  mac_starts_with?: Maybe<String>;
  mac_not_starts_with?: Maybe<String>;
  mac_ends_with?: Maybe<String>;
  mac_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  versionCode?: Maybe<String>;
  versionCode_not?: Maybe<String>;
  versionCode_in?: Maybe<String[] | String>;
  versionCode_not_in?: Maybe<String[] | String>;
  versionCode_lt?: Maybe<String>;
  versionCode_lte?: Maybe<String>;
  versionCode_gt?: Maybe<String>;
  versionCode_gte?: Maybe<String>;
  versionCode_contains?: Maybe<String>;
  versionCode_not_contains?: Maybe<String>;
  versionCode_starts_with?: Maybe<String>;
  versionCode_not_starts_with?: Maybe<String>;
  versionCode_ends_with?: Maybe<String>;
  versionCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduDataVersionWhereInput[] | ChongduDataVersionWhereInput>;
  OR?: Maybe<ChongduDataVersionWhereInput[] | ChongduDataVersionWhereInput>;
  NOT?: Maybe<ChongduDataVersionWhereInput[] | ChongduDataVersionWhereInput>;
}

export interface ChongduModelUpdateInput {
  action?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  namespace?: Maybe<String>;
  path?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduRoleAuthSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRoleAuthWhereInput>;
  AND?: Maybe<
    | ChongduRoleAuthSubscriptionWhereInput[]
    | ChongduRoleAuthSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRoleAuthSubscriptionWhereInput[]
    | ChongduRoleAuthSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRoleAuthSubscriptionWhereInput[]
    | ChongduRoleAuthSubscriptionWhereInput
  >;
}

export interface ChongduUserauthentLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  userauthentId?: Maybe<String>;
  userauthentId_not?: Maybe<String>;
  userauthentId_in?: Maybe<String[] | String>;
  userauthentId_not_in?: Maybe<String[] | String>;
  userauthentId_lt?: Maybe<String>;
  userauthentId_lte?: Maybe<String>;
  userauthentId_gt?: Maybe<String>;
  userauthentId_gte?: Maybe<String>;
  userauthentId_contains?: Maybe<String>;
  userauthentId_not_contains?: Maybe<String>;
  userauthentId_starts_with?: Maybe<String>;
  userauthentId_not_starts_with?: Maybe<String>;
  userauthentId_ends_with?: Maybe<String>;
  userauthentId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminWhereInput>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduUserauthentLogWhereInput[] | ChongduUserauthentLogWhereInput
  >;
  OR?: Maybe<
    ChongduUserauthentLogWhereInput[] | ChongduUserauthentLogWhereInput
  >;
  NOT?: Maybe<
    ChongduUserauthentLogWhereInput[] | ChongduUserauthentLogWhereInput
  >;
}

export interface ChongduRepellentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRepellentWhereInput>;
  AND?: Maybe<
    | ChongduRepellentSubscriptionWhereInput[]
    | ChongduRepellentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRepellentSubscriptionWhereInput[]
    | ChongduRepellentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRepellentSubscriptionWhereInput[]
    | ChongduRepellentSubscriptionWhereInput
  >;
}

export type ChongduAddressRelationWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduFilemanageWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduModelCreateInput {
  id?: Maybe<ID_Input>;
  action?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  namespace?: Maybe<String>;
  path?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduProductSkuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductSkuWhereInput>;
  AND?: Maybe<
    | ChongduProductSkuSubscriptionWhereInput[]
    | ChongduProductSkuSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductSkuSubscriptionWhereInput[]
    | ChongduProductSkuSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductSkuSubscriptionWhereInput[]
    | ChongduProductSkuSubscriptionWhereInput
  >;
}

export interface ChongduMessageUpdateManyMutationInput {
  authentstate?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  publishtime?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduProductImgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductImgWhereInput>;
  AND?: Maybe<
    | ChongduProductImgSubscriptionWhereInput[]
    | ChongduProductImgSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductImgSubscriptionWhereInput[]
    | ChongduProductImgSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductImgSubscriptionWhereInput[]
    | ChongduProductImgSubscriptionWhereInput
  >;
}

export interface ChongduMessageUpdateInput {
  authentstate?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  publishtime?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductWhereInput>;
  AND?: Maybe<
    | ChongduProductSubscriptionWhereInput[]
    | ChongduProductSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductSubscriptionWhereInput[]
    | ChongduProductSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductSubscriptionWhereInput[]
    | ChongduProductSubscriptionWhereInput
  >;
}

export type ChongduUserbindWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduInformWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  relatedType?: Maybe<Int>;
  relatedType_not?: Maybe<Int>;
  relatedType_in?: Maybe<Int[] | Int>;
  relatedType_not_in?: Maybe<Int[] | Int>;
  relatedType_lt?: Maybe<Int>;
  relatedType_lte?: Maybe<Int>;
  relatedType_gt?: Maybe<Int>;
  relatedType_gte?: Maybe<Int>;
  relatedId?: Maybe<Int>;
  relatedId_not?: Maybe<Int>;
  relatedId_in?: Maybe<Int[] | Int>;
  relatedId_not_in?: Maybe<Int[] | Int>;
  relatedId_lt?: Maybe<Int>;
  relatedId_lte?: Maybe<Int>;
  relatedId_gt?: Maybe<Int>;
  relatedId_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  userId?: Maybe<ChongduUserWhereInput>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  disposeBy?: Maybe<ChongduAdminWhereInput>;
  disposeAt?: Maybe<String>;
  disposeAt_not?: Maybe<String>;
  disposeAt_in?: Maybe<String[] | String>;
  disposeAt_not_in?: Maybe<String[] | String>;
  disposeAt_lt?: Maybe<String>;
  disposeAt_lte?: Maybe<String>;
  disposeAt_gt?: Maybe<String>;
  disposeAt_gte?: Maybe<String>;
  disposeAt_contains?: Maybe<String>;
  disposeAt_not_contains?: Maybe<String>;
  disposeAt_starts_with?: Maybe<String>;
  disposeAt_not_starts_with?: Maybe<String>;
  disposeAt_ends_with?: Maybe<String>;
  disposeAt_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<ChongduInformWhereInput[] | ChongduInformWhereInput>;
  OR?: Maybe<ChongduInformWhereInput[] | ChongduInformWhereInput>;
  NOT?: Maybe<ChongduInformWhereInput[] | ChongduInformWhereInput>;
}

export interface ChongduMessageCreateInput {
  id?: Maybe<Int>;
  authentstate?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  publishtime?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetRecommendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetRecommendWhereInput>;
  AND?: Maybe<
    | ChongduPetRecommendSubscriptionWhereInput[]
    | ChongduPetRecommendSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPetRecommendSubscriptionWhereInput[]
    | ChongduPetRecommendSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPetRecommendSubscriptionWhereInput[]
    | ChongduPetRecommendSubscriptionWhereInput
  >;
}

export interface ChongduUserbindWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  bindtime?: Maybe<String>;
  bindtime_not?: Maybe<String>;
  bindtime_in?: Maybe<String[] | String>;
  bindtime_not_in?: Maybe<String[] | String>;
  bindtime_lt?: Maybe<String>;
  bindtime_lte?: Maybe<String>;
  bindtime_gt?: Maybe<String>;
  bindtime_gte?: Maybe<String>;
  bindtime_contains?: Maybe<String>;
  bindtime_not_contains?: Maybe<String>;
  bindtime_starts_with?: Maybe<String>;
  bindtime_not_starts_with?: Maybe<String>;
  bindtime_ends_with?: Maybe<String>;
  bindtime_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mail?: Maybe<String>;
  mail_not?: Maybe<String>;
  mail_in?: Maybe<String[] | String>;
  mail_not_in?: Maybe<String[] | String>;
  mail_lt?: Maybe<String>;
  mail_lte?: Maybe<String>;
  mail_gt?: Maybe<String>;
  mail_gte?: Maybe<String>;
  mail_contains?: Maybe<String>;
  mail_not_contains?: Maybe<String>;
  mail_starts_with?: Maybe<String>;
  mail_not_starts_with?: Maybe<String>;
  mail_ends_with?: Maybe<String>;
  mail_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  tel?: Maybe<String>;
  tel_not?: Maybe<String>;
  tel_in?: Maybe<String[] | String>;
  tel_not_in?: Maybe<String[] | String>;
  tel_lt?: Maybe<String>;
  tel_lte?: Maybe<String>;
  tel_gt?: Maybe<String>;
  tel_gte?: Maybe<String>;
  tel_contains?: Maybe<String>;
  tel_not_contains?: Maybe<String>;
  tel_starts_with?: Maybe<String>;
  tel_not_starts_with?: Maybe<String>;
  tel_ends_with?: Maybe<String>;
  tel_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduUserbindWhereInput[] | ChongduUserbindWhereInput>;
  OR?: Maybe<ChongduUserbindWhereInput[] | ChongduUserbindWhereInput>;
  NOT?: Maybe<ChongduUserbindWhereInput[] | ChongduUserbindWhereInput>;
}

export interface ChongduPetCardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetCardWhereInput>;
  AND?: Maybe<
    | ChongduPetCardSubscriptionWhereInput[]
    | ChongduPetCardSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPetCardSubscriptionWhereInput[]
    | ChongduPetCardSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPetCardSubscriptionWhereInput[]
    | ChongduPetCardSubscriptionWhereInput
  >;
}

export interface ChongduMerchantstatisticUpdateManyMutationInput {
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export type ChongduLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduMerchantstatisticUpdateInput {
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduOrderserialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduOrderserialWhereInput>;
  AND?: Maybe<
    | ChongduOrderserialSubscriptionWhereInput[]
    | ChongduOrderserialSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduOrderserialSubscriptionWhereInput[]
    | ChongduOrderserialSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduOrderserialSubscriptionWhereInput[]
    | ChongduOrderserialSubscriptionWhereInput
  >;
}

export interface ChongduMerchantstatisticCreateInput {
  id?: Maybe<Int>;
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduOrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduOrderItemWhereInput>;
  AND?: Maybe<
    | ChongduOrderItemSubscriptionWhereInput[]
    | ChongduOrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduOrderItemSubscriptionWhereInput[]
    | ChongduOrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduOrderItemSubscriptionWhereInput[]
    | ChongduOrderItemSubscriptionWhereInput
  >;
}

export interface ChongduMerchantImgUpdateManyMutationInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduModelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduModelWhereInput>;
  AND?: Maybe<
    ChongduModelSubscriptionWhereInput[] | ChongduModelSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduModelSubscriptionWhereInput[] | ChongduModelSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduModelSubscriptionWhereInput[] | ChongduModelSubscriptionWhereInput
  >;
}

export type ChongduUserdetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduMenuWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  mobileIcon?: Maybe<String>;
  mobileIcon_not?: Maybe<String>;
  mobileIcon_in?: Maybe<String[] | String>;
  mobileIcon_not_in?: Maybe<String[] | String>;
  mobileIcon_lt?: Maybe<String>;
  mobileIcon_lte?: Maybe<String>;
  mobileIcon_gt?: Maybe<String>;
  mobileIcon_gte?: Maybe<String>;
  mobileIcon_contains?: Maybe<String>;
  mobileIcon_not_contains?: Maybe<String>;
  mobileIcon_starts_with?: Maybe<String>;
  mobileIcon_not_starts_with?: Maybe<String>;
  mobileIcon_ends_with?: Maybe<String>;
  mobileIcon_not_ends_with?: Maybe<String>;
  modelId?: Maybe<String>;
  modelId_not?: Maybe<String>;
  modelId_in?: Maybe<String[] | String>;
  modelId_not_in?: Maybe<String[] | String>;
  modelId_lt?: Maybe<String>;
  modelId_lte?: Maybe<String>;
  modelId_gt?: Maybe<String>;
  modelId_gte?: Maybe<String>;
  modelId_contains?: Maybe<String>;
  modelId_not_contains?: Maybe<String>;
  modelId_starts_with?: Maybe<String>;
  modelId_not_starts_with?: Maybe<String>;
  modelId_ends_with?: Maybe<String>;
  modelId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  pid?: Maybe<String>;
  pid_not?: Maybe<String>;
  pid_in?: Maybe<String[] | String>;
  pid_not_in?: Maybe<String[] | String>;
  pid_lt?: Maybe<String>;
  pid_lte?: Maybe<String>;
  pid_gt?: Maybe<String>;
  pid_gte?: Maybe<String>;
  pid_contains?: Maybe<String>;
  pid_not_contains?: Maybe<String>;
  pid_starts_with?: Maybe<String>;
  pid_not_starts_with?: Maybe<String>;
  pid_ends_with?: Maybe<String>;
  pid_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduMenuWhereInput[] | ChongduMenuWhereInput>;
  OR?: Maybe<ChongduMenuWhereInput[] | ChongduMenuWhereInput>;
  NOT?: Maybe<ChongduMenuWhereInput[] | ChongduMenuWhereInput>;
}

export interface ChongduMerchantImgUpdateInput {
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduMenuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduMenuWhereInput>;
  AND?: Maybe<
    ChongduMenuSubscriptionWhereInput[] | ChongduMenuSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduMenuSubscriptionWhereInput[] | ChongduMenuSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduMenuSubscriptionWhereInput[] | ChongduMenuSubscriptionWhereInput
  >;
}

export interface ChongduUserdetailWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  deviceCode?: Maybe<String>;
  deviceCode_not?: Maybe<String>;
  deviceCode_in?: Maybe<String[] | String>;
  deviceCode_not_in?: Maybe<String[] | String>;
  deviceCode_lt?: Maybe<String>;
  deviceCode_lte?: Maybe<String>;
  deviceCode_gt?: Maybe<String>;
  deviceCode_gte?: Maybe<String>;
  deviceCode_contains?: Maybe<String>;
  deviceCode_not_contains?: Maybe<String>;
  deviceCode_starts_with?: Maybe<String>;
  deviceCode_not_starts_with?: Maybe<String>;
  deviceCode_ends_with?: Maybe<String>;
  deviceCode_not_ends_with?: Maybe<String>;
  deviceName?: Maybe<String>;
  deviceName_not?: Maybe<String>;
  deviceName_in?: Maybe<String[] | String>;
  deviceName_not_in?: Maybe<String[] | String>;
  deviceName_lt?: Maybe<String>;
  deviceName_lte?: Maybe<String>;
  deviceName_gt?: Maybe<String>;
  deviceName_gte?: Maybe<String>;
  deviceName_contains?: Maybe<String>;
  deviceName_not_contains?: Maybe<String>;
  deviceName_starts_with?: Maybe<String>;
  deviceName_not_starts_with?: Maybe<String>;
  deviceName_ends_with?: Maybe<String>;
  deviceName_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduUserdetailWhereInput[] | ChongduUserdetailWhereInput>;
  OR?: Maybe<ChongduUserdetailWhereInput[] | ChongduUserdetailWhereInput>;
  NOT?: Maybe<ChongduUserdetailWhereInput[] | ChongduUserdetailWhereInput>;
}

export interface ChongduLockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduLockWhereInput>;
  AND?: Maybe<
    ChongduLockSubscriptionWhereInput[] | ChongduLockSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduLockSubscriptionWhereInput[] | ChongduLockSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduLockSubscriptionWhereInput[] | ChongduLockSubscriptionWhereInput
  >;
}

export interface ChongduMerchantImgCreateInput {
  id?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduMerchantImgWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduMerchantUpdateManyMutationInput {
  address?: Maybe<String>;
  attention?: Maybe<Int>;
  beginTime?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  endTime?: Maybe<String>;
  icon?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  name?: Maybe<String>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduCorrelationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCorrelationWhereInput>;
  AND?: Maybe<
    | ChongduCorrelationSubscriptionWhereInput[]
    | ChongduCorrelationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCorrelationSubscriptionWhereInput[]
    | ChongduCorrelationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCorrelationSubscriptionWhereInput[]
    | ChongduCorrelationSubscriptionWhereInput
  >;
}

export interface ChongduMerchantUpdateInput {
  address?: Maybe<String>;
  attention?: Maybe<Int>;
  beginTime?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  endTime?: Maybe<String>;
  icon?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  name?: Maybe<String>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduCompanyauthentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCompanyauthentWhereInput>;
  AND?: Maybe<
    | ChongduCompanyauthentSubscriptionWhereInput[]
    | ChongduCompanyauthentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCompanyauthentSubscriptionWhereInput[]
    | ChongduCompanyauthentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCompanyauthentSubscriptionWhereInput[]
    | ChongduCompanyauthentSubscriptionWhereInput
  >;
}

export interface ChongduMerchantCreateInput {
  id?: Maybe<ID_Input>;
  address?: Maybe<String>;
  attention?: Maybe<Int>;
  beginTime?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  endTime?: Maybe<String>;
  icon?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  name?: Maybe<String>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduCommentPraiseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCommentPraiseWhereInput>;
  AND?: Maybe<
    | ChongduCommentPraiseSubscriptionWhereInput[]
    | ChongduCommentPraiseSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCommentPraiseSubscriptionWhereInput[]
    | ChongduCommentPraiseSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCommentPraiseSubscriptionWhereInput[]
    | ChongduCommentPraiseSubscriptionWhereInput
  >;
}

export type ChongduUserstatisticWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduMessageWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  authentstate?: Maybe<String>;
  authentstate_not?: Maybe<String>;
  authentstate_in?: Maybe<String[] | String>;
  authentstate_not_in?: Maybe<String[] | String>;
  authentstate_lt?: Maybe<String>;
  authentstate_lte?: Maybe<String>;
  authentstate_gt?: Maybe<String>;
  authentstate_gte?: Maybe<String>;
  authentstate_contains?: Maybe<String>;
  authentstate_not_contains?: Maybe<String>;
  authentstate_starts_with?: Maybe<String>;
  authentstate_not_starts_with?: Maybe<String>;
  authentstate_ends_with?: Maybe<String>;
  authentstate_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  publishtime?: Maybe<String>;
  publishtime_not?: Maybe<String>;
  publishtime_in?: Maybe<String[] | String>;
  publishtime_not_in?: Maybe<String[] | String>;
  publishtime_lt?: Maybe<String>;
  publishtime_lte?: Maybe<String>;
  publishtime_gt?: Maybe<String>;
  publishtime_gte?: Maybe<String>;
  publishtime_contains?: Maybe<String>;
  publishtime_not_contains?: Maybe<String>;
  publishtime_starts_with?: Maybe<String>;
  publishtime_not_starts_with?: Maybe<String>;
  publishtime_ends_with?: Maybe<String>;
  publishtime_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduMessageWhereInput[] | ChongduMessageWhereInput>;
  OR?: Maybe<ChongduMessageWhereInput[] | ChongduMessageWhereInput>;
  NOT?: Maybe<ChongduMessageWhereInput[] | ChongduMessageWhereInput>;
}

export interface ChongduMenuUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  mobile?: Maybe<String>;
  mobileIcon?: Maybe<String>;
  modelId?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  path?: Maybe<String>;
  pid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduAppVersionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAppVersionWhereInput>;
  AND?: Maybe<
    | ChongduAppVersionSubscriptionWhereInput[]
    | ChongduAppVersionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAppVersionSubscriptionWhereInput[]
    | ChongduAppVersionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAppVersionSubscriptionWhereInput[]
    | ChongduAppVersionSubscriptionWhereInput
  >;
}

export interface ChongduUserstatisticWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  day?: Maybe<Int>;
  day_not?: Maybe<Int>;
  day_in?: Maybe<Int[] | Int>;
  day_not_in?: Maybe<Int[] | Int>;
  day_lt?: Maybe<Int>;
  day_lte?: Maybe<Int>;
  day_gt?: Maybe<Int>;
  day_gte?: Maybe<Int>;
  hour?: Maybe<Int>;
  hour_not?: Maybe<Int>;
  hour_in?: Maybe<Int[] | Int>;
  hour_not_in?: Maybe<Int[] | Int>;
  hour_lt?: Maybe<Int>;
  hour_lte?: Maybe<Int>;
  hour_gt?: Maybe<Int>;
  hour_gte?: Maybe<Int>;
  month?: Maybe<Int>;
  month_not?: Maybe<Int>;
  month_in?: Maybe<Int[] | Int>;
  month_not_in?: Maybe<Int[] | Int>;
  month_lt?: Maybe<Int>;
  month_lte?: Maybe<Int>;
  month_gt?: Maybe<Int>;
  month_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduUserstatisticWhereInput[] | ChongduUserstatisticWhereInput
  >;
  OR?: Maybe<ChongduUserstatisticWhereInput[] | ChongduUserstatisticWhereInput>;
  NOT?: Maybe<
    ChongduUserstatisticWhereInput[] | ChongduUserstatisticWhereInput
  >;
}

export interface ChongduAdviceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAdviceWhereInput>;
  AND?: Maybe<
    ChongduAdviceSubscriptionWhereInput[] | ChongduAdviceSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduAdviceSubscriptionWhereInput[] | ChongduAdviceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduAdviceSubscriptionWhereInput[] | ChongduAdviceSubscriptionWhereInput
  >;
}

export interface ChongduMenuUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  mobile?: Maybe<String>;
  mobileIcon?: Maybe<String>;
  modelId?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  path?: Maybe<String>;
  pid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export type ChongduModeldetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduMenuCreateInput {
  id?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  mobile?: Maybe<String>;
  mobileIcon?: Maybe<String>;
  modelId?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  path?: Maybe<String>;
  pid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduAddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAddressWhereInput>;
  AND?: Maybe<
    | ChongduAddressSubscriptionWhereInput[]
    | ChongduAddressSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAddressSubscriptionWhereInput[]
    | ChongduAddressSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAddressSubscriptionWhereInput[]
    | ChongduAddressSubscriptionWhereInput
  >;
}

export interface ChongduLoginLogUpdateManyMutationInput {
  adminId?: Maybe<String>;
  ip?: Maybe<String>;
  loginTime?: Maybe<String>;
  mac?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduWorldUpsertNestedInput {
  update: ChongduWorldUpdateDataInput;
  create: ChongduWorldCreateInput;
}

export interface ChongduLoginLogUpdateInput {
  adminId?: Maybe<String>;
  ip?: Maybe<String>;
  loginTime?: Maybe<String>;
  mac?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduWorldShieldUpdateInput {
  type?: Maybe<Int>;
  worldId?: Maybe<ChongduWorldUpdateOneInput>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
  shieldBy?: Maybe<String>;
  status?: Maybe<Int>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
  d?: Maybe<Int>;
}

export type ChongduVaccineWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduOrderItemWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  closeTime?: Maybe<String>;
  closeTime_not?: Maybe<String>;
  closeTime_in?: Maybe<String[] | String>;
  closeTime_not_in?: Maybe<String[] | String>;
  closeTime_lt?: Maybe<String>;
  closeTime_lte?: Maybe<String>;
  closeTime_gt?: Maybe<String>;
  closeTime_gte?: Maybe<String>;
  closeTime_contains?: Maybe<String>;
  closeTime_not_contains?: Maybe<String>;
  closeTime_starts_with?: Maybe<String>;
  closeTime_not_starts_with?: Maybe<String>;
  closeTime_ends_with?: Maybe<String>;
  closeTime_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  currentPrice?: Maybe<Float>;
  currentPrice_not?: Maybe<Float>;
  currentPrice_in?: Maybe<Float[] | Float>;
  currentPrice_not_in?: Maybe<Float[] | Float>;
  currentPrice_lt?: Maybe<Float>;
  currentPrice_lte?: Maybe<Float>;
  currentPrice_gt?: Maybe<Float>;
  currentPrice_gte?: Maybe<Float>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  merOrderNo?: Maybe<String>;
  merOrderNo_not?: Maybe<String>;
  merOrderNo_in?: Maybe<String[] | String>;
  merOrderNo_not_in?: Maybe<String[] | String>;
  merOrderNo_lt?: Maybe<String>;
  merOrderNo_lte?: Maybe<String>;
  merOrderNo_gt?: Maybe<String>;
  merOrderNo_gte?: Maybe<String>;
  merOrderNo_contains?: Maybe<String>;
  merOrderNo_not_contains?: Maybe<String>;
  merOrderNo_starts_with?: Maybe<String>;
  merOrderNo_not_starts_with?: Maybe<String>;
  merOrderNo_ends_with?: Maybe<String>;
  merOrderNo_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  orderNo?: Maybe<String>;
  orderNo_not?: Maybe<String>;
  orderNo_in?: Maybe<String[] | String>;
  orderNo_not_in?: Maybe<String[] | String>;
  orderNo_lt?: Maybe<String>;
  orderNo_lte?: Maybe<String>;
  orderNo_gt?: Maybe<String>;
  orderNo_gte?: Maybe<String>;
  orderNo_contains?: Maybe<String>;
  orderNo_not_contains?: Maybe<String>;
  orderNo_starts_with?: Maybe<String>;
  orderNo_not_starts_with?: Maybe<String>;
  orderNo_ends_with?: Maybe<String>;
  orderNo_not_ends_with?: Maybe<String>;
  paymentTime?: Maybe<String>;
  paymentTime_not?: Maybe<String>;
  paymentTime_in?: Maybe<String[] | String>;
  paymentTime_not_in?: Maybe<String[] | String>;
  paymentTime_lt?: Maybe<String>;
  paymentTime_lte?: Maybe<String>;
  paymentTime_gt?: Maybe<String>;
  paymentTime_gte?: Maybe<String>;
  paymentTime_contains?: Maybe<String>;
  paymentTime_not_contains?: Maybe<String>;
  paymentTime_starts_with?: Maybe<String>;
  paymentTime_not_starts_with?: Maybe<String>;
  paymentTime_ends_with?: Maybe<String>;
  paymentTime_not_ends_with?: Maybe<String>;
  paymentType?: Maybe<Int>;
  paymentType_not?: Maybe<Int>;
  paymentType_in?: Maybe<Int[] | Int>;
  paymentType_not_in?: Maybe<Int[] | Int>;
  paymentType_lt?: Maybe<Int>;
  paymentType_lte?: Maybe<Int>;
  paymentType_gt?: Maybe<Int>;
  paymentType_gte?: Maybe<Int>;
  postage?: Maybe<Float>;
  postage_not?: Maybe<Float>;
  postage_in?: Maybe<Float[] | Float>;
  postage_not_in?: Maybe<Float[] | Float>;
  postage_lt?: Maybe<Float>;
  postage_lte?: Maybe<Float>;
  postage_gt?: Maybe<Float>;
  postage_gte?: Maybe<Float>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  reStatus?: Maybe<Int>;
  reStatus_not?: Maybe<Int>;
  reStatus_in?: Maybe<Int[] | Int>;
  reStatus_not_in?: Maybe<Int[] | Int>;
  reStatus_lt?: Maybe<Int>;
  reStatus_lte?: Maybe<Int>;
  reStatus_gt?: Maybe<Int>;
  reStatus_gte?: Maybe<Int>;
  sendTime?: Maybe<String>;
  sendTime_not?: Maybe<String>;
  sendTime_in?: Maybe<String[] | String>;
  sendTime_not_in?: Maybe<String[] | String>;
  sendTime_lt?: Maybe<String>;
  sendTime_lte?: Maybe<String>;
  sendTime_gt?: Maybe<String>;
  sendTime_gte?: Maybe<String>;
  sendTime_contains?: Maybe<String>;
  sendTime_not_contains?: Maybe<String>;
  sendTime_starts_with?: Maybe<String>;
  sendTime_not_starts_with?: Maybe<String>;
  sendTime_ends_with?: Maybe<String>;
  sendTime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduOrderItemWhereInput[] | ChongduOrderItemWhereInput>;
  OR?: Maybe<ChongduOrderItemWhereInput[] | ChongduOrderItemWhereInput>;
  NOT?: Maybe<ChongduOrderItemWhereInput[] | ChongduOrderItemWhereInput>;
}

export interface ChongduLoginLogCreateInput {
  id?: Maybe<Int>;
  adminId?: Maybe<String>;
  ip?: Maybe<String>;
  loginTime?: Maybe<String>;
  mac?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduWorldLikeUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduVaccineWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  brandId?: Maybe<Int>;
  brandId_not?: Maybe<Int>;
  brandId_in?: Maybe<Int[] | Int>;
  brandId_not_in?: Maybe<Int[] | Int>;
  brandId_lt?: Maybe<Int>;
  brandId_lte?: Maybe<Int>;
  brandId_gt?: Maybe<Int>;
  brandId_gte?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityCode_not?: Maybe<String>;
  cityCode_in?: Maybe<String[] | String>;
  cityCode_not_in?: Maybe<String[] | String>;
  cityCode_lt?: Maybe<String>;
  cityCode_lte?: Maybe<String>;
  cityCode_gt?: Maybe<String>;
  cityCode_gte?: Maybe<String>;
  cityCode_contains?: Maybe<String>;
  cityCode_not_contains?: Maybe<String>;
  cityCode_starts_with?: Maybe<String>;
  cityCode_not_starts_with?: Maybe<String>;
  cityCode_ends_with?: Maybe<String>;
  cityCode_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexNum?: Maybe<Int>;
  indexNum_not?: Maybe<Int>;
  indexNum_in?: Maybe<Int[] | Int>;
  indexNum_not_in?: Maybe<Int[] | Int>;
  indexNum_lt?: Maybe<Int>;
  indexNum_lte?: Maybe<Int>;
  indexNum_gt?: Maybe<Int>;
  indexNum_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  petId?: Maybe<String>;
  petId_not?: Maybe<String>;
  petId_in?: Maybe<String[] | String>;
  petId_not_in?: Maybe<String[] | String>;
  petId_lt?: Maybe<String>;
  petId_lte?: Maybe<String>;
  petId_gt?: Maybe<String>;
  petId_gte?: Maybe<String>;
  petId_contains?: Maybe<String>;
  petId_not_contains?: Maybe<String>;
  petId_starts_with?: Maybe<String>;
  petId_not_starts_with?: Maybe<String>;
  petId_ends_with?: Maybe<String>;
  petId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduVaccineWhereInput[] | ChongduVaccineWhereInput>;
  OR?: Maybe<ChongduVaccineWhereInput[] | ChongduVaccineWhereInput>;
  NOT?: Maybe<ChongduVaccineWhereInput[] | ChongduVaccineWhereInput>;
}

export interface ChongduWorldLikeCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduAddressWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  detailAdd_not?: Maybe<String>;
  detailAdd_in?: Maybe<String[] | String>;
  detailAdd_not_in?: Maybe<String[] | String>;
  detailAdd_lt?: Maybe<String>;
  detailAdd_lte?: Maybe<String>;
  detailAdd_gt?: Maybe<String>;
  detailAdd_gte?: Maybe<String>;
  detailAdd_contains?: Maybe<String>;
  detailAdd_not_contains?: Maybe<String>;
  detailAdd_starts_with?: Maybe<String>;
  detailAdd_not_starts_with?: Maybe<String>;
  detailAdd_ends_with?: Maybe<String>;
  detailAdd_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  province?: Maybe<String>;
  province_not?: Maybe<String>;
  province_in?: Maybe<String[] | String>;
  province_not_in?: Maybe<String[] | String>;
  province_lt?: Maybe<String>;
  province_lte?: Maybe<String>;
  province_gt?: Maybe<String>;
  province_gte?: Maybe<String>;
  province_contains?: Maybe<String>;
  province_not_contains?: Maybe<String>;
  province_starts_with?: Maybe<String>;
  province_not_starts_with?: Maybe<String>;
  province_ends_with?: Maybe<String>;
  province_not_ends_with?: Maybe<String>;
  region?: Maybe<String>;
  region_not?: Maybe<String>;
  region_in?: Maybe<String[] | String>;
  region_not_in?: Maybe<String[] | String>;
  region_lt?: Maybe<String>;
  region_lte?: Maybe<String>;
  region_gt?: Maybe<String>;
  region_gte?: Maybe<String>;
  region_contains?: Maybe<String>;
  region_not_contains?: Maybe<String>;
  region_starts_with?: Maybe<String>;
  region_not_starts_with?: Maybe<String>;
  region_ends_with?: Maybe<String>;
  region_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  tel?: Maybe<String>;
  tel_not?: Maybe<String>;
  tel_in?: Maybe<String[] | String>;
  tel_not_in?: Maybe<String[] | String>;
  tel_lt?: Maybe<String>;
  tel_lte?: Maybe<String>;
  tel_gt?: Maybe<String>;
  tel_gte?: Maybe<String>;
  tel_contains?: Maybe<String>;
  tel_not_contains?: Maybe<String>;
  tel_starts_with?: Maybe<String>;
  tel_not_starts_with?: Maybe<String>;
  tel_ends_with?: Maybe<String>;
  tel_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduAddressWhereInput[] | ChongduAddressWhereInput>;
  OR?: Maybe<ChongduAddressWhereInput[] | ChongduAddressWhereInput>;
  NOT?: Maybe<ChongduAddressWhereInput[] | ChongduAddressWhereInput>;
}

export type ChongduOrderinvoicedetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduLogUpdateManyMutationInput {
  cn?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  dataId?: Maybe<Int>;
  ip?: Maybe<String>;
  mn?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  originalData?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  targetData?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduWorldCommentUpdateInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduLogUpdateInput {
  cn?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  dataId?: Maybe<Int>;
  ip?: Maybe<String>;
  mn?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  originalData?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  targetData?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduWorldUpdateInput {
  activityName?: Maybe<String>;
  commentStatus?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  gif?: Maybe<String>;
  height?: Maybe<Float>;
  image?: Maybe<String>;
  joinCount?: Maybe<Int>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  praiseCount?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
  video?: Maybe<String>;
  viewCount?: Maybe<Int>;
  width?: Maybe<Float>;
}

export interface ChongduLogCreateInput {
  id?: Maybe<Int>;
  cn?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  dataId?: Maybe<Int>;
  ip?: Maybe<String>;
  mn?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  originalData?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  targetData?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduViewcountUpdateInput {
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  ip?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  pid?: Maybe<String>;
  s?: Maybe<Int>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
  xu?: Maybe<Int>;
}

export type ChongduVaccineBrandWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduOrderstatisticWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  day?: Maybe<Int>;
  day_not?: Maybe<Int>;
  day_in?: Maybe<Int[] | Int>;
  day_not_in?: Maybe<Int[] | Int>;
  day_lt?: Maybe<Int>;
  day_lte?: Maybe<Int>;
  day_gt?: Maybe<Int>;
  day_gte?: Maybe<Int>;
  hour?: Maybe<Int>;
  hour_not?: Maybe<Int>;
  hour_in?: Maybe<Int[] | Int>;
  hour_not_in?: Maybe<Int[] | Int>;
  hour_lt?: Maybe<Int>;
  hour_lte?: Maybe<Int>;
  hour_gt?: Maybe<Int>;
  hour_gte?: Maybe<Int>;
  month?: Maybe<Int>;
  month_not?: Maybe<Int>;
  month_in?: Maybe<Int[] | Int>;
  month_not_in?: Maybe<Int[] | Int>;
  month_lt?: Maybe<Int>;
  month_lte?: Maybe<Int>;
  month_gt?: Maybe<Int>;
  month_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduOrderstatisticWhereInput[] | ChongduOrderstatisticWhereInput
  >;
  OR?: Maybe<
    ChongduOrderstatisticWhereInput[] | ChongduOrderstatisticWhereInput
  >;
  NOT?: Maybe<
    ChongduOrderstatisticWhereInput[] | ChongduOrderstatisticWhereInput
  >;
}

export interface ChongduLockUpdateManyMutationInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  thread?: Maybe<String>;
  tName?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduValidateUpdateManyMutationInput {
  code?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  phone?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduVaccineBrandWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduVaccineBrandWhereInput[] | ChongduVaccineBrandWhereInput>;
  OR?: Maybe<ChongduVaccineBrandWhereInput[] | ChongduVaccineBrandWhereInput>;
  NOT?: Maybe<ChongduVaccineBrandWhereInput[] | ChongduVaccineBrandWhereInput>;
}

export interface ChongduValidateCreateInput {
  id?: Maybe<Int>;
  code?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  phone?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduLockUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  thread?: Maybe<String>;
  tName?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduPermissionWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduLockCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  thread?: Maybe<String>;
  tName?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduVaccineCreateInput {
  id?: Maybe<Int>;
  brandId?: Maybe<Int>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  indexNum?: Maybe<Int>;
  mt?: Maybe<String>;
  petId?: Maybe<String>;
  status?: Maybe<Int>;
  street?: Maybe<String>;
  time?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduInformUpdateManyMutationInput {
  type?: Maybe<Int>;
  relatedType?: Maybe<Int>;
  relatedId?: Maybe<Int>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  status?: Maybe<Int>;
  disposeAt?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduUserstatisticCreateInput {
  id?: Maybe<Int>;
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduInformUpdateInput {
  type?: Maybe<Int>;
  relatedType?: Maybe<Int>;
  relatedId?: Maybe<Int>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
  status?: Maybe<Int>;
  disposeBy?: Maybe<ChongduAdminUpdateOneInput>;
  disposeAt?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduUserdetailUpdateInput {
  deviceCode?: Maybe<String>;
  deviceName?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduValidateWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduPetCardWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduInformCreateInput {
  id?: Maybe<Int>;
  type?: Maybe<Int>;
  relatedType?: Maybe<Int>;
  relatedId?: Maybe<Int>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  userId?: Maybe<ChongduUserCreateOneInput>;
  status?: Maybe<Int>;
  disposeBy?: Maybe<ChongduAdminCreateOneInput>;
  disposeAt?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduUserauthentLogUpdateManyMutationInput {
  userauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduValidateWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<ChongduValidateWhereInput[] | ChongduValidateWhereInput>;
  OR?: Maybe<ChongduValidateWhereInput[] | ChongduValidateWhereInput>;
  NOT?: Maybe<ChongduValidateWhereInput[] | ChongduValidateWhereInput>;
}

export interface ChongduUserauthentUpdateManyMutationInput {
  authtime?: Maybe<String>;
  backPhoto?: Maybe<String>;
  beginTime?: Maybe<String>;
  birthday?: Maybe<String>;
  cardAddress?: Maybe<String>;
  cardNum?: Maybe<String>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  handPhoto?: Maybe<String>;
  nation?: Maybe<String>;
  realName?: Maybe<String>;
  sex?: Maybe<Int>;
  signFrom?: Maybe<String>;
  status?: Maybe<Int>;
}

export type ChongduAddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserFavouriteUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduFocusingUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  fUserId?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPetRecommendWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceid?: Maybe<String>;
  deviceid_not?: Maybe<String>;
  deviceid_in?: Maybe<String[] | String>;
  deviceid_not_in?: Maybe<String[] | String>;
  deviceid_lt?: Maybe<String>;
  deviceid_lte?: Maybe<String>;
  deviceid_gt?: Maybe<String>;
  deviceid_gte?: Maybe<String>;
  deviceid_contains?: Maybe<String>;
  deviceid_not_contains?: Maybe<String>;
  deviceid_starts_with?: Maybe<String>;
  deviceid_not_starts_with?: Maybe<String>;
  deviceid_ends_with?: Maybe<String>;
  deviceid_not_ends_with?: Maybe<String>;
  devicename?: Maybe<String>;
  devicename_not?: Maybe<String>;
  devicename_in?: Maybe<String[] | String>;
  devicename_not_in?: Maybe<String[] | String>;
  devicename_lt?: Maybe<String>;
  devicename_lte?: Maybe<String>;
  devicename_gt?: Maybe<String>;
  devicename_gte?: Maybe<String>;
  devicename_contains?: Maybe<String>;
  devicename_not_contains?: Maybe<String>;
  devicename_starts_with?: Maybe<String>;
  devicename_not_starts_with?: Maybe<String>;
  devicename_ends_with?: Maybe<String>;
  devicename_not_ends_with?: Maybe<String>;
  devicetype?: Maybe<Int>;
  devicetype_not?: Maybe<Int>;
  devicetype_in?: Maybe<Int[] | Int>;
  devicetype_not_in?: Maybe<Int[] | Int>;
  devicetype_lt?: Maybe<Int>;
  devicetype_lte?: Maybe<Int>;
  devicetype_gt?: Maybe<Int>;
  devicetype_gte?: Maybe<Int>;
  endtime?: Maybe<String>;
  endtime_not?: Maybe<String>;
  endtime_in?: Maybe<String[] | String>;
  endtime_not_in?: Maybe<String[] | String>;
  endtime_lt?: Maybe<String>;
  endtime_lte?: Maybe<String>;
  endtime_gt?: Maybe<String>;
  endtime_gte?: Maybe<String>;
  endtime_contains?: Maybe<String>;
  endtime_not_contains?: Maybe<String>;
  endtime_starts_with?: Maybe<String>;
  endtime_not_starts_with?: Maybe<String>;
  endtime_ends_with?: Maybe<String>;
  endtime_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  starttime?: Maybe<String>;
  starttime_not?: Maybe<String>;
  starttime_in?: Maybe<String[] | String>;
  starttime_not_in?: Maybe<String[] | String>;
  starttime_lt?: Maybe<String>;
  starttime_lte?: Maybe<String>;
  starttime_gt?: Maybe<String>;
  starttime_gte?: Maybe<String>;
  starttime_contains?: Maybe<String>;
  starttime_not_contains?: Maybe<String>;
  starttime_starts_with?: Maybe<String>;
  starttime_not_starts_with?: Maybe<String>;
  starttime_ends_with?: Maybe<String>;
  starttime_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduPetRecommendWhereInput[] | ChongduPetRecommendWhereInput>;
  OR?: Maybe<ChongduPetRecommendWhereInput[] | ChongduPetRecommendWhereInput>;
  NOT?: Maybe<ChongduPetRecommendWhereInput[] | ChongduPetRecommendWhereInput>;
}

export interface ChongduFocusingUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  fUserId?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduTradingAreaUpdateManyMutationInput {
  pCityCode?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityName?: Maybe<String>;
  tradingAreaName?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  distance?: Maybe<Float>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
}

export interface ChongduFocusingCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  fUserId?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduTagDetailUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  tagId?: Maybe<Int>;
  worldId?: Maybe<Int>;
}

export type ChongduVersionWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduPetauthentLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  petauthentId?: Maybe<String>;
  petauthentId_not?: Maybe<String>;
  petauthentId_in?: Maybe<String[] | String>;
  petauthentId_not_in?: Maybe<String[] | String>;
  petauthentId_lt?: Maybe<String>;
  petauthentId_lte?: Maybe<String>;
  petauthentId_gt?: Maybe<String>;
  petauthentId_gte?: Maybe<String>;
  petauthentId_contains?: Maybe<String>;
  petauthentId_not_contains?: Maybe<String>;
  petauthentId_starts_with?: Maybe<String>;
  petauthentId_not_starts_with?: Maybe<String>;
  petauthentId_ends_with?: Maybe<String>;
  petauthentId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminWhereInput>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduPetauthentLogWhereInput[] | ChongduPetauthentLogWhereInput
  >;
  OR?: Maybe<ChongduPetauthentLogWhereInput[] | ChongduPetauthentLogWhereInput>;
  NOT?: Maybe<
    ChongduPetauthentLogWhereInput[] | ChongduPetauthentLogWhereInput
  >;
}

export interface ChongduFilemanageUpdateManyMutationInput {
  ct?: Maybe<String>;
  customtype?: Maybe<Int>;
  d?: Maybe<Int>;
  filename?: Maybe<String>;
  mt?: Maybe<String>;
  path?: Maybe<String>;
  pid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tablename?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduStatUpdateManyMutationInput {
  agentId?: Maybe<String>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  num?: Maybe<Int>;
  satus?: Maybe<Int>;
  sort?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduVersionWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  mac?: Maybe<String>;
  mac_not?: Maybe<String>;
  mac_in?: Maybe<String[] | String>;
  mac_not_in?: Maybe<String[] | String>;
  mac_lt?: Maybe<String>;
  mac_lte?: Maybe<String>;
  mac_gt?: Maybe<String>;
  mac_gte?: Maybe<String>;
  mac_contains?: Maybe<String>;
  mac_not_contains?: Maybe<String>;
  mac_starts_with?: Maybe<String>;
  mac_not_starts_with?: Maybe<String>;
  mac_ends_with?: Maybe<String>;
  mac_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  tyep?: Maybe<Int>;
  tyep_not?: Maybe<Int>;
  tyep_in?: Maybe<Int[] | Int>;
  tyep_not_in?: Maybe<Int[] | Int>;
  tyep_lt?: Maybe<Int>;
  tyep_lte?: Maybe<Int>;
  tyep_gt?: Maybe<Int>;
  tyep_gte?: Maybe<Int>;
  versionCode?: Maybe<String>;
  versionCode_not?: Maybe<String>;
  versionCode_in?: Maybe<String[] | String>;
  versionCode_not_in?: Maybe<String[] | String>;
  versionCode_lt?: Maybe<String>;
  versionCode_lte?: Maybe<String>;
  versionCode_gt?: Maybe<String>;
  versionCode_gte?: Maybe<String>;
  versionCode_contains?: Maybe<String>;
  versionCode_not_contains?: Maybe<String>;
  versionCode_starts_with?: Maybe<String>;
  versionCode_not_starts_with?: Maybe<String>;
  versionCode_ends_with?: Maybe<String>;
  versionCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduVersionWhereInput[] | ChongduVersionWhereInput>;
  OR?: Maybe<ChongduVersionWhereInput[] | ChongduVersionWhereInput>;
  NOT?: Maybe<ChongduVersionWhereInput[] | ChongduVersionWhereInput>;
}

export interface ChongduStatCreateInput {
  id?: Maybe<ID_Input>;
  agentId?: Maybe<String>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  num?: Maybe<Int>;
  satus?: Maybe<Int>;
  sort?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduFilemanageUpdateInput {
  ct?: Maybe<String>;
  customtype?: Maybe<Int>;
  d?: Maybe<Int>;
  filename?: Maybe<String>;
  mt?: Maybe<String>;
  path?: Maybe<String>;
  pid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tablename?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export type ChongduPlatformBusinessWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduFilemanageCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  customtype?: Maybe<Int>;
  d?: Maybe<Int>;
  filename?: Maybe<String>;
  mt?: Maybe<String>;
  path?: Maybe<String>;
  pid?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tablename?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduServiceTypeUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduDiscussUpdateManyMutationInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  pSComId?: Maybe<Int>;
  replyType?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServiceRecommendCreateInput {
  id?: Maybe<Int>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  s?: Maybe<Int>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduDiscussUpdateInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  pSComId?: Maybe<Int>;
  replyType?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServicePettypeCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  level?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  serviceId?: Maybe<String>;
}

export type ChongduViewcountWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduServiceImgCreateInput {
  id?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  imgType?: Maybe<Int>;
  mt?: Maybe<String>;
  serviceId?: Maybe<String>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduDiscussCreateInput {
  id?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  pSComId?: Maybe<Int>;
  replyType?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduProductTypeWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  pettypeId?: Maybe<String>;
  pettypeId_not?: Maybe<String>;
  pettypeId_in?: Maybe<String[] | String>;
  pettypeId_not_in?: Maybe<String[] | String>;
  pettypeId_lt?: Maybe<String>;
  pettypeId_lte?: Maybe<String>;
  pettypeId_gt?: Maybe<String>;
  pettypeId_gte?: Maybe<String>;
  pettypeId_contains?: Maybe<String>;
  pettypeId_not_contains?: Maybe<String>;
  pettypeId_starts_with?: Maybe<String>;
  pettypeId_not_starts_with?: Maybe<String>;
  pettypeId_ends_with?: Maybe<String>;
  pettypeId_not_ends_with?: Maybe<String>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduProductTypeWhereInput[] | ChongduProductTypeWhereInput>;
  OR?: Maybe<ChongduProductTypeWhereInput[] | ChongduProductTypeWhereInput>;
  NOT?: Maybe<ChongduProductTypeWhereInput[] | ChongduProductTypeWhereInput>;
}

export interface ChongduViewcountWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceid?: Maybe<String>;
  deviceid_not?: Maybe<String>;
  deviceid_in?: Maybe<String[] | String>;
  deviceid_not_in?: Maybe<String[] | String>;
  deviceid_lt?: Maybe<String>;
  deviceid_lte?: Maybe<String>;
  deviceid_gt?: Maybe<String>;
  deviceid_gte?: Maybe<String>;
  deviceid_contains?: Maybe<String>;
  deviceid_not_contains?: Maybe<String>;
  deviceid_starts_with?: Maybe<String>;
  deviceid_not_starts_with?: Maybe<String>;
  deviceid_ends_with?: Maybe<String>;
  deviceid_not_ends_with?: Maybe<String>;
  devicename?: Maybe<String>;
  devicename_not?: Maybe<String>;
  devicename_in?: Maybe<String[] | String>;
  devicename_not_in?: Maybe<String[] | String>;
  devicename_lt?: Maybe<String>;
  devicename_lte?: Maybe<String>;
  devicename_gt?: Maybe<String>;
  devicename_gte?: Maybe<String>;
  devicename_contains?: Maybe<String>;
  devicename_not_contains?: Maybe<String>;
  devicename_starts_with?: Maybe<String>;
  devicename_not_starts_with?: Maybe<String>;
  devicename_ends_with?: Maybe<String>;
  devicename_not_ends_with?: Maybe<String>;
  devicetype?: Maybe<Int>;
  devicetype_not?: Maybe<Int>;
  devicetype_in?: Maybe<Int[] | Int>;
  devicetype_not_in?: Maybe<Int[] | Int>;
  devicetype_lt?: Maybe<Int>;
  devicetype_lte?: Maybe<Int>;
  devicetype_gt?: Maybe<Int>;
  devicetype_gte?: Maybe<Int>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  pid?: Maybe<String>;
  pid_not?: Maybe<String>;
  pid_in?: Maybe<String[] | String>;
  pid_not_in?: Maybe<String[] | String>;
  pid_lt?: Maybe<String>;
  pid_lte?: Maybe<String>;
  pid_gt?: Maybe<String>;
  pid_gte?: Maybe<String>;
  pid_contains?: Maybe<String>;
  pid_not_contains?: Maybe<String>;
  pid_starts_with?: Maybe<String>;
  pid_not_starts_with?: Maybe<String>;
  pid_ends_with?: Maybe<String>;
  pid_not_ends_with?: Maybe<String>;
  s?: Maybe<Int>;
  s_not?: Maybe<Int>;
  s_in?: Maybe<Int[] | Int>;
  s_not_in?: Maybe<Int[] | Int>;
  s_lt?: Maybe<Int>;
  s_lte?: Maybe<Int>;
  s_gt?: Maybe<Int>;
  s_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  xu?: Maybe<Int>;
  xu_not?: Maybe<Int>;
  xu_in?: Maybe<Int[] | Int>;
  xu_not_in?: Maybe<Int[] | Int>;
  xu_lt?: Maybe<Int>;
  xu_lte?: Maybe<Int>;
  xu_gt?: Maybe<Int>;
  xu_gte?: Maybe<Int>;
  AND?: Maybe<ChongduViewcountWhereInput[] | ChongduViewcountWhereInput>;
  OR?: Maybe<ChongduViewcountWhereInput[] | ChongduViewcountWhereInput>;
  NOT?: Maybe<ChongduViewcountWhereInput[] | ChongduViewcountWhereInput>;
}

export interface ChongduServiceUpdateManyMutationInput {
  area?: Maybe<String>;
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endtime?: Maybe<String>;
  icon?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
}

export interface ChongduDataVersionUpdateManyMutationInput {
  ip?: Maybe<String>;
  mac?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  type?: Maybe<Int>;
  versionCode?: Maybe<String>;
}

export interface ChongduServiceTypeUpdateDataInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  img?: Maybe<String>;
  level?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  pid?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduDataVersionUpdateInput {
  ip?: Maybe<String>;
  mac?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  type?: Maybe<Int>;
  versionCode?: Maybe<String>;
}

export type ChongduProductBrandWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduDataVersionCreateInput {
  id?: Maybe<Int>;
  ip?: Maybe<String>;
  mac?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  type?: Maybe<Int>;
  versionCode?: Maybe<String>;
}

export interface ChongduSearchthinkUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hot?: Maybe<Int>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduCorrelationUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petLevelId?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  productId?: Maybe<String>;
  serviceId?: Maybe<String>;
  type?: Maybe<Int>;
}

export interface ChongduRoleMenuChildrenUpdateManyMutationInput {
  action?: Maybe<String>;
  authName?: Maybe<String>;
  menuUrlName?: Maybe<String>;
}

export type ChongduWorldWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type ChongduProductPettypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduCorrelationUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petLevelId?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  productId?: Maybe<String>;
  serviceId?: Maybe<String>;
  type?: Maybe<Int>;
}

export interface ChongduRoleMenuCreateOneInput {
  create?: Maybe<ChongduRoleMenuCreateInput>;
  connect?: Maybe<ChongduRoleMenuWhereUniqueInput>;
}

export interface ChongduWorldWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  activityName?: Maybe<String>;
  activityName_not?: Maybe<String>;
  activityName_in?: Maybe<String[] | String>;
  activityName_not_in?: Maybe<String[] | String>;
  activityName_lt?: Maybe<String>;
  activityName_lte?: Maybe<String>;
  activityName_gt?: Maybe<String>;
  activityName_gte?: Maybe<String>;
  activityName_contains?: Maybe<String>;
  activityName_not_contains?: Maybe<String>;
  activityName_starts_with?: Maybe<String>;
  activityName_not_starts_with?: Maybe<String>;
  activityName_ends_with?: Maybe<String>;
  activityName_not_ends_with?: Maybe<String>;
  commentStatus?: Maybe<Int>;
  commentStatus_not?: Maybe<Int>;
  commentStatus_in?: Maybe<Int[] | Int>;
  commentStatus_not_in?: Maybe<Int[] | Int>;
  commentStatus_lt?: Maybe<Int>;
  commentStatus_lte?: Maybe<Int>;
  commentStatus_gt?: Maybe<Int>;
  commentStatus_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  gif?: Maybe<String>;
  gif_not?: Maybe<String>;
  gif_in?: Maybe<String[] | String>;
  gif_not_in?: Maybe<String[] | String>;
  gif_lt?: Maybe<String>;
  gif_lte?: Maybe<String>;
  gif_gt?: Maybe<String>;
  gif_gte?: Maybe<String>;
  gif_contains?: Maybe<String>;
  gif_not_contains?: Maybe<String>;
  gif_starts_with?: Maybe<String>;
  gif_not_starts_with?: Maybe<String>;
  gif_ends_with?: Maybe<String>;
  gif_not_ends_with?: Maybe<String>;
  height?: Maybe<Float>;
  height_not?: Maybe<Float>;
  height_in?: Maybe<Float[] | Float>;
  height_not_in?: Maybe<Float[] | Float>;
  height_lt?: Maybe<Float>;
  height_lte?: Maybe<Float>;
  height_gt?: Maybe<Float>;
  height_gte?: Maybe<Float>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  joinCount?: Maybe<Int>;
  joinCount_not?: Maybe<Int>;
  joinCount_in?: Maybe<Int[] | Int>;
  joinCount_not_in?: Maybe<Int[] | Int>;
  joinCount_lt?: Maybe<Int>;
  joinCount_lte?: Maybe<Int>;
  joinCount_gt?: Maybe<Int>;
  joinCount_gte?: Maybe<Int>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  praiseCount?: Maybe<Int>;
  praiseCount_not?: Maybe<Int>;
  praiseCount_in?: Maybe<Int[] | Int>;
  praiseCount_not_in?: Maybe<Int[] | Int>;
  praiseCount_lt?: Maybe<Int>;
  praiseCount_lte?: Maybe<Int>;
  praiseCount_gt?: Maybe<Int>;
  praiseCount_gte?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  shareCount_not?: Maybe<Int>;
  shareCount_in?: Maybe<Int[] | Int>;
  shareCount_not_in?: Maybe<Int[] | Int>;
  shareCount_lt?: Maybe<Int>;
  shareCount_lte?: Maybe<Int>;
  shareCount_gt?: Maybe<Int>;
  shareCount_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<ChongduUserWhereInput>;
  video?: Maybe<String>;
  video_not?: Maybe<String>;
  video_in?: Maybe<String[] | String>;
  video_not_in?: Maybe<String[] | String>;
  video_lt?: Maybe<String>;
  video_lte?: Maybe<String>;
  video_gt?: Maybe<String>;
  video_gte?: Maybe<String>;
  video_contains?: Maybe<String>;
  video_not_contains?: Maybe<String>;
  video_starts_with?: Maybe<String>;
  video_not_starts_with?: Maybe<String>;
  video_ends_with?: Maybe<String>;
  video_not_ends_with?: Maybe<String>;
  viewCount?: Maybe<Int>;
  viewCount_not?: Maybe<Int>;
  viewCount_in?: Maybe<Int[] | Int>;
  viewCount_not_in?: Maybe<Int[] | Int>;
  viewCount_lt?: Maybe<Int>;
  viewCount_lte?: Maybe<Int>;
  viewCount_gt?: Maybe<Int>;
  viewCount_gte?: Maybe<Int>;
  width?: Maybe<Float>;
  width_not?: Maybe<Float>;
  width_in?: Maybe<Float[] | Float>;
  width_not_in?: Maybe<Float[] | Float>;
  width_lt?: Maybe<Float>;
  width_lte?: Maybe<Float>;
  width_gt?: Maybe<Float>;
  width_gte?: Maybe<Float>;
  AND?: Maybe<ChongduWorldWhereInput[] | ChongduWorldWhereInput>;
  OR?: Maybe<ChongduWorldWhereInput[] | ChongduWorldWhereInput>;
  NOT?: Maybe<ChongduWorldWhereInput[] | ChongduWorldWhereInput>;
}

export interface ChongduRoleMenuUpdateInput {
  menuName?: Maybe<String>;
  menuUrl?: Maybe<String>;
  menuChildrenId?: Maybe<String>;
  roleGroupId?: Maybe<ChongduRoleGroupUpdateOneInput>;
}

export interface ChongduCorrelationCreateInput {
  id?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petLevelId?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  productId?: Maybe<String>;
  serviceId?: Maybe<String>;
  type?: Maybe<Int>;
}

export interface ChongduRoleGroupUpdateInput {
  userId?: Maybe<String>;
  roleName?: Maybe<String>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
}

export interface ChongduCompanyrecommendUpdateManyMutationInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<Int>;
  endtime?: Maybe<DateTimeInput>;
  fullname?: Maybe<String>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
}

export interface ChongduProductSkuWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  attribute?: Maybe<String>;
  attribute_not?: Maybe<String>;
  attribute_in?: Maybe<String[] | String>;
  attribute_not_in?: Maybe<String[] | String>;
  attribute_lt?: Maybe<String>;
  attribute_lte?: Maybe<String>;
  attribute_gt?: Maybe<String>;
  attribute_gte?: Maybe<String>;
  attribute_contains?: Maybe<String>;
  attribute_not_contains?: Maybe<String>;
  attribute_starts_with?: Maybe<String>;
  attribute_not_starts_with?: Maybe<String>;
  attribute_ends_with?: Maybe<String>;
  attribute_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  lockStock?: Maybe<Int>;
  lockStock_not?: Maybe<Int>;
  lockStock_in?: Maybe<Int[] | Int>;
  lockStock_not_in?: Maybe<Int[] | Int>;
  lockStock_lt?: Maybe<Int>;
  lockStock_lte?: Maybe<Int>;
  lockStock_gt?: Maybe<Int>;
  lockStock_gte?: Maybe<Int>;
  lowStock?: Maybe<Int>;
  lowStock_not?: Maybe<Int>;
  lowStock_in?: Maybe<Int[] | Int>;
  lowStock_not_in?: Maybe<Int[] | Int>;
  lowStock_lt?: Maybe<Int>;
  lowStock_lte?: Maybe<Int>;
  lowStock_gt?: Maybe<Int>;
  lowStock_gte?: Maybe<Int>;
  num?: Maybe<Int>;
  num_not?: Maybe<Int>;
  num_in?: Maybe<Int[] | Int>;
  num_not_in?: Maybe<Int[] | Int>;
  num_lt?: Maybe<Int>;
  num_lte?: Maybe<Int>;
  num_gt?: Maybe<Int>;
  num_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  salesVolume?: Maybe<Int>;
  salesVolume_not?: Maybe<Int>;
  salesVolume_in?: Maybe<Int[] | Int>;
  salesVolume_not_in?: Maybe<Int[] | Int>;
  salesVolume_lt?: Maybe<Int>;
  salesVolume_lte?: Maybe<Int>;
  salesVolume_gt?: Maybe<Int>;
  salesVolume_gte?: Maybe<Int>;
  skuCode?: Maybe<String>;
  skuCode_not?: Maybe<String>;
  skuCode_in?: Maybe<String[] | String>;
  skuCode_not_in?: Maybe<String[] | String>;
  skuCode_lt?: Maybe<String>;
  skuCode_lte?: Maybe<String>;
  skuCode_gt?: Maybe<String>;
  skuCode_gte?: Maybe<String>;
  skuCode_contains?: Maybe<String>;
  skuCode_not_contains?: Maybe<String>;
  skuCode_starts_with?: Maybe<String>;
  skuCode_not_starts_with?: Maybe<String>;
  skuCode_ends_with?: Maybe<String>;
  skuCode_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<ChongduProductSkuWhereInput[] | ChongduProductSkuWhereInput>;
  OR?: Maybe<ChongduProductSkuWhereInput[] | ChongduProductSkuWhereInput>;
  NOT?: Maybe<ChongduProductSkuWhereInput[] | ChongduProductSkuWhereInput>;
}

export interface ChongduCompanyrecommendUpdateInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<Int>;
  endtime?: Maybe<DateTimeInput>;
  fullname?: Maybe<String>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
}

export interface ChongduRoleAuthUpdateInput {
  userId?: Maybe<String>;
  action?: Maybe<String>;
  method?: Maybe<String>;
  operationName?: Maybe<String>;
}

export interface ChongduCompanyrecommendCreateInput {
  id?: Maybe<Int>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<Int>;
  endtime?: Maybe<DateTimeInput>;
  fullname?: Maybe<String>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
}

export interface ChongduWorldReplySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduWorldReplyWhereInput>;
  AND?: Maybe<
    | ChongduWorldReplySubscriptionWhereInput[]
    | ChongduWorldReplySubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduWorldReplySubscriptionWhereInput[]
    | ChongduWorldReplySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduWorldReplySubscriptionWhereInput[]
    | ChongduWorldReplySubscriptionWhereInput
  >;
}

export type ChongduWorldCommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduCommentReviewWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  brower?: Maybe<Int>;
  brower_not?: Maybe<Int>;
  brower_in?: Maybe<Int[] | Int>;
  brower_not_in?: Maybe<Int[] | Int>;
  brower_lt?: Maybe<Int>;
  brower_lte?: Maybe<Int>;
  brower_gt?: Maybe<Int>;
  brower_gte?: Maybe<Int>;
  commentId?: Maybe<Int>;
  commentId_not?: Maybe<Int>;
  commentId_in?: Maybe<Int[] | Int>;
  commentId_not_in?: Maybe<Int[] | Int>;
  commentId_lt?: Maybe<Int>;
  commentId_lte?: Maybe<Int>;
  commentId_gt?: Maybe<Int>;
  commentId_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  likedNum?: Maybe<Int>;
  likedNum_not?: Maybe<Int>;
  likedNum_in?: Maybe<Int[] | Int>;
  likedNum_not_in?: Maybe<Int[] | Int>;
  likedNum_lt?: Maybe<Int>;
  likedNum_lte?: Maybe<Int>;
  likedNum_gt?: Maybe<Int>;
  likedNum_gte?: Maybe<Int>;
  replyNum?: Maybe<Int>;
  replyNum_not?: Maybe<Int>;
  replyNum_in?: Maybe<Int[] | Int>;
  replyNum_not_in?: Maybe<Int[] | Int>;
  replyNum_lt?: Maybe<Int>;
  replyNum_lte?: Maybe<Int>;
  replyNum_gt?: Maybe<Int>;
  replyNum_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  video?: Maybe<String>;
  video_not?: Maybe<String>;
  video_in?: Maybe<String[] | String>;
  video_not_in?: Maybe<String[] | String>;
  video_lt?: Maybe<String>;
  video_lte?: Maybe<String>;
  video_gt?: Maybe<String>;
  video_gte?: Maybe<String>;
  video_contains?: Maybe<String>;
  video_not_contains?: Maybe<String>;
  video_starts_with?: Maybe<String>;
  video_not_starts_with?: Maybe<String>;
  video_ends_with?: Maybe<String>;
  video_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduCommentReviewWhereInput[] | ChongduCommentReviewWhereInput
  >;
  OR?: Maybe<ChongduCommentReviewWhereInput[] | ChongduCommentReviewWhereInput>;
  NOT?: Maybe<
    ChongduCommentReviewWhereInput[] | ChongduCommentReviewWhereInput
  >;
}

export interface ChongduCompanyauthentLogUpdateManyMutationInput {
  companyauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduCompanyauthentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  authType?: Maybe<String>;
  authType_not?: Maybe<String>;
  authType_in?: Maybe<String[] | String>;
  authType_not_in?: Maybe<String[] | String>;
  authType_lt?: Maybe<String>;
  authType_lte?: Maybe<String>;
  authType_gt?: Maybe<String>;
  authType_gte?: Maybe<String>;
  authType_contains?: Maybe<String>;
  authType_not_contains?: Maybe<String>;
  authType_starts_with?: Maybe<String>;
  authType_not_starts_with?: Maybe<String>;
  authType_ends_with?: Maybe<String>;
  authType_not_ends_with?: Maybe<String>;
  backPhoto?: Maybe<String>;
  backPhoto_not?: Maybe<String>;
  backPhoto_in?: Maybe<String[] | String>;
  backPhoto_not_in?: Maybe<String[] | String>;
  backPhoto_lt?: Maybe<String>;
  backPhoto_lte?: Maybe<String>;
  backPhoto_gt?: Maybe<String>;
  backPhoto_gte?: Maybe<String>;
  backPhoto_contains?: Maybe<String>;
  backPhoto_not_contains?: Maybe<String>;
  backPhoto_starts_with?: Maybe<String>;
  backPhoto_not_starts_with?: Maybe<String>;
  backPhoto_ends_with?: Maybe<String>;
  backPhoto_not_ends_with?: Maybe<String>;
  bisDate?: Maybe<String>;
  bisDate_not?: Maybe<String>;
  bisDate_in?: Maybe<String[] | String>;
  bisDate_not_in?: Maybe<String[] | String>;
  bisDate_lt?: Maybe<String>;
  bisDate_lte?: Maybe<String>;
  bisDate_gt?: Maybe<String>;
  bisDate_gte?: Maybe<String>;
  bisDate_contains?: Maybe<String>;
  bisDate_not_contains?: Maybe<String>;
  bisDate_starts_with?: Maybe<String>;
  bisDate_not_starts_with?: Maybe<String>;
  bisDate_ends_with?: Maybe<String>;
  bisDate_not_ends_with?: Maybe<String>;
  bisPhoto?: Maybe<String>;
  bisPhoto_not?: Maybe<String>;
  bisPhoto_in?: Maybe<String[] | String>;
  bisPhoto_not_in?: Maybe<String[] | String>;
  bisPhoto_lt?: Maybe<String>;
  bisPhoto_lte?: Maybe<String>;
  bisPhoto_gt?: Maybe<String>;
  bisPhoto_gte?: Maybe<String>;
  bisPhoto_contains?: Maybe<String>;
  bisPhoto_not_contains?: Maybe<String>;
  bisPhoto_starts_with?: Maybe<String>;
  bisPhoto_not_starts_with?: Maybe<String>;
  bisPhoto_ends_with?: Maybe<String>;
  bisPhoto_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  companyAddress?: Maybe<String>;
  companyAddress_not?: Maybe<String>;
  companyAddress_in?: Maybe<String[] | String>;
  companyAddress_not_in?: Maybe<String[] | String>;
  companyAddress_lt?: Maybe<String>;
  companyAddress_lte?: Maybe<String>;
  companyAddress_gt?: Maybe<String>;
  companyAddress_gte?: Maybe<String>;
  companyAddress_contains?: Maybe<String>;
  companyAddress_not_contains?: Maybe<String>;
  companyAddress_starts_with?: Maybe<String>;
  companyAddress_not_starts_with?: Maybe<String>;
  companyAddress_ends_with?: Maybe<String>;
  companyAddress_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  discription?: Maybe<String>;
  discription_not?: Maybe<String>;
  discription_in?: Maybe<String[] | String>;
  discription_not_in?: Maybe<String[] | String>;
  discription_lt?: Maybe<String>;
  discription_lte?: Maybe<String>;
  discription_gt?: Maybe<String>;
  discription_gte?: Maybe<String>;
  discription_contains?: Maybe<String>;
  discription_not_contains?: Maybe<String>;
  discription_starts_with?: Maybe<String>;
  discription_not_starts_with?: Maybe<String>;
  discription_ends_with?: Maybe<String>;
  discription_not_ends_with?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  frontPhoto_not?: Maybe<String>;
  frontPhoto_in?: Maybe<String[] | String>;
  frontPhoto_not_in?: Maybe<String[] | String>;
  frontPhoto_lt?: Maybe<String>;
  frontPhoto_lte?: Maybe<String>;
  frontPhoto_gt?: Maybe<String>;
  frontPhoto_gte?: Maybe<String>;
  frontPhoto_contains?: Maybe<String>;
  frontPhoto_not_contains?: Maybe<String>;
  frontPhoto_starts_with?: Maybe<String>;
  frontPhoto_not_starts_with?: Maybe<String>;
  frontPhoto_ends_with?: Maybe<String>;
  frontPhoto_not_ends_with?: Maybe<String>;
  handPhoto?: Maybe<String>;
  handPhoto_not?: Maybe<String>;
  handPhoto_in?: Maybe<String[] | String>;
  handPhoto_not_in?: Maybe<String[] | String>;
  handPhoto_lt?: Maybe<String>;
  handPhoto_lte?: Maybe<String>;
  handPhoto_gt?: Maybe<String>;
  handPhoto_gte?: Maybe<String>;
  handPhoto_contains?: Maybe<String>;
  handPhoto_not_contains?: Maybe<String>;
  handPhoto_starts_with?: Maybe<String>;
  handPhoto_not_starts_with?: Maybe<String>;
  handPhoto_ends_with?: Maybe<String>;
  handPhoto_not_ends_with?: Maybe<String>;
  headPhoto?: Maybe<String>;
  headPhoto_not?: Maybe<String>;
  headPhoto_in?: Maybe<String[] | String>;
  headPhoto_not_in?: Maybe<String[] | String>;
  headPhoto_lt?: Maybe<String>;
  headPhoto_lte?: Maybe<String>;
  headPhoto_gt?: Maybe<String>;
  headPhoto_gte?: Maybe<String>;
  headPhoto_contains?: Maybe<String>;
  headPhoto_not_contains?: Maybe<String>;
  headPhoto_starts_with?: Maybe<String>;
  headPhoto_not_starts_with?: Maybe<String>;
  headPhoto_ends_with?: Maybe<String>;
  headPhoto_not_ends_with?: Maybe<String>;
  isSame?: Maybe<Int>;
  isSame_not?: Maybe<Int>;
  isSame_in?: Maybe<Int[] | Int>;
  isSame_not_in?: Maybe<Int[] | Int>;
  isSame_lt?: Maybe<Int>;
  isSame_lte?: Maybe<Int>;
  isSame_gt?: Maybe<Int>;
  isSame_gte?: Maybe<Int>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  legalDi?: Maybe<String>;
  legalDi_not?: Maybe<String>;
  legalDi_in?: Maybe<String[] | String>;
  legalDi_not_in?: Maybe<String[] | String>;
  legalDi_lt?: Maybe<String>;
  legalDi_lte?: Maybe<String>;
  legalDi_gt?: Maybe<String>;
  legalDi_gte?: Maybe<String>;
  legalDi_contains?: Maybe<String>;
  legalDi_not_contains?: Maybe<String>;
  legalDi_starts_with?: Maybe<String>;
  legalDi_not_starts_with?: Maybe<String>;
  legalDi_ends_with?: Maybe<String>;
  legalDi_not_ends_with?: Maybe<String>;
  legalName?: Maybe<String>;
  legalName_not?: Maybe<String>;
  legalName_in?: Maybe<String[] | String>;
  legalName_not_in?: Maybe<String[] | String>;
  legalName_lt?: Maybe<String>;
  legalName_lte?: Maybe<String>;
  legalName_gt?: Maybe<String>;
  legalName_gte?: Maybe<String>;
  legalName_contains?: Maybe<String>;
  legalName_not_contains?: Maybe<String>;
  legalName_starts_with?: Maybe<String>;
  legalName_not_starts_with?: Maybe<String>;
  legalName_ends_with?: Maybe<String>;
  legalName_not_ends_with?: Maybe<String>;
  legalTel?: Maybe<String>;
  legalTel_not?: Maybe<String>;
  legalTel_in?: Maybe<String[] | String>;
  legalTel_not_in?: Maybe<String[] | String>;
  legalTel_lt?: Maybe<String>;
  legalTel_lte?: Maybe<String>;
  legalTel_gt?: Maybe<String>;
  legalTel_gte?: Maybe<String>;
  legalTel_contains?: Maybe<String>;
  legalTel_not_contains?: Maybe<String>;
  legalTel_starts_with?: Maybe<String>;
  legalTel_not_starts_with?: Maybe<String>;
  legalTel_ends_with?: Maybe<String>;
  legalTel_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  nowAddress?: Maybe<String>;
  nowAddress_not?: Maybe<String>;
  nowAddress_in?: Maybe<String[] | String>;
  nowAddress_not_in?: Maybe<String[] | String>;
  nowAddress_lt?: Maybe<String>;
  nowAddress_lte?: Maybe<String>;
  nowAddress_gt?: Maybe<String>;
  nowAddress_gte?: Maybe<String>;
  nowAddress_contains?: Maybe<String>;
  nowAddress_not_contains?: Maybe<String>;
  nowAddress_starts_with?: Maybe<String>;
  nowAddress_not_starts_with?: Maybe<String>;
  nowAddress_ends_with?: Maybe<String>;
  nowAddress_not_ends_with?: Maybe<String>;
  otherPhoto?: Maybe<String>;
  otherPhoto_not?: Maybe<String>;
  otherPhoto_in?: Maybe<String[] | String>;
  otherPhoto_not_in?: Maybe<String[] | String>;
  otherPhoto_lt?: Maybe<String>;
  otherPhoto_lte?: Maybe<String>;
  otherPhoto_gt?: Maybe<String>;
  otherPhoto_gte?: Maybe<String>;
  otherPhoto_contains?: Maybe<String>;
  otherPhoto_not_contains?: Maybe<String>;
  otherPhoto_starts_with?: Maybe<String>;
  otherPhoto_not_starts_with?: Maybe<String>;
  otherPhoto_ends_with?: Maybe<String>;
  otherPhoto_not_ends_with?: Maybe<String>;
  registMoney?: Maybe<String>;
  registMoney_not?: Maybe<String>;
  registMoney_in?: Maybe<String[] | String>;
  registMoney_not_in?: Maybe<String[] | String>;
  registMoney_lt?: Maybe<String>;
  registMoney_lte?: Maybe<String>;
  registMoney_gt?: Maybe<String>;
  registMoney_gte?: Maybe<String>;
  registMoney_contains?: Maybe<String>;
  registMoney_not_contains?: Maybe<String>;
  registMoney_starts_with?: Maybe<String>;
  registMoney_not_starts_with?: Maybe<String>;
  registMoney_ends_with?: Maybe<String>;
  registMoney_not_ends_with?: Maybe<String>;
  setupDate?: Maybe<String>;
  setupDate_not?: Maybe<String>;
  setupDate_in?: Maybe<String[] | String>;
  setupDate_not_in?: Maybe<String[] | String>;
  setupDate_lt?: Maybe<String>;
  setupDate_lte?: Maybe<String>;
  setupDate_gt?: Maybe<String>;
  setupDate_gte?: Maybe<String>;
  setupDate_contains?: Maybe<String>;
  setupDate_not_contains?: Maybe<String>;
  setupDate_starts_with?: Maybe<String>;
  setupDate_not_starts_with?: Maybe<String>;
  setupDate_ends_with?: Maybe<String>;
  setupDate_not_ends_with?: Maybe<String>;
  socialCode?: Maybe<String>;
  socialCode_not?: Maybe<String>;
  socialCode_in?: Maybe<String[] | String>;
  socialCode_not_in?: Maybe<String[] | String>;
  socialCode_lt?: Maybe<String>;
  socialCode_lte?: Maybe<String>;
  socialCode_gt?: Maybe<String>;
  socialCode_gte?: Maybe<String>;
  socialCode_contains?: Maybe<String>;
  socialCode_not_contains?: Maybe<String>;
  socialCode_starts_with?: Maybe<String>;
  socialCode_not_starts_with?: Maybe<String>;
  socialCode_ends_with?: Maybe<String>;
  socialCode_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<
    ChongduCompanyauthentWhereInput[] | ChongduCompanyauthentWhereInput
  >;
  OR?: Maybe<
    ChongduCompanyauthentWhereInput[] | ChongduCompanyauthentWhereInput
  >;
  NOT?: Maybe<
    ChongduCompanyauthentWhereInput[] | ChongduCompanyauthentWhereInput
  >;
}

export interface ChongduWorldCommentWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  praiseCount_not?: Maybe<Int>;
  praiseCount_in?: Maybe<Int[] | Int>;
  praiseCount_not_in?: Maybe<Int[] | Int>;
  praiseCount_lt?: Maybe<Int>;
  praiseCount_lte?: Maybe<Int>;
  praiseCount_gt?: Maybe<Int>;
  praiseCount_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  worldId?: Maybe<Int>;
  worldId_not?: Maybe<Int>;
  worldId_in?: Maybe<Int[] | Int>;
  worldId_not_in?: Maybe<Int[] | Int>;
  worldId_lt?: Maybe<Int>;
  worldId_lte?: Maybe<Int>;
  worldId_gt?: Maybe<Int>;
  worldId_gte?: Maybe<Int>;
  AND?: Maybe<ChongduWorldCommentWhereInput[] | ChongduWorldCommentWhereInput>;
  OR?: Maybe<ChongduWorldCommentWhereInput[] | ChongduWorldCommentWhereInput>;
  NOT?: Maybe<ChongduWorldCommentWhereInput[] | ChongduWorldCommentWhereInput>;
}

export interface ChongduCompanyauthentLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  companyauthentId?: Maybe<String>;
  companyauthentId_not?: Maybe<String>;
  companyauthentId_in?: Maybe<String[] | String>;
  companyauthentId_not_in?: Maybe<String[] | String>;
  companyauthentId_lt?: Maybe<String>;
  companyauthentId_lte?: Maybe<String>;
  companyauthentId_gt?: Maybe<String>;
  companyauthentId_gte?: Maybe<String>;
  companyauthentId_contains?: Maybe<String>;
  companyauthentId_not_contains?: Maybe<String>;
  companyauthentId_starts_with?: Maybe<String>;
  companyauthentId_not_starts_with?: Maybe<String>;
  companyauthentId_ends_with?: Maybe<String>;
  companyauthentId_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminWhereInput>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduCompanyauthentLogWhereInput[] | ChongduCompanyauthentLogWhereInput
  >;
  OR?: Maybe<
    ChongduCompanyauthentLogWhereInput[] | ChongduCompanyauthentLogWhereInput
  >;
  NOT?: Maybe<
    ChongduCompanyauthentLogWhereInput[] | ChongduCompanyauthentLogWhereInput
  >;
}

export interface ChongduAdminUpsertNestedInput {
  update: ChongduAdminUpdateDataInput;
  create: ChongduAdminCreateInput;
}

export interface ChongduCompanyrecommendWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  deviceid?: Maybe<Int>;
  deviceid_not?: Maybe<Int>;
  deviceid_in?: Maybe<Int[] | Int>;
  deviceid_not_in?: Maybe<Int[] | Int>;
  deviceid_lt?: Maybe<Int>;
  deviceid_lte?: Maybe<Int>;
  deviceid_gt?: Maybe<Int>;
  deviceid_gte?: Maybe<Int>;
  endtime?: Maybe<DateTimeInput>;
  endtime_not?: Maybe<DateTimeInput>;
  endtime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endtime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endtime_lt?: Maybe<DateTimeInput>;
  endtime_lte?: Maybe<DateTimeInput>;
  endtime_gt?: Maybe<DateTimeInput>;
  endtime_gte?: Maybe<DateTimeInput>;
  fullname?: Maybe<String>;
  fullname_not?: Maybe<String>;
  fullname_in?: Maybe<String[] | String>;
  fullname_not_in?: Maybe<String[] | String>;
  fullname_lt?: Maybe<String>;
  fullname_lte?: Maybe<String>;
  fullname_gt?: Maybe<String>;
  fullname_gte?: Maybe<String>;
  fullname_contains?: Maybe<String>;
  fullname_not_contains?: Maybe<String>;
  fullname_starts_with?: Maybe<String>;
  fullname_not_starts_with?: Maybe<String>;
  fullname_ends_with?: Maybe<String>;
  fullname_not_ends_with?: Maybe<String>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  starttime?: Maybe<DateTimeInput>;
  starttime_not?: Maybe<DateTimeInput>;
  starttime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  starttime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  starttime_lt?: Maybe<DateTimeInput>;
  starttime_lte?: Maybe<DateTimeInput>;
  starttime_gt?: Maybe<DateTimeInput>;
  starttime_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduCompanyrecommendWhereInput[] | ChongduCompanyrecommendWhereInput
  >;
  OR?: Maybe<
    ChongduCompanyrecommendWhereInput[] | ChongduCompanyrecommendWhereInput
  >;
  NOT?: Maybe<
    ChongduCompanyrecommendWhereInput[] | ChongduCompanyrecommendWhereInput
  >;
}

export interface ChongduAdminUpdateDataInput {
  agentAdminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isAuth?: Maybe<Int>;
  lastLoginTime?: Maybe<String>;
  level?: Maybe<Int>;
  mac?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  pwd?: Maybe<String>;
  realName?: Maybe<String>;
  rt?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
  groupId?: Maybe<ChongduRoleGroupUpdateOneInput>;
}

export interface ChongduServiceAuthentdetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServiceAuthentdetailWhereInput>;
  AND?: Maybe<
    | ChongduServiceAuthentdetailSubscriptionWhereInput[]
    | ChongduServiceAuthentdetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServiceAuthentdetailSubscriptionWhereInput[]
    | ChongduServiceAuthentdetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServiceAuthentdetailSubscriptionWhereInput[]
    | ChongduServiceAuthentdetailSubscriptionWhereInput
  >;
}

export interface ChongduAdminUpdateOneInput {
  create?: Maybe<ChongduAdminCreateInput>;
  update?: Maybe<ChongduAdminUpdateDataInput>;
  upsert?: Maybe<ChongduAdminUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduAdminWhereUniqueInput>;
}

export interface ChongduRoleGroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRoleGroupWhereInput>;
  AND?: Maybe<
    | ChongduRoleGroupSubscriptionWhereInput[]
    | ChongduRoleGroupSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRoleGroupSubscriptionWhereInput[]
    | ChongduRoleGroupSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRoleGroupSubscriptionWhereInput[]
    | ChongduRoleGroupSubscriptionWhereInput
  >;
}

export interface ChongduCompanyauthentLogUpdateInput {
  companyauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminUpdateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduRecommendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRecommendWhereInput>;
  AND?: Maybe<
    | ChongduRecommendSubscriptionWhereInput[]
    | ChongduRecommendSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduRecommendSubscriptionWhereInput[]
    | ChongduRecommendSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduRecommendSubscriptionWhereInput[]
    | ChongduRecommendSubscriptionWhereInput
  >;
}

export type ChongduWorldJoinWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduProductPettypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductPettypeWhereInput>;
  AND?: Maybe<
    | ChongduProductPettypeSubscriptionWhereInput[]
    | ChongduProductPettypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductPettypeSubscriptionWhereInput[]
    | ChongduProductPettypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductPettypeSubscriptionWhereInput[]
    | ChongduProductPettypeSubscriptionWhereInput
  >;
}

export interface ChongduAdminCreateOneInput {
  create?: Maybe<ChongduAdminCreateInput>;
  connect?: Maybe<ChongduAdminWhereUniqueInput>;
}

export type ChongduInformWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldJoinWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  worldId?: Maybe<Int>;
  worldId_not?: Maybe<Int>;
  worldId_in?: Maybe<Int[] | Int>;
  worldId_not_in?: Maybe<Int[] | Int>;
  worldId_lt?: Maybe<Int>;
  worldId_lte?: Maybe<Int>;
  worldId_gt?: Maybe<Int>;
  worldId_gte?: Maybe<Int>;
  AND?: Maybe<ChongduWorldJoinWhereInput[] | ChongduWorldJoinWhereInput>;
  OR?: Maybe<ChongduWorldJoinWhereInput[] | ChongduWorldJoinWhereInput>;
  NOT?: Maybe<ChongduWorldJoinWhereInput[] | ChongduWorldJoinWhereInput>;
}

export interface ChongduPetImgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetImgWhereInput>;
  AND?: Maybe<
    ChongduPetImgSubscriptionWhereInput[] | ChongduPetImgSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduPetImgSubscriptionWhereInput[] | ChongduPetImgSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduPetImgSubscriptionWhereInput[] | ChongduPetImgSubscriptionWhereInput
  >;
}

export interface ChongduCompanyauthentLogCreateInput {
  id?: Maybe<Int>;
  companyauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminCreateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduLogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  cn?: Maybe<String>;
  cn_not?: Maybe<String>;
  cn_in?: Maybe<String[] | String>;
  cn_not_in?: Maybe<String[] | String>;
  cn_lt?: Maybe<String>;
  cn_lte?: Maybe<String>;
  cn_gt?: Maybe<String>;
  cn_gte?: Maybe<String>;
  cn_contains?: Maybe<String>;
  cn_not_contains?: Maybe<String>;
  cn_starts_with?: Maybe<String>;
  cn_not_starts_with?: Maybe<String>;
  cn_ends_with?: Maybe<String>;
  cn_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  dataId?: Maybe<Int>;
  dataId_not?: Maybe<Int>;
  dataId_in?: Maybe<Int[] | Int>;
  dataId_not_in?: Maybe<Int[] | Int>;
  dataId_lt?: Maybe<Int>;
  dataId_lte?: Maybe<Int>;
  dataId_gt?: Maybe<Int>;
  dataId_gte?: Maybe<Int>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  mn?: Maybe<String>;
  mn_not?: Maybe<String>;
  mn_in?: Maybe<String[] | String>;
  mn_not_in?: Maybe<String[] | String>;
  mn_lt?: Maybe<String>;
  mn_lte?: Maybe<String>;
  mn_gt?: Maybe<String>;
  mn_gte?: Maybe<String>;
  mn_contains?: Maybe<String>;
  mn_not_contains?: Maybe<String>;
  mn_starts_with?: Maybe<String>;
  mn_not_starts_with?: Maybe<String>;
  mn_ends_with?: Maybe<String>;
  mn_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  originalData?: Maybe<String>;
  originalData_not?: Maybe<String>;
  originalData_in?: Maybe<String[] | String>;
  originalData_not_in?: Maybe<String[] | String>;
  originalData_lt?: Maybe<String>;
  originalData_lte?: Maybe<String>;
  originalData_gt?: Maybe<String>;
  originalData_gte?: Maybe<String>;
  originalData_contains?: Maybe<String>;
  originalData_not_contains?: Maybe<String>;
  originalData_starts_with?: Maybe<String>;
  originalData_not_starts_with?: Maybe<String>;
  originalData_ends_with?: Maybe<String>;
  originalData_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  targetData?: Maybe<String>;
  targetData_not?: Maybe<String>;
  targetData_in?: Maybe<String[] | String>;
  targetData_not_in?: Maybe<String[] | String>;
  targetData_lt?: Maybe<String>;
  targetData_lte?: Maybe<String>;
  targetData_gt?: Maybe<String>;
  targetData_gte?: Maybe<String>;
  targetData_contains?: Maybe<String>;
  targetData_not_contains?: Maybe<String>;
  targetData_starts_with?: Maybe<String>;
  targetData_not_starts_with?: Maybe<String>;
  targetData_ends_with?: Maybe<String>;
  targetData_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduLogWhereInput[] | ChongduLogWhereInput>;
  OR?: Maybe<ChongduLogWhereInput[] | ChongduLogWhereInput>;
  NOT?: Maybe<ChongduLogWhereInput[] | ChongduLogWhereInput>;
}

export interface ChongduCompanyauthentUpdateManyMutationInput {
  authType?: Maybe<String>;
  backPhoto?: Maybe<String>;
  bisDate?: Maybe<String>;
  bisPhoto?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  companyAddress?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  discription?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  handPhoto?: Maybe<String>;
  headPhoto?: Maybe<String>;
  isSame?: Maybe<Int>;
  latitude?: Maybe<String>;
  legalDi?: Maybe<String>;
  legalName?: Maybe<String>;
  legalTel?: Maybe<String>;
  longitude?: Maybe<String>;
  merchantId?: Maybe<String>;
  name?: Maybe<String>;
  nowAddress?: Maybe<String>;
  otherPhoto?: Maybe<String>;
  registMoney?: Maybe<String>;
  setupDate?: Maybe<String>;
  socialCode?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduOrderWhereInput>;
  AND?: Maybe<
    ChongduOrderSubscriptionWhereInput[] | ChongduOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduOrderSubscriptionWhereInput[] | ChongduOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduOrderSubscriptionWhereInput[] | ChongduOrderSubscriptionWhereInput
  >;
}

export interface ChongduUserUpsertNestedInput {
  update: ChongduUserUpdateDataInput;
  create: ChongduUserCreateInput;
}

export interface ChongduMerchantImgSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduMerchantImgWhereInput>;
  AND?: Maybe<
    | ChongduMerchantImgSubscriptionWhereInput[]
    | ChongduMerchantImgSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduMerchantImgSubscriptionWhereInput[]
    | ChongduMerchantImgSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduMerchantImgSubscriptionWhereInput[]
    | ChongduMerchantImgSubscriptionWhereInput
  >;
}

export interface ChongduUserUpdateDataInput {
  balance?: Maybe<Float>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hash?: Maybe<String>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isaudit?: Maybe<Int>;
  isauthent?: Maybe<Int>;
  lastlogintime?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  nickname?: Maybe<String>;
  openidDy?: Maybe<String>;
  openidQq?: Maybe<String>;
  openidWx?: Maybe<String>;
  phone?: Maybe<String>;
  regeistType?: Maybe<Int>;
  regtime?: Maybe<String>;
  salt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  updateBy?: Maybe<String>;
  username?: Maybe<String>;
  vip?: Maybe<Int>;
}

export interface ChongduFocusingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduFocusingWhereInput>;
  AND?: Maybe<
    | ChongduFocusingSubscriptionWhereInput[]
    | ChongduFocusingSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduFocusingSubscriptionWhereInput[]
    | ChongduFocusingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduFocusingSubscriptionWhereInput[]
    | ChongduFocusingSubscriptionWhereInput
  >;
}

export type ChongduWorldLikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduCompanyauthentLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCompanyauthentLogWhereInput>;
  AND?: Maybe<
    | ChongduCompanyauthentLogSubscriptionWhereInput[]
    | ChongduCompanyauthentLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCompanyauthentLogSubscriptionWhereInput[]
    | ChongduCompanyauthentLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCompanyauthentLogSubscriptionWhereInput[]
    | ChongduCompanyauthentLogSubscriptionWhereInput
  >;
}

export interface ChongduUserUpdateOneInput {
  create?: Maybe<ChongduUserCreateInput>;
  update?: Maybe<ChongduUserUpdateDataInput>;
  upsert?: Maybe<ChongduUserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduUserWhereUniqueInput>;
}

export type ChongduMessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldLikeWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  relateId?: Maybe<Int>;
  relateId_not?: Maybe<Int>;
  relateId_in?: Maybe<Int[] | Int>;
  relateId_not_in?: Maybe<Int[] | Int>;
  relateId_lt?: Maybe<Int>;
  relateId_lte?: Maybe<Int>;
  relateId_gt?: Maybe<Int>;
  relateId_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduWorldLikeWhereInput[] | ChongduWorldLikeWhereInput>;
  OR?: Maybe<ChongduWorldLikeWhereInput[] | ChongduWorldLikeWhereInput>;
  NOT?: Maybe<ChongduWorldLikeWhereInput[] | ChongduWorldLikeWhereInput>;
}

export interface ChongduAgentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAgentWhereInput>;
  AND?: Maybe<
    ChongduAgentSubscriptionWhereInput[] | ChongduAgentSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduAgentSubscriptionWhereInput[] | ChongduAgentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduAgentSubscriptionWhereInput[] | ChongduAgentSubscriptionWhereInput
  >;
}

export interface ChongduAccountWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  favorNum?: Maybe<Int>;
  favorNum_not?: Maybe<Int>;
  favorNum_in?: Maybe<Int[] | Int>;
  favorNum_not_in?: Maybe<Int[] | Int>;
  favorNum_lt?: Maybe<Int>;
  favorNum_lte?: Maybe<Int>;
  favorNum_gt?: Maybe<Int>;
  favorNum_gte?: Maybe<Int>;
  isVip?: Maybe<Int>;
  isVip_not?: Maybe<Int>;
  isVip_in?: Maybe<Int[] | Int>;
  isVip_not_in?: Maybe<Int[] | Int>;
  isVip_lt?: Maybe<Int>;
  isVip_lte?: Maybe<Int>;
  isVip_gt?: Maybe<Int>;
  isVip_gte?: Maybe<Int>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  money?: Maybe<Float>;
  money_not?: Maybe<Float>;
  money_in?: Maybe<Float[] | Float>;
  money_not_in?: Maybe<Float[] | Float>;
  money_lt?: Maybe<Float>;
  money_lte?: Maybe<Float>;
  money_gt?: Maybe<Float>;
  money_gte?: Maybe<Float>;
  refreshNum?: Maybe<Int>;
  refreshNum_not?: Maybe<Int>;
  refreshNum_in?: Maybe<Int[] | Int>;
  refreshNum_not_in?: Maybe<Int[] | Int>;
  refreshNum_lt?: Maybe<Int>;
  refreshNum_lte?: Maybe<Int>;
  refreshNum_gt?: Maybe<Int>;
  refreshNum_gte?: Maybe<Int>;
  stickNum?: Maybe<Int>;
  stickNum_not?: Maybe<Int>;
  stickNum_in?: Maybe<Int[] | Int>;
  stickNum_not_in?: Maybe<Int[] | Int>;
  stickNum_lt?: Maybe<Int>;
  stickNum_lte?: Maybe<Int>;
  stickNum_gt?: Maybe<Int>;
  stickNum_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduAccountWhereInput[] | ChongduAccountWhereInput>;
  OR?: Maybe<ChongduAccountWhereInput[] | ChongduAccountWhereInput>;
  NOT?: Maybe<ChongduAccountWhereInput[] | ChongduAccountWhereInput>;
}

export interface ChongduModeldetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  action?: Maybe<String>;
  action_not?: Maybe<String>;
  action_in?: Maybe<String[] | String>;
  action_not_in?: Maybe<String[] | String>;
  action_lt?: Maybe<String>;
  action_lte?: Maybe<String>;
  action_gt?: Maybe<String>;
  action_gte?: Maybe<String>;
  action_contains?: Maybe<String>;
  action_not_contains?: Maybe<String>;
  action_starts_with?: Maybe<String>;
  action_not_starts_with?: Maybe<String>;
  action_ends_with?: Maybe<String>;
  action_not_ends_with?: Maybe<String>;
  alert?: Maybe<String>;
  alert_not?: Maybe<String>;
  alert_in?: Maybe<String[] | String>;
  alert_not_in?: Maybe<String[] | String>;
  alert_lt?: Maybe<String>;
  alert_lte?: Maybe<String>;
  alert_gt?: Maybe<String>;
  alert_gte?: Maybe<String>;
  alert_contains?: Maybe<String>;
  alert_not_contains?: Maybe<String>;
  alert_starts_with?: Maybe<String>;
  alert_not_starts_with?: Maybe<String>;
  alert_ends_with?: Maybe<String>;
  alert_not_ends_with?: Maybe<String>;
  ask?: Maybe<Int>;
  ask_not?: Maybe<Int>;
  ask_in?: Maybe<Int[] | Int>;
  ask_not_in?: Maybe<Int[] | Int>;
  ask_lt?: Maybe<Int>;
  ask_lte?: Maybe<Int>;
  ask_gt?: Maybe<Int>;
  ask_gte?: Maybe<Int>;
  auth?: Maybe<String>;
  auth_not?: Maybe<String>;
  auth_in?: Maybe<String[] | String>;
  auth_not_in?: Maybe<String[] | String>;
  auth_lt?: Maybe<String>;
  auth_lte?: Maybe<String>;
  auth_gt?: Maybe<String>;
  auth_gte?: Maybe<String>;
  auth_contains?: Maybe<String>;
  auth_not_contains?: Maybe<String>;
  auth_starts_with?: Maybe<String>;
  auth_not_starts_with?: Maybe<String>;
  auth_ends_with?: Maybe<String>;
  auth_not_ends_with?: Maybe<String>;
  buttomname?: Maybe<String>;
  buttomname_not?: Maybe<String>;
  buttomname_in?: Maybe<String[] | String>;
  buttomname_not_in?: Maybe<String[] | String>;
  buttomname_lt?: Maybe<String>;
  buttomname_lte?: Maybe<String>;
  buttomname_gt?: Maybe<String>;
  buttomname_gte?: Maybe<String>;
  buttomname_contains?: Maybe<String>;
  buttomname_not_contains?: Maybe<String>;
  buttomname_starts_with?: Maybe<String>;
  buttomname_not_starts_with?: Maybe<String>;
  buttomname_ends_with?: Maybe<String>;
  buttomname_not_ends_with?: Maybe<String>;
  button?: Maybe<String>;
  button_not?: Maybe<String>;
  button_in?: Maybe<String[] | String>;
  button_not_in?: Maybe<String[] | String>;
  button_lt?: Maybe<String>;
  button_lte?: Maybe<String>;
  button_gt?: Maybe<String>;
  button_gte?: Maybe<String>;
  button_contains?: Maybe<String>;
  button_not_contains?: Maybe<String>;
  button_starts_with?: Maybe<String>;
  button_not_starts_with?: Maybe<String>;
  button_ends_with?: Maybe<String>;
  button_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  function?: Maybe<String>;
  function_not?: Maybe<String>;
  function_in?: Maybe<String[] | String>;
  function_not_in?: Maybe<String[] | String>;
  function_lt?: Maybe<String>;
  function_lte?: Maybe<String>;
  function_gt?: Maybe<String>;
  function_gte?: Maybe<String>;
  function_contains?: Maybe<String>;
  function_not_contains?: Maybe<String>;
  function_starts_with?: Maybe<String>;
  function_not_starts_with?: Maybe<String>;
  function_ends_with?: Maybe<String>;
  function_not_ends_with?: Maybe<String>;
  heght?: Maybe<String>;
  heght_not?: Maybe<String>;
  heght_in?: Maybe<String[] | String>;
  heght_not_in?: Maybe<String[] | String>;
  heght_lt?: Maybe<String>;
  heght_lte?: Maybe<String>;
  heght_gt?: Maybe<String>;
  heght_gte?: Maybe<String>;
  heght_contains?: Maybe<String>;
  heght_not_contains?: Maybe<String>;
  heght_starts_with?: Maybe<String>;
  heght_not_starts_with?: Maybe<String>;
  heght_ends_with?: Maybe<String>;
  heght_not_ends_with?: Maybe<String>;
  method?: Maybe<String>;
  method_not?: Maybe<String>;
  method_in?: Maybe<String[] | String>;
  method_not_in?: Maybe<String[] | String>;
  method_lt?: Maybe<String>;
  method_lte?: Maybe<String>;
  method_gt?: Maybe<String>;
  method_gte?: Maybe<String>;
  method_contains?: Maybe<String>;
  method_not_contains?: Maybe<String>;
  method_starts_with?: Maybe<String>;
  method_not_starts_with?: Maybe<String>;
  method_ends_with?: Maybe<String>;
  method_not_ends_with?: Maybe<String>;
  methodname?: Maybe<String>;
  methodname_not?: Maybe<String>;
  methodname_in?: Maybe<String[] | String>;
  methodname_not_in?: Maybe<String[] | String>;
  methodname_lt?: Maybe<String>;
  methodname_lte?: Maybe<String>;
  methodname_gt?: Maybe<String>;
  methodname_gte?: Maybe<String>;
  methodname_contains?: Maybe<String>;
  methodname_not_contains?: Maybe<String>;
  methodname_starts_with?: Maybe<String>;
  methodname_not_starts_with?: Maybe<String>;
  methodname_ends_with?: Maybe<String>;
  methodname_not_ends_with?: Maybe<String>;
  modelId?: Maybe<String>;
  modelId_not?: Maybe<String>;
  modelId_in?: Maybe<String[] | String>;
  modelId_not_in?: Maybe<String[] | String>;
  modelId_lt?: Maybe<String>;
  modelId_lte?: Maybe<String>;
  modelId_gt?: Maybe<String>;
  modelId_gte?: Maybe<String>;
  modelId_contains?: Maybe<String>;
  modelId_not_contains?: Maybe<String>;
  modelId_starts_with?: Maybe<String>;
  modelId_not_starts_with?: Maybe<String>;
  modelId_ends_with?: Maybe<String>;
  modelId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  namespace?: Maybe<String>;
  namespace_not?: Maybe<String>;
  namespace_in?: Maybe<String[] | String>;
  namespace_not_in?: Maybe<String[] | String>;
  namespace_lt?: Maybe<String>;
  namespace_lte?: Maybe<String>;
  namespace_gt?: Maybe<String>;
  namespace_gte?: Maybe<String>;
  namespace_contains?: Maybe<String>;
  namespace_not_contains?: Maybe<String>;
  namespace_starts_with?: Maybe<String>;
  namespace_not_starts_with?: Maybe<String>;
  namespace_ends_with?: Maybe<String>;
  namespace_not_ends_with?: Maybe<String>;
  param?: Maybe<String>;
  param_not?: Maybe<String>;
  param_in?: Maybe<String[] | String>;
  param_not_in?: Maybe<String[] | String>;
  param_lt?: Maybe<String>;
  param_lte?: Maybe<String>;
  param_gt?: Maybe<String>;
  param_gte?: Maybe<String>;
  param_contains?: Maybe<String>;
  param_not_contains?: Maybe<String>;
  param_starts_with?: Maybe<String>;
  param_not_starts_with?: Maybe<String>;
  param_ends_with?: Maybe<String>;
  param_not_ends_with?: Maybe<String>;
  refresh?: Maybe<String>;
  refresh_not?: Maybe<String>;
  refresh_in?: Maybe<String[] | String>;
  refresh_not_in?: Maybe<String[] | String>;
  refresh_lt?: Maybe<String>;
  refresh_lte?: Maybe<String>;
  refresh_gt?: Maybe<String>;
  refresh_gte?: Maybe<String>;
  refresh_contains?: Maybe<String>;
  refresh_not_contains?: Maybe<String>;
  refresh_starts_with?: Maybe<String>;
  refresh_not_starts_with?: Maybe<String>;
  refresh_ends_with?: Maybe<String>;
  refresh_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  viewname?: Maybe<String>;
  viewname_not?: Maybe<String>;
  viewname_in?: Maybe<String[] | String>;
  viewname_not_in?: Maybe<String[] | String>;
  viewname_lt?: Maybe<String>;
  viewname_lte?: Maybe<String>;
  viewname_gt?: Maybe<String>;
  viewname_gte?: Maybe<String>;
  viewname_contains?: Maybe<String>;
  viewname_not_contains?: Maybe<String>;
  viewname_starts_with?: Maybe<String>;
  viewname_not_starts_with?: Maybe<String>;
  viewname_ends_with?: Maybe<String>;
  viewname_not_ends_with?: Maybe<String>;
  width?: Maybe<String>;
  width_not?: Maybe<String>;
  width_in?: Maybe<String[] | String>;
  width_not_in?: Maybe<String[] | String>;
  width_lt?: Maybe<String>;
  width_lte?: Maybe<String>;
  width_gt?: Maybe<String>;
  width_gte?: Maybe<String>;
  width_contains?: Maybe<String>;
  width_not_contains?: Maybe<String>;
  width_starts_with?: Maybe<String>;
  width_not_starts_with?: Maybe<String>;
  width_ends_with?: Maybe<String>;
  width_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduModeldetailWhereInput[] | ChongduModeldetailWhereInput>;
  OR?: Maybe<ChongduModeldetailWhereInput[] | ChongduModeldetailWhereInput>;
  NOT?: Maybe<ChongduModeldetailWhereInput[] | ChongduModeldetailWhereInput>;
}

export interface ChongduCompanyauthentUpdateInput {
  authType?: Maybe<String>;
  backPhoto?: Maybe<String>;
  bisDate?: Maybe<String>;
  bisPhoto?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  companyAddress?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  discription?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  handPhoto?: Maybe<String>;
  headPhoto?: Maybe<String>;
  isSame?: Maybe<Int>;
  latitude?: Maybe<String>;
  legalDi?: Maybe<String>;
  legalName?: Maybe<String>;
  legalTel?: Maybe<String>;
  longitude?: Maybe<String>;
  merchantId?: Maybe<String>;
  name?: Maybe<String>;
  nowAddress?: Maybe<String>;
  otherPhoto?: Maybe<String>;
  registMoney?: Maybe<String>;
  setupDate?: Maybe<String>;
  socialCode?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
}

export interface ChongduWorldUpdateDataInput {
  activityName?: Maybe<String>;
  commentStatus?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  gif?: Maybe<String>;
  height?: Maybe<Float>;
  image?: Maybe<String>;
  joinCount?: Maybe<Int>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  praiseCount?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
  video?: Maybe<String>;
  viewCount?: Maybe<Int>;
  width?: Maybe<Float>;
}

export interface ChongduUserCreateInput {
  id?: Maybe<ID_Input>;
  balance?: Maybe<Float>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hash?: Maybe<String>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isaudit?: Maybe<Int>;
  isauthent?: Maybe<Int>;
  lastlogintime?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  nickname?: Maybe<String>;
  openidDy?: Maybe<String>;
  openidQq?: Maybe<String>;
  openidWx?: Maybe<String>;
  phone?: Maybe<String>;
  regeistType?: Maybe<Int>;
  regtime?: Maybe<String>;
  salt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  updateBy?: Maybe<String>;
  username?: Maybe<String>;
  vip?: Maybe<Int>;
}

export interface ChongduWorldReplyUpdateInput {
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduUserCreateOneInput {
  create?: Maybe<ChongduUserCreateInput>;
  connect?: Maybe<ChongduUserWhereUniqueInput>;
}

export interface ChongduWorldJoinUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export type ChongduWorldReplyWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldUpdateManyMutationInput {
  activityName?: Maybe<String>;
  commentStatus?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  gif?: Maybe<String>;
  height?: Maybe<Float>;
  image?: Maybe<String>;
  joinCount?: Maybe<Int>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  praiseCount?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  type?: Maybe<Int>;
  video?: Maybe<String>;
  viewCount?: Maybe<Int>;
  width?: Maybe<Float>;
}

export interface ChongduCompanyauthentCreateInput {
  id?: Maybe<ID_Input>;
  authType?: Maybe<String>;
  backPhoto?: Maybe<String>;
  bisDate?: Maybe<String>;
  bisPhoto?: Maybe<String>;
  city?: Maybe<String>;
  citycode?: Maybe<String>;
  companyAddress?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  discription?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  handPhoto?: Maybe<String>;
  headPhoto?: Maybe<String>;
  isSame?: Maybe<Int>;
  latitude?: Maybe<String>;
  legalDi?: Maybe<String>;
  legalName?: Maybe<String>;
  legalTel?: Maybe<String>;
  longitude?: Maybe<String>;
  merchantId?: Maybe<String>;
  name?: Maybe<String>;
  nowAddress?: Maybe<String>;
  otherPhoto?: Maybe<String>;
  registMoney?: Maybe<String>;
  setupDate?: Maybe<String>;
  socialCode?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<ChongduUserCreateOneInput>;
}

export type ChongduOrderstatisticWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldReplyWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  commentId?: Maybe<Int>;
  commentId_not?: Maybe<Int>;
  commentId_in?: Maybe<Int[] | Int>;
  commentId_not_in?: Maybe<Int[] | Int>;
  commentId_lt?: Maybe<Int>;
  commentId_lte?: Maybe<Int>;
  commentId_gt?: Maybe<Int>;
  commentId_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  praiseCount_not?: Maybe<Int>;
  praiseCount_in?: Maybe<Int[] | Int>;
  praiseCount_not_in?: Maybe<Int[] | Int>;
  praiseCount_lt?: Maybe<Int>;
  praiseCount_lte?: Maybe<Int>;
  praiseCount_gt?: Maybe<Int>;
  praiseCount_gte?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  replyuserId_not?: Maybe<String>;
  replyuserId_in?: Maybe<String[] | String>;
  replyuserId_not_in?: Maybe<String[] | String>;
  replyuserId_lt?: Maybe<String>;
  replyuserId_lte?: Maybe<String>;
  replyuserId_gt?: Maybe<String>;
  replyuserId_gte?: Maybe<String>;
  replyuserId_contains?: Maybe<String>;
  replyuserId_not_contains?: Maybe<String>;
  replyuserId_starts_with?: Maybe<String>;
  replyuserId_not_starts_with?: Maybe<String>;
  replyuserId_ends_with?: Maybe<String>;
  replyuserId_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduWorldReplyWhereInput[] | ChongduWorldReplyWhereInput>;
  OR?: Maybe<ChongduWorldReplyWhereInput[] | ChongduWorldReplyWhereInput>;
  NOT?: Maybe<ChongduWorldReplyWhereInput[] | ChongduWorldReplyWhereInput>;
}

export interface ChongduValidateUpdateInput {
  code?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  phone?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduCommentReviewUpdateManyMutationInput {
  brower?: Maybe<Int>;
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  likedNum?: Maybe<Int>;
  replyNum?: Maybe<Int>;
  userId?: Maybe<String>;
  video?: Maybe<String>;
}

export interface ChongduPermissionWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parentId?: Maybe<String>;
  parentId_not?: Maybe<String>;
  parentId_in?: Maybe<String[] | String>;
  parentId_not_in?: Maybe<String[] | String>;
  parentId_lt?: Maybe<String>;
  parentId_lte?: Maybe<String>;
  parentId_gt?: Maybe<String>;
  parentId_gte?: Maybe<String>;
  parentId_contains?: Maybe<String>;
  parentId_not_contains?: Maybe<String>;
  parentId_starts_with?: Maybe<String>;
  parentId_not_starts_with?: Maybe<String>;
  parentId_ends_with?: Maybe<String>;
  parentId_not_ends_with?: Maybe<String>;
  parentIds?: Maybe<String>;
  parentIds_not?: Maybe<String>;
  parentIds_in?: Maybe<String[] | String>;
  parentIds_not_in?: Maybe<String[] | String>;
  parentIds_lt?: Maybe<String>;
  parentIds_lte?: Maybe<String>;
  parentIds_gt?: Maybe<String>;
  parentIds_gte?: Maybe<String>;
  parentIds_contains?: Maybe<String>;
  parentIds_not_contains?: Maybe<String>;
  parentIds_starts_with?: Maybe<String>;
  parentIds_not_starts_with?: Maybe<String>;
  parentIds_ends_with?: Maybe<String>;
  parentIds_not_ends_with?: Maybe<String>;
  permission?: Maybe<String>;
  permission_not?: Maybe<String>;
  permission_in?: Maybe<String[] | String>;
  permission_not_in?: Maybe<String[] | String>;
  permission_lt?: Maybe<String>;
  permission_lte?: Maybe<String>;
  permission_gt?: Maybe<String>;
  permission_gte?: Maybe<String>;
  permission_contains?: Maybe<String>;
  permission_not_contains?: Maybe<String>;
  permission_starts_with?: Maybe<String>;
  permission_not_starts_with?: Maybe<String>;
  permission_ends_with?: Maybe<String>;
  permission_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduPermissionWhereInput[] | ChongduPermissionWhereInput>;
  OR?: Maybe<ChongduPermissionWhereInput[] | ChongduPermissionWhereInput>;
  NOT?: Maybe<ChongduPermissionWhereInput[] | ChongduPermissionWhereInput>;
}

export interface ChongduCommentReviewUpdateInput {
  brower?: Maybe<Int>;
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  likedNum?: Maybe<Int>;
  replyNum?: Maybe<Int>;
  userId?: Maybe<String>;
  video?: Maybe<String>;
}

export interface ChongduPetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  addressId?: Maybe<Int>;
  addressId_not?: Maybe<Int>;
  addressId_in?: Maybe<Int[] | Int>;
  addressId_not_in?: Maybe<Int[] | Int>;
  addressId_lt?: Maybe<Int>;
  addressId_lte?: Maybe<Int>;
  addressId_gt?: Maybe<Int>;
  addressId_gte?: Maybe<Int>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  browser?: Maybe<Int>;
  browser_not?: Maybe<Int>;
  browser_in?: Maybe<Int[] | Int>;
  browser_not_in?: Maybe<Int[] | Int>;
  browser_lt?: Maybe<Int>;
  browser_lte?: Maybe<Int>;
  browser_gt?: Maybe<Int>;
  browser_gte?: Maybe<Int>;
  citycode?: Maybe<String>;
  citycode_not?: Maybe<String>;
  citycode_in?: Maybe<String[] | String>;
  citycode_not_in?: Maybe<String[] | String>;
  citycode_lt?: Maybe<String>;
  citycode_lte?: Maybe<String>;
  citycode_gt?: Maybe<String>;
  citycode_gte?: Maybe<String>;
  citycode_contains?: Maybe<String>;
  citycode_not_contains?: Maybe<String>;
  citycode_starts_with?: Maybe<String>;
  citycode_not_starts_with?: Maybe<String>;
  citycode_ends_with?: Maybe<String>;
  citycode_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  isMeet?: Maybe<Int>;
  isMeet_not?: Maybe<Int>;
  isMeet_in?: Maybe<Int[] | Int>;
  isMeet_not_in?: Maybe<Int[] | Int>;
  isMeet_lt?: Maybe<Int>;
  isMeet_lte?: Maybe<Int>;
  isMeet_gt?: Maybe<Int>;
  isMeet_gte?: Maybe<Int>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  pType?: Maybe<Int>;
  pType_not?: Maybe<Int>;
  pType_in?: Maybe<Int[] | Int>;
  pType_not_in?: Maybe<Int[] | Int>;
  pType_lt?: Maybe<Int>;
  pType_lte?: Maybe<Int>;
  pType_gt?: Maybe<Int>;
  pType_gte?: Maybe<Int>;
  sex?: Maybe<Int>;
  sex_not?: Maybe<Int>;
  sex_in?: Maybe<Int[] | Int>;
  sex_not_in?: Maybe<Int[] | Int>;
  sex_lt?: Maybe<Int>;
  sex_lte?: Maybe<Int>;
  sex_gt?: Maybe<Int>;
  sex_gte?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  shareCount_not?: Maybe<Int>;
  shareCount_in?: Maybe<Int[] | Int>;
  shareCount_not_in?: Maybe<Int[] | Int>;
  shareCount_lt?: Maybe<Int>;
  shareCount_lte?: Maybe<Int>;
  shareCount_gt?: Maybe<Int>;
  shareCount_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  typeId?: Maybe<ChongduPetTypeWhereInput>;
  userId?: Maybe<ChongduUserWhereInput>;
  AND?: Maybe<ChongduPetWhereInput[] | ChongduPetWhereInput>;
  OR?: Maybe<ChongduPetWhereInput[] | ChongduPetWhereInput>;
  NOT?: Maybe<ChongduPetWhereInput[] | ChongduPetWhereInput>;
}

export interface ChongduCommentReviewCreateInput {
  id?: Maybe<Int>;
  brower?: Maybe<Int>;
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  likedNum?: Maybe<Int>;
  replyNum?: Maybe<Int>;
  userId?: Maybe<String>;
  video?: Maybe<String>;
}

export interface ChongduPetCardWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  isSteriliz?: Maybe<Int>;
  isSteriliz_not?: Maybe<Int>;
  isSteriliz_in?: Maybe<Int[] | Int>;
  isSteriliz_not_in?: Maybe<Int[] | Int>;
  isSteriliz_lt?: Maybe<Int>;
  isSteriliz_lte?: Maybe<Int>;
  isSteriliz_gt?: Maybe<Int>;
  isSteriliz_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  petType?: Maybe<Int>;
  petType_not?: Maybe<Int>;
  petType_in?: Maybe<Int[] | Int>;
  petType_not_in?: Maybe<Int[] | Int>;
  petType_lt?: Maybe<Int>;
  petType_lte?: Maybe<Int>;
  petType_gt?: Maybe<Int>;
  petType_gte?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  praiseCount_not?: Maybe<Int>;
  praiseCount_in?: Maybe<Int[] | Int>;
  praiseCount_not_in?: Maybe<Int[] | Int>;
  praiseCount_lt?: Maybe<Int>;
  praiseCount_lte?: Maybe<Int>;
  praiseCount_gt?: Maybe<Int>;
  praiseCount_gte?: Maybe<Int>;
  sex?: Maybe<Int>;
  sex_not?: Maybe<Int>;
  sex_in?: Maybe<Int[] | Int>;
  sex_not_in?: Maybe<Int[] | Int>;
  sex_lt?: Maybe<Int>;
  sex_lte?: Maybe<Int>;
  sex_gt?: Maybe<Int>;
  sex_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  weight?: Maybe<String>;
  weight_not?: Maybe<String>;
  weight_in?: Maybe<String[] | String>;
  weight_not_in?: Maybe<String[] | String>;
  weight_lt?: Maybe<String>;
  weight_lte?: Maybe<String>;
  weight_gt?: Maybe<String>;
  weight_gte?: Maybe<String>;
  weight_contains?: Maybe<String>;
  weight_not_contains?: Maybe<String>;
  weight_starts_with?: Maybe<String>;
  weight_not_starts_with?: Maybe<String>;
  weight_ends_with?: Maybe<String>;
  weight_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduPetCardWhereInput[] | ChongduPetCardWhereInput>;
  OR?: Maybe<ChongduPetCardWhereInput[] | ChongduPetCardWhereInput>;
  NOT?: Maybe<ChongduPetCardWhereInput[] | ChongduPetCardWhereInput>;
}

export interface ChongduCommentReplyUpdateManyMutationInput {
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduUserauthentUpdateInput {
  authtime?: Maybe<String>;
  backPhoto?: Maybe<String>;
  beginTime?: Maybe<String>;
  birthday?: Maybe<String>;
  cardAddress?: Maybe<String>;
  cardNum?: Maybe<String>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endTime?: Maybe<String>;
  frontPhoto?: Maybe<String>;
  handPhoto?: Maybe<String>;
  nation?: Maybe<String>;
  realName?: Maybe<String>;
  sex?: Maybe<Int>;
  signFrom?: Maybe<String>;
  status?: Maybe<Int>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
}

export type ChongduWorldShieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduUserUpdateManyMutationInput {
  balance?: Maybe<Float>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hash?: Maybe<String>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isaudit?: Maybe<Int>;
  isauthent?: Maybe<Int>;
  lastlogintime?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  nickname?: Maybe<String>;
  openidDy?: Maybe<String>;
  openidQq?: Maybe<String>;
  openidWx?: Maybe<String>;
  phone?: Maybe<String>;
  regeistType?: Maybe<Int>;
  regtime?: Maybe<String>;
  salt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  updateBy?: Maybe<String>;
  username?: Maybe<String>;
  vip?: Maybe<Int>;
}

export interface ChongduCommentReplyUpdateInput {
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export type ChongduPetauthentLogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduWorldShieldWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  worldId?: Maybe<ChongduWorldWhereInput>;
  userId?: Maybe<ChongduUserWhereInput>;
  shieldBy?: Maybe<String>;
  shieldBy_not?: Maybe<String>;
  shieldBy_in?: Maybe<String[] | String>;
  shieldBy_not_in?: Maybe<String[] | String>;
  shieldBy_lt?: Maybe<String>;
  shieldBy_lte?: Maybe<String>;
  shieldBy_gt?: Maybe<String>;
  shieldBy_gte?: Maybe<String>;
  shieldBy_contains?: Maybe<String>;
  shieldBy_not_contains?: Maybe<String>;
  shieldBy_starts_with?: Maybe<String>;
  shieldBy_not_starts_with?: Maybe<String>;
  shieldBy_ends_with?: Maybe<String>;
  shieldBy_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  AND?: Maybe<ChongduWorldShieldWhereInput[] | ChongduWorldShieldWhereInput>;
  OR?: Maybe<ChongduWorldShieldWhereInput[] | ChongduWorldShieldWhereInput>;
  NOT?: Maybe<ChongduWorldShieldWhereInput[] | ChongduWorldShieldWhereInput>;
}

export interface ChongduStatUpdateInput {
  agentId?: Maybe<String>;
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  num?: Maybe<Int>;
  satus?: Maybe<Int>;
  sort?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduCommentReplyCreateInput {
  id?: Maybe<Int>;
  commentId?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  praiseCount?: Maybe<Int>;
  replyuserId?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduPlatformBusinessWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  currency?: Maybe<Float>;
  currency_not?: Maybe<Float>;
  currency_in?: Maybe<Float[] | Float>;
  currency_not_in?: Maybe<Float[] | Float>;
  currency_lt?: Maybe<Float>;
  currency_lte?: Maybe<Float>;
  currency_gt?: Maybe<Float>;
  currency_gte?: Maybe<Float>;
  cuserId?: Maybe<String>;
  cuserId_not?: Maybe<String>;
  cuserId_in?: Maybe<String[] | String>;
  cuserId_not_in?: Maybe<String[] | String>;
  cuserId_lt?: Maybe<String>;
  cuserId_lte?: Maybe<String>;
  cuserId_gt?: Maybe<String>;
  cuserId_gte?: Maybe<String>;
  cuserId_contains?: Maybe<String>;
  cuserId_not_contains?: Maybe<String>;
  cuserId_starts_with?: Maybe<String>;
  cuserId_not_starts_with?: Maybe<String>;
  cuserId_ends_with?: Maybe<String>;
  cuserId_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  length?: Maybe<Int>;
  length_not?: Maybe<Int>;
  length_in?: Maybe<Int[] | Int>;
  length_not_in?: Maybe<Int[] | Int>;
  length_lt?: Maybe<Int>;
  length_lte?: Maybe<Int>;
  length_gt?: Maybe<Int>;
  length_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserId?: Maybe<String>;
  muserId_not?: Maybe<String>;
  muserId_in?: Maybe<String[] | String>;
  muserId_not_in?: Maybe<String[] | String>;
  muserId_lt?: Maybe<String>;
  muserId_lte?: Maybe<String>;
  muserId_gt?: Maybe<String>;
  muserId_gte?: Maybe<String>;
  muserId_contains?: Maybe<String>;
  muserId_not_contains?: Maybe<String>;
  muserId_starts_with?: Maybe<String>;
  muserId_not_starts_with?: Maybe<String>;
  muserId_ends_with?: Maybe<String>;
  muserId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  rNum?: Maybe<Int>;
  rNum_not?: Maybe<Int>;
  rNum_in?: Maybe<Int[] | Int>;
  rNum_not_in?: Maybe<Int[] | Int>;
  rNum_lt?: Maybe<Int>;
  rNum_lte?: Maybe<Int>;
  rNum_gt?: Maybe<Int>;
  rNum_gte?: Maybe<Int>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  timestep?: Maybe<Int>;
  timestep_not?: Maybe<Int>;
  timestep_in?: Maybe<Int[] | Int>;
  timestep_not_in?: Maybe<Int[] | Int>;
  timestep_lt?: Maybe<Int>;
  timestep_lte?: Maybe<Int>;
  timestep_gt?: Maybe<Int>;
  timestep_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  AND?: Maybe<
    ChongduPlatformBusinessWhereInput[] | ChongduPlatformBusinessWhereInput
  >;
  OR?: Maybe<
    ChongduPlatformBusinessWhereInput[] | ChongduPlatformBusinessWhereInput
  >;
  NOT?: Maybe<
    ChongduPlatformBusinessWhereInput[] | ChongduPlatformBusinessWhereInput
  >;
}

export interface ChongduCommentPraiseUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<Int>;
  relateType?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServicePettypeUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  level?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  serviceId?: Maybe<String>;
}

export interface ChongduCommentPraiseUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<Int>;
  relateType?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  brandId?: Maybe<ChongduProductBrandWhereInput>;
  browser?: Maybe<Int>;
  browser_not?: Maybe<Int>;
  browser_in?: Maybe<Int[] | Int>;
  browser_not_in?: Maybe<Int[] | Int>;
  browser_lt?: Maybe<Int>;
  browser_lte?: Maybe<Int>;
  browser_gt?: Maybe<Int>;
  browser_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantWhereInput>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  promotionPrice?: Maybe<Float>;
  promotionPrice_not?: Maybe<Float>;
  promotionPrice_in?: Maybe<Float[] | Float>;
  promotionPrice_not_in?: Maybe<Float[] | Float>;
  promotionPrice_lt?: Maybe<Float>;
  promotionPrice_lte?: Maybe<Float>;
  promotionPrice_gt?: Maybe<Float>;
  promotionPrice_gte?: Maybe<Float>;
  sale?: Maybe<Int>;
  sale_not?: Maybe<Int>;
  sale_in?: Maybe<Int[] | Int>;
  sale_not_in?: Maybe<Int[] | Int>;
  sale_lt?: Maybe<Int>;
  sale_lte?: Maybe<Int>;
  sale_gt?: Maybe<Int>;
  sale_gte?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  shareCount_not?: Maybe<Int>;
  shareCount_in?: Maybe<Int[] | Int>;
  shareCount_not_in?: Maybe<Int[] | Int>;
  shareCount_lt?: Maybe<Int>;
  shareCount_lte?: Maybe<Int>;
  shareCount_gt?: Maybe<Int>;
  shareCount_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  typeId?: Maybe<ChongduProductTypeWhereInput>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduProductWhereInput[] | ChongduProductWhereInput>;
  OR?: Maybe<ChongduProductWhereInput[] | ChongduProductWhereInput>;
  NOT?: Maybe<ChongduProductWhereInput[] | ChongduProductWhereInput>;
}

export interface ChongduCommentPraiseCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<Int>;
  relateType?: Maybe<Int>;
  status?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServiceTypeUpsertNestedInput {
  update: ChongduServiceTypeUpdateDataInput;
  create: ChongduServiceTypeCreateInput;
}

export interface ChongduSearchthinkCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  hot?: Maybe<Int>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduCityUpdateManyMutationInput {
  code?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduAccountCreateInput {
  id?: Maybe<Int>;
  d?: Maybe<Int>;
  favorNum?: Maybe<Int>;
  isVip?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  money?: Maybe<Float>;
  refreshNum?: Maybe<Int>;
  stickNum?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduServiceCreateInput {
  id?: Maybe<ID_Input>;
  area?: Maybe<String>;
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endtime?: Maybe<String>;
  icon?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantCreateOneInput>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduServiceTypeCreateOneInput>;
  userId?: Maybe<ChongduUserCreateOneInput>;
}

export interface ChongduAccountUpdateInput {
  d?: Maybe<Int>;
  favorNum?: Maybe<Int>;
  isVip?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  money?: Maybe<Float>;
  refreshNum?: Maybe<Int>;
  stickNum?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduProductPettypeWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  petTypeId?: Maybe<Int>;
  petTypeId_not?: Maybe<Int>;
  petTypeId_in?: Maybe<Int[] | Int>;
  petTypeId_not_in?: Maybe<Int[] | Int>;
  petTypeId_lt?: Maybe<Int>;
  petTypeId_lte?: Maybe<Int>;
  petTypeId_gt?: Maybe<Int>;
  petTypeId_gte?: Maybe<Int>;
  petTypeName?: Maybe<String>;
  petTypeName_not?: Maybe<String>;
  petTypeName_in?: Maybe<String[] | String>;
  petTypeName_not_in?: Maybe<String[] | String>;
  petTypeName_lt?: Maybe<String>;
  petTypeName_lte?: Maybe<String>;
  petTypeName_gt?: Maybe<String>;
  petTypeName_gte?: Maybe<String>;
  petTypeName_contains?: Maybe<String>;
  petTypeName_not_contains?: Maybe<String>;
  petTypeName_starts_with?: Maybe<String>;
  petTypeName_not_starts_with?: Maybe<String>;
  petTypeName_ends_with?: Maybe<String>;
  petTypeName_not_ends_with?: Maybe<String>;
  productId?: Maybe<String>;
  productId_not?: Maybe<String>;
  productId_in?: Maybe<String[] | String>;
  productId_not_in?: Maybe<String[] | String>;
  productId_lt?: Maybe<String>;
  productId_lte?: Maybe<String>;
  productId_gt?: Maybe<String>;
  productId_gte?: Maybe<String>;
  productId_contains?: Maybe<String>;
  productId_not_contains?: Maybe<String>;
  productId_starts_with?: Maybe<String>;
  productId_not_starts_with?: Maybe<String>;
  productId_ends_with?: Maybe<String>;
  productId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduProductPettypeWhereInput[] | ChongduProductPettypeWhereInput
  >;
  OR?: Maybe<
    ChongduProductPettypeWhereInput[] | ChongduProductPettypeWhereInput
  >;
  NOT?: Maybe<
    ChongduProductPettypeWhereInput[] | ChongduProductPettypeWhereInput
  >;
}

export interface ChongduAccountUpdateManyMutationInput {
  d?: Maybe<Int>;
  favorNum?: Maybe<Int>;
  isVip?: Maybe<Int>;
  level?: Maybe<Int>;
  merchantId?: Maybe<String>;
  money?: Maybe<Float>;
  refreshNum?: Maybe<Int>;
  stickNum?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduRoleMenuCreateInput {
  id?: Maybe<Int>;
  menuName?: Maybe<String>;
  menuUrl?: Maybe<String>;
  menuChildrenId?: Maybe<String>;
  roleGroupId?: Maybe<ChongduRoleGroupCreateOneInput>;
}

export interface ChongduCommentUpdateManyMutationInput {
  anonymity?: Maybe<Int>;
  brower?: Maybe<Int>;
  commentType?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  isAdd?: Maybe<Int>;
  likedNum?: Maybe<Int>;
  productId?: Maybe<String>;
  replyNum?: Maybe<Int>;
  serviceId?: Maybe<String>;
  shareNum?: Maybe<Int>;
  starNum?: Maybe<Float>;
  userId?: Maybe<String>;
  video?: Maybe<String>;
  orderSn?: Maybe<String>;
}

export interface ChongduRoleDetailCreateInput {
  id?: Maybe<ID_Input>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  modeldetailId?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  roleId?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface ChongduCommentUpdateInput {
  anonymity?: Maybe<Int>;
  brower?: Maybe<Int>;
  commentType?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  isAdd?: Maybe<Int>;
  likedNum?: Maybe<Int>;
  productId?: Maybe<String>;
  replyNum?: Maybe<Int>;
  serviceId?: Maybe<String>;
  shareNum?: Maybe<Int>;
  starNum?: Maybe<Float>;
  userId?: Maybe<String>;
  video?: Maybe<String>;
  orderSn?: Maybe<String>;
}

export interface ChongduWorldJoinSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduWorldJoinWhereInput>;
  AND?: Maybe<
    | ChongduWorldJoinSubscriptionWhereInput[]
    | ChongduWorldJoinSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduWorldJoinSubscriptionWhereInput[]
    | ChongduWorldJoinSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduWorldJoinSubscriptionWhereInput[]
    | ChongduWorldJoinSubscriptionWhereInput
  >;
}

export interface ChongduAddressCreateInput {
  id?: Maybe<Int>;
  city?: Maybe<String>;
  code?: Maybe<String>;
  country?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  province?: Maybe<String>;
  region?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduUserbindSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduUserbindWhereInput>;
  AND?: Maybe<
    | ChongduUserbindSubscriptionWhereInput[]
    | ChongduUserbindSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduUserbindSubscriptionWhereInput[]
    | ChongduUserbindSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduUserbindSubscriptionWhereInput[]
    | ChongduUserbindSubscriptionWhereInput
  >;
}

export interface ChongduAddressUpdateInput {
  city?: Maybe<String>;
  code?: Maybe<String>;
  country?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  province?: Maybe<String>;
  region?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduServicePettypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduServicePettypeWhereInput>;
  AND?: Maybe<
    | ChongduServicePettypeSubscriptionWhereInput[]
    | ChongduServicePettypeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduServicePettypeSubscriptionWhereInput[]
    | ChongduServicePettypeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduServicePettypeSubscriptionWhereInput[]
    | ChongduServicePettypeSubscriptionWhereInput
  >;
}

export interface ChongduAddressUpdateManyMutationInput {
  city?: Maybe<String>;
  code?: Maybe<String>;
  country?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  province?: Maybe<String>;
  region?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduRoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduRoleWhereInput>;
  AND?: Maybe<
    ChongduRoleSubscriptionWhereInput[] | ChongduRoleSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduRoleSubscriptionWhereInput[] | ChongduRoleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduRoleSubscriptionWhereInput[] | ChongduRoleSubscriptionWhereInput
  >;
}

export interface ChongduAddressRelationCreateInput {
  id?: Maybe<Int>;
  city?: Maybe<String>;
  code?: Maybe<String>;
  country?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  province?: Maybe<String>;
  region?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduProductBrandSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduProductBrandWhereInput>;
  AND?: Maybe<
    | ChongduProductBrandSubscriptionWhereInput[]
    | ChongduProductBrandSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduProductBrandSubscriptionWhereInput[]
    | ChongduProductBrandSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduProductBrandSubscriptionWhereInput[]
    | ChongduProductBrandSubscriptionWhereInput
  >;
}

export interface ChongduAddressRelationUpdateInput {
  city?: Maybe<String>;
  code?: Maybe<String>;
  country?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  province?: Maybe<String>;
  region?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduPermissionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPermissionWhereInput>;
  AND?: Maybe<
    | ChongduPermissionSubscriptionWhereInput[]
    | ChongduPermissionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPermissionSubscriptionWhereInput[]
    | ChongduPermissionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPermissionSubscriptionWhereInput[]
    | ChongduPermissionSubscriptionWhereInput
  >;
}

export interface ChongduAddressRelationUpdateManyMutationInput {
  city?: Maybe<String>;
  code?: Maybe<String>;
  country?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  detailAdd?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  province?: Maybe<String>;
  region?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  userId?: Maybe<String>;
}

export type ChongduMenuWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduAdminCreateInput {
  id?: Maybe<ID_Input>;
  agentAdminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isAuth?: Maybe<Int>;
  lastLoginTime?: Maybe<String>;
  level?: Maybe<Int>;
  mac?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  pwd?: Maybe<String>;
  realName?: Maybe<String>;
  rt?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
  groupId?: Maybe<ChongduRoleGroupCreateOneInput>;
}

export interface ChongduMerchantImgWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  addr?: Maybe<String>;
  addr_not?: Maybe<String>;
  addr_in?: Maybe<String[] | String>;
  addr_not_in?: Maybe<String[] | String>;
  addr_lt?: Maybe<String>;
  addr_lte?: Maybe<String>;
  addr_gt?: Maybe<String>;
  addr_gte?: Maybe<String>;
  addr_contains?: Maybe<String>;
  addr_not_contains?: Maybe<String>;
  addr_starts_with?: Maybe<String>;
  addr_not_starts_with?: Maybe<String>;
  addr_ends_with?: Maybe<String>;
  addr_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  imgType?: Maybe<Int>;
  imgType_not?: Maybe<Int>;
  imgType_in?: Maybe<Int[] | Int>;
  imgType_not_in?: Maybe<Int[] | Int>;
  imgType_lt?: Maybe<Int>;
  imgType_lte?: Maybe<Int>;
  imgType_gt?: Maybe<Int>;
  imgType_gte?: Maybe<Int>;
  merchantId?: Maybe<String>;
  merchantId_not?: Maybe<String>;
  merchantId_in?: Maybe<String[] | String>;
  merchantId_not_in?: Maybe<String[] | String>;
  merchantId_lt?: Maybe<String>;
  merchantId_lte?: Maybe<String>;
  merchantId_gt?: Maybe<String>;
  merchantId_gte?: Maybe<String>;
  merchantId_contains?: Maybe<String>;
  merchantId_not_contains?: Maybe<String>;
  merchantId_starts_with?: Maybe<String>;
  merchantId_not_starts_with?: Maybe<String>;
  merchantId_ends_with?: Maybe<String>;
  merchantId_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduMerchantImgWhereInput[] | ChongduMerchantImgWhereInput>;
  OR?: Maybe<ChongduMerchantImgWhereInput[] | ChongduMerchantImgWhereInput>;
  NOT?: Maybe<ChongduMerchantImgWhereInput[] | ChongduMerchantImgWhereInput>;
}

export interface ChongduRoleGroupCreateOneInput {
  create?: Maybe<ChongduRoleGroupCreateInput>;
  connect?: Maybe<ChongduRoleGroupWhereUniqueInput>;
}

export interface ChongduCartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCartWhereInput>;
  AND?: Maybe<
    ChongduCartSubscriptionWhereInput[] | ChongduCartSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChongduCartSubscriptionWhereInput[] | ChongduCartSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChongduCartSubscriptionWhereInput[] | ChongduCartSubscriptionWhereInput
  >;
}

export interface ChongduRoleGroupCreateInput {
  id?: Maybe<Int>;
  userId?: Maybe<String>;
  roleName?: Maybe<String>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
}

export interface ChongduWorldShieldUpdateManyMutationInput {
  type?: Maybe<Int>;
  shieldBy?: Maybe<String>;
  status?: Maybe<Int>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduAdminUpdateInput {
  agentAdminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isAuth?: Maybe<Int>;
  lastLoginTime?: Maybe<String>;
  level?: Maybe<Int>;
  mac?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  pwd?: Maybe<String>;
  realName?: Maybe<String>;
  rt?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
  groupId?: Maybe<ChongduRoleGroupUpdateOneInput>;
}

export interface ChongduWorldLikeUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  relateId?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduRoleGroupUpdateOneInput {
  create?: Maybe<ChongduRoleGroupCreateInput>;
  update?: Maybe<ChongduRoleGroupUpdateDataInput>;
  upsert?: Maybe<ChongduRoleGroupUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChongduRoleGroupWhereUniqueInput>;
}

export interface ChongduWorldCreateInput {
  id?: Maybe<Int>;
  activityName?: Maybe<String>;
  commentStatus?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  gif?: Maybe<String>;
  height?: Maybe<Float>;
  image?: Maybe<String>;
  joinCount?: Maybe<Int>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  praiseCount?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<ChongduUserCreateOneInput>;
  video?: Maybe<String>;
  viewCount?: Maybe<Int>;
  width?: Maybe<Float>;
}

export interface ChongduRoleGroupUpdateDataInput {
  userId?: Maybe<String>;
  roleName?: Maybe<String>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
}

export interface ChongduVaccineBrandUpdateInput {
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  type?: Maybe<Int>;
}

export interface ChongduRoleGroupUpsertNestedInput {
  update: ChongduRoleGroupUpdateDataInput;
  create: ChongduRoleGroupCreateInput;
}

export interface ChongduUserbindUpdateManyMutationInput {
  bindtime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
}

export interface ChongduAdminUpdateManyMutationInput {
  agentAdminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  icon?: Maybe<String>;
  ip?: Maybe<String>;
  isAuth?: Maybe<Int>;
  lastLoginTime?: Maybe<String>;
  level?: Maybe<Int>;
  mac?: Maybe<String>;
  mail?: Maybe<String>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  nickname?: Maybe<String>;
  pwd?: Maybe<String>;
  realName?: Maybe<String>;
  rt?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  tel?: Maybe<String>;
  type?: Maybe<Int>;
}

export type ChongduPetRecommendWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduAdminRoleCreateInput {
  id?: Maybe<Int>;
  adminId?: Maybe<String>;
  cadminId?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  roleId?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduTagUpdateInput {
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  petCardId?: Maybe<Int>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  worldId?: Maybe<Int>;
}

export interface ChongduAdminRoleUpdateInput {
  adminId?: Maybe<String>;
  cadminId?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  roleId?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduServiceRecommendUpdateInput {
  citycode?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  endtime?: Maybe<String>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  name?: Maybe<String>;
  s?: Maybe<Int>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  starttime?: Maybe<String>;
  userid?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ChongduAdminRoleUpdateManyMutationInput {
  adminId?: Maybe<String>;
  cadminId?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  roleId?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduServiceAuthentdetailUpdateInput {
  audit?: Maybe<Int>;
  audittime?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  cuserid?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserid?: Maybe<String>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  userid?: Maybe<String>;
}

export interface ChongduAdvertisementCreateInput {
  id?: Maybe<Int>;
  adminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  mt?: Maybe<String>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduRoleMenuUpdateDataInput {
  menuName?: Maybe<String>;
  menuUrl?: Maybe<String>;
  menuChildrenId?: Maybe<String>;
  roleGroupId?: Maybe<ChongduRoleGroupUpdateOneInput>;
}

export interface ChongduAdvertisementUpdateInput {
  adminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  mt?: Maybe<String>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  url?: Maybe<String>;
}

export type ChongduProductSkuWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduAdvertisementUpdateManyMutationInput {
  adminId?: Maybe<String>;
  agentId?: Maybe<String>;
  cityCode?: Maybe<String>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  image?: Maybe<String>;
  mt?: Maybe<String>;
  relateId?: Maybe<String>;
  relateType?: Maybe<Int>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  type?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduVaccineBrandSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduVaccineBrandWhereInput>;
  AND?: Maybe<
    | ChongduVaccineBrandSubscriptionWhereInput[]
    | ChongduVaccineBrandSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduVaccineBrandSubscriptionWhereInput[]
    | ChongduVaccineBrandSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduVaccineBrandSubscriptionWhereInput[]
    | ChongduVaccineBrandSubscriptionWhereInput
  >;
}

export interface ChongduAdviceCreateInput {
  id?: Maybe<Int>;
  comment?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  type?: Maybe<Int>;
  useid?: Maybe<String>;
}

export type ChongduDataVersionWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduAdviceUpdateInput {
  comment?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  type?: Maybe<Int>;
  useid?: Maybe<String>;
}

export interface ChongduPetauthentLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduPetauthentLogWhereInput>;
  AND?: Maybe<
    | ChongduPetauthentLogSubscriptionWhereInput[]
    | ChongduPetauthentLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduPetauthentLogSubscriptionWhereInput[]
    | ChongduPetauthentLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduPetauthentLogSubscriptionWhereInput[]
    | ChongduPetauthentLogSubscriptionWhereInput
  >;
}

export interface ChongduAdviceUpdateManyMutationInput {
  comment?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  type?: Maybe<Int>;
  useid?: Maybe<String>;
}

export interface ChongduLoginLogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduLoginLogWhereInput>;
  AND?: Maybe<
    | ChongduLoginLogSubscriptionWhereInput[]
    | ChongduLoginLogSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduLoginLogSubscriptionWhereInput[]
    | ChongduLoginLogSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduLoginLogSubscriptionWhereInput[]
    | ChongduLoginLogSubscriptionWhereInput
  >;
}

export interface ChongduAgentCreateInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<Int>;
}

export interface ChongduAdminRoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduAdminRoleWhereInput>;
  AND?: Maybe<
    | ChongduAdminRoleSubscriptionWhereInput[]
    | ChongduAdminRoleSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduAdminRoleSubscriptionWhereInput[]
    | ChongduAdminRoleSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduAdminRoleSubscriptionWhereInput[]
    | ChongduAdminRoleSubscriptionWhereInput
  >;
}

export interface ChongduAgentUpdateInput {
  type?: Maybe<Int>;
}

export interface ChongduOrderinvoicedetailWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  audittime?: Maybe<String>;
  audittime_not?: Maybe<String>;
  audittime_in?: Maybe<String[] | String>;
  audittime_not_in?: Maybe<String[] | String>;
  audittime_lt?: Maybe<String>;
  audittime_lte?: Maybe<String>;
  audittime_gt?: Maybe<String>;
  audittime_gte?: Maybe<String>;
  audittime_contains?: Maybe<String>;
  audittime_not_contains?: Maybe<String>;
  audittime_starts_with?: Maybe<String>;
  audittime_not_starts_with?: Maybe<String>;
  audittime_ends_with?: Maybe<String>;
  audittime_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  cuserid?: Maybe<String>;
  cuserid_not?: Maybe<String>;
  cuserid_in?: Maybe<String[] | String>;
  cuserid_not_in?: Maybe<String[] | String>;
  cuserid_lt?: Maybe<String>;
  cuserid_lte?: Maybe<String>;
  cuserid_gt?: Maybe<String>;
  cuserid_gte?: Maybe<String>;
  cuserid_contains?: Maybe<String>;
  cuserid_not_contains?: Maybe<String>;
  cuserid_starts_with?: Maybe<String>;
  cuserid_not_starts_with?: Maybe<String>;
  cuserid_ends_with?: Maybe<String>;
  cuserid_not_ends_with?: Maybe<String>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  invoiceid?: Maybe<Int>;
  invoiceid_not?: Maybe<Int>;
  invoiceid_in?: Maybe<Int[] | Int>;
  invoiceid_not_in?: Maybe<Int[] | Int>;
  invoiceid_lt?: Maybe<Int>;
  invoiceid_lte?: Maybe<Int>;
  invoiceid_gt?: Maybe<Int>;
  invoiceid_gte?: Maybe<Int>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  muserid?: Maybe<String>;
  muserid_not?: Maybe<String>;
  muserid_in?: Maybe<String[] | String>;
  muserid_not_in?: Maybe<String[] | String>;
  muserid_lt?: Maybe<String>;
  muserid_lte?: Maybe<String>;
  muserid_gt?: Maybe<String>;
  muserid_gte?: Maybe<String>;
  muserid_contains?: Maybe<String>;
  muserid_not_contains?: Maybe<String>;
  muserid_starts_with?: Maybe<String>;
  muserid_not_starts_with?: Maybe<String>;
  muserid_ends_with?: Maybe<String>;
  muserid_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ChongduOrderinvoicedetailWhereInput[] | ChongduOrderinvoicedetailWhereInput
  >;
  OR?: Maybe<
    ChongduOrderinvoicedetailWhereInput[] | ChongduOrderinvoicedetailWhereInput
  >;
  NOT?: Maybe<
    ChongduOrderinvoicedetailWhereInput[] | ChongduOrderinvoicedetailWhereInput
  >;
}

export interface ChongduAgentUpdateManyMutationInput {
  type?: Maybe<Int>;
}

export interface ChongduUserstatisticUpdateInput {
  count?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  day?: Maybe<Int>;
  hour?: Maybe<Int>;
  month?: Maybe<Int>;
  mt?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  type?: Maybe<Int>;
  year?: Maybe<Int>;
}

export interface ChongduAppVersionCreateInput {
  id?: Maybe<Int>;
  appCode?: Maybe<String>;
  appId?: Maybe<String>;
  appVersion?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  deviceType?: Maybe<Int>;
  fileName?: Maybe<String>;
  forces?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduTradingAreaUpdateInput {
  pCityCode?: Maybe<Int>;
  cityCode?: Maybe<String>;
  cityName?: Maybe<String>;
  tradingAreaName?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  distance?: Maybe<Float>;
  cuserId?: Maybe<String>;
  muserId?: Maybe<String>;
  ct?: Maybe<String>;
  mt?: Maybe<String>;
}

export interface ChongduAppVersionUpdateInput {
  appCode?: Maybe<String>;
  appId?: Maybe<String>;
  appVersion?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  deviceType?: Maybe<Int>;
  fileName?: Maybe<String>;
  forces?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  url?: Maybe<String>;
}

export type ChongduProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChongduAppVersionUpdateManyMutationInput {
  appCode?: Maybe<String>;
  appId?: Maybe<String>;
  appVersion?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  description?: Maybe<String>;
  deviceType?: Maybe<Int>;
  fileName?: Maybe<String>;
  forces?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
  url?: Maybe<String>;
}

export interface ChongduRoleMenuUpdateManyMutationInput {
  menuName?: Maybe<String>;
  menuUrl?: Maybe<String>;
  menuChildrenId?: Maybe<String>;
}

export interface ChongduAppointmentCreateInput {
  id?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  isOk?: Maybe<Int>;
  levelmessage?: Maybe<String>;
  mark?: Maybe<String>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  state?: Maybe<Int>;
  subtype?: Maybe<Int>;
  time?: Maybe<String>;
  timebegin?: Maybe<String>;
  timeend?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  orderSn?: Maybe<String>;
}

export interface ChongduTagDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduTagDetailWhereInput>;
  AND?: Maybe<
    | ChongduTagDetailSubscriptionWhereInput[]
    | ChongduTagDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduTagDetailSubscriptionWhereInput[]
    | ChongduTagDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduTagDetailSubscriptionWhereInput[]
    | ChongduTagDetailSubscriptionWhereInput
  >;
}

export interface ChongduAppointmentUpdateInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  isOk?: Maybe<Int>;
  levelmessage?: Maybe<String>;
  mark?: Maybe<String>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  state?: Maybe<Int>;
  subtype?: Maybe<Int>;
  time?: Maybe<String>;
  timebegin?: Maybe<String>;
  timeend?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  orderSn?: Maybe<String>;
}

export interface ChongduOrderinvoiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduOrderinvoiceWhereInput>;
  AND?: Maybe<
    | ChongduOrderinvoiceSubscriptionWhereInput[]
    | ChongduOrderinvoiceSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduOrderinvoiceSubscriptionWhereInput[]
    | ChongduOrderinvoiceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduOrderinvoiceSubscriptionWhereInput[]
    | ChongduOrderinvoiceSubscriptionWhereInput
  >;
}

export interface ChongduAppointmentUpdateManyMutationInput {
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  deviceid?: Maybe<String>;
  devicename?: Maybe<String>;
  devicetype?: Maybe<Int>;
  isOk?: Maybe<Int>;
  levelmessage?: Maybe<String>;
  mark?: Maybe<String>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  serviceId?: Maybe<String>;
  sort?: Maybe<Int>;
  state?: Maybe<Int>;
  subtype?: Maybe<Int>;
  time?: Maybe<String>;
  timebegin?: Maybe<String>;
  timeend?: Maybe<String>;
  type?: Maybe<Int>;
  userId?: Maybe<String>;
  orderSn?: Maybe<String>;
}

export type ChongduOrderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ChongduCartCreateInput {
  id?: Maybe<ID_Input>;
  checked?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  num?: Maybe<Int>;
  productId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduUserauthentLogCreateInput {
  id?: Maybe<Int>;
  userauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminCreateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduServiceUpdateInput {
  area?: Maybe<String>;
  browser?: Maybe<Int>;
  content?: Maybe<String>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  endtime?: Maybe<String>;
  icon?: Maybe<String>;
  merchantId?: Maybe<ChongduMerchantUpdateOneInput>;
  mt?: Maybe<String>;
  name?: Maybe<String>;
  price?: Maybe<Float>;
  sale?: Maybe<Int>;
  shareCount?: Maybe<Int>;
  starttime?: Maybe<String>;
  status?: Maybe<Int>;
  title?: Maybe<String>;
  typeId?: Maybe<ChongduServiceTypeUpdateOneInput>;
  userId?: Maybe<ChongduUserUpdateOneInput>;
}

export interface ChongduCityUpdateInput {
  code?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduCityCreateInput {
  id?: Maybe<Int>;
  code?: Maybe<String>;
  ct?: Maybe<String>;
  cuserId?: Maybe<String>;
  d?: Maybe<Int>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  sort?: Maybe<Int>;
  status?: Maybe<Int>;
}

export interface ChongduCartUpdateManyMutationInput {
  checked?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  num?: Maybe<Int>;
  productId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduCartUpdateInput {
  checked?: Maybe<Int>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
  merchantId?: Maybe<String>;
  mt?: Maybe<String>;
  num?: Maybe<Int>;
  productId?: Maybe<String>;
  userId?: Maybe<String>;
}

export interface ChongduRoleAuthCreateInput {
  id?: Maybe<Int>;
  userId?: Maybe<String>;
  action?: Maybe<String>;
  method?: Maybe<String>;
  operationName?: Maybe<String>;
}

export interface ChongduServiceauthentLogUpdateInput {
  serviceauthentId?: Maybe<String>;
  status?: Maybe<Int>;
  remark?: Maybe<String>;
  cadminId?: Maybe<ChongduAdminUpdateOneInput>;
  ct?: Maybe<String>;
  d?: Maybe<Int>;
}

export interface ChongduVersionUpdateInput {
  ip?: Maybe<String>;
  mac?: Maybe<String>;
  mt?: Maybe<String>;
  muserId?: Maybe<String>;
  name?: Maybe<String>;
  tyep?: Maybe<Int>;
  versionCode?: Maybe<String>;
}

export interface ChongduCommentReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChongduCommentReviewWhereInput>;
  AND?: Maybe<
    | ChongduCommentReviewSubscriptionWhereInput[]
    | ChongduCommentReviewSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ChongduCommentReviewSubscriptionWhereInput[]
    | ChongduCommentReviewSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ChongduCommentReviewSubscriptionWhereInput[]
    | ChongduCommentReviewSubscriptionWhereInput
  >;
}

export interface ChongduFilemanageWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  ct?: Maybe<String>;
  ct_not?: Maybe<String>;
  ct_in?: Maybe<String[] | String>;
  ct_not_in?: Maybe<String[] | String>;
  ct_lt?: Maybe<String>;
  ct_lte?: Maybe<String>;
  ct_gt?: Maybe<String>;
  ct_gte?: Maybe<String>;
  ct_contains?: Maybe<String>;
  ct_not_contains?: Maybe<String>;
  ct_starts_with?: Maybe<String>;
  ct_not_starts_with?: Maybe<String>;
  ct_ends_with?: Maybe<String>;
  ct_not_ends_with?: Maybe<String>;
  customtype?: Maybe<Int>;
  customtype_not?: Maybe<Int>;
  customtype_in?: Maybe<Int[] | Int>;
  customtype_not_in?: Maybe<Int[] | Int>;
  customtype_lt?: Maybe<Int>;
  customtype_lte?: Maybe<Int>;
  customtype_gt?: Maybe<Int>;
  customtype_gte?: Maybe<Int>;
  d?: Maybe<Int>;
  d_not?: Maybe<Int>;
  d_in?: Maybe<Int[] | Int>;
  d_not_in?: Maybe<Int[] | Int>;
  d_lt?: Maybe<Int>;
  d_lte?: Maybe<Int>;
  d_gt?: Maybe<Int>;
  d_gte?: Maybe<Int>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mt?: Maybe<String>;
  mt_not?: Maybe<String>;
  mt_in?: Maybe<String[] | String>;
  mt_not_in?: Maybe<String[] | String>;
  mt_lt?: Maybe<String>;
  mt_lte?: Maybe<String>;
  mt_gt?: Maybe<String>;
  mt_gte?: Maybe<String>;
  mt_contains?: Maybe<String>;
  mt_not_contains?: Maybe<String>;
  mt_starts_with?: Maybe<String>;
  mt_not_starts_with?: Maybe<String>;
  mt_ends_with?: Maybe<String>;
  mt_not_ends_with?: Maybe<String>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  pid?: Maybe<String>;
  pid_not?: Maybe<String>;
  pid_in?: Maybe<String[] | String>;
  pid_not_in?: Maybe<String[] | String>;
  pid_lt?: Maybe<String>;
  pid_lte?: Maybe<String>;
  pid_gt?: Maybe<String>;
  pid_gte?: Maybe<String>;
  pid_contains?: Maybe<String>;
  pid_not_contains?: Maybe<String>;
  pid_starts_with?: Maybe<String>;
  pid_not_starts_with?: Maybe<String>;
  pid_ends_with?: Maybe<String>;
  pid_not_ends_with?: Maybe<String>;
  sort?: Maybe<Int>;
  sort_not?: Maybe<Int>;
  sort_in?: Maybe<Int[] | Int>;
  sort_not_in?: Maybe<Int[] | Int>;
  sort_lt?: Maybe<Int>;
  sort_lte?: Maybe<Int>;
  sort_gt?: Maybe<Int>;
  sort_gte?: Maybe<Int>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  tablename?: Maybe<String>;
  tablename_not?: Maybe<String>;
  tablename_in?: Maybe<String[] | String>;
  tablename_not_in?: Maybe<String[] | String>;
  tablename_lt?: Maybe<String>;
  tablename_lte?: Maybe<String>;
  tablename_gt?: Maybe<String>;
  tablename_gte?: Maybe<String>;
  tablename_contains?: Maybe<String>;
  tablename_not_contains?: Maybe<String>;
  tablename_starts_with?: Maybe<String>;
  tablename_not_starts_with?: Maybe<String>;
  tablename_ends_with?: Maybe<String>;
  tablename_not_ends_with?: Maybe<String>;
  type?: Maybe<Int>;
  type_not?: Maybe<Int>;
  type_in?: Maybe<Int[] | Int>;
  type_not_in?: Maybe<Int[] | Int>;
  type_lt?: Maybe<Int>;
  type_lte?: Maybe<Int>;
  type_gt?: Maybe<Int>;
  type_gte?: Maybe<Int>;
  userid?: Maybe<String>;
  userid_not?: Maybe<String>;
  userid_in?: Maybe<String[] | String>;
  userid_not_in?: Maybe<String[] | String>;
  userid_lt?: Maybe<String>;
  userid_lte?: Maybe<String>;
  userid_gt?: Maybe<String>;
  userid_gte?: Maybe<String>;
  userid_contains?: Maybe<String>;
  userid_not_contains?: Maybe<String>;
  userid_starts_with?: Maybe<String>;
  userid_not_starts_with?: Maybe<String>;
  userid_ends_with?: Maybe<String>;
  userid_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChongduFilemanageWhereInput[] | ChongduFilemanageWhereInput>;
  OR?: Maybe<ChongduFilemanageWhereInput[] | ChongduFilemanageWhereInput>;
  NOT?: Maybe<ChongduFilemanageWhereInput[] | ChongduFilemanageWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ChongduWorldLikePreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  relateId?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduWorldLikePreviousValuesPromise
  extends Promise<ChongduWorldLikePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduWorldLikePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduWorldLikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  relateId: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldShieldPreviousValues {
  id: Int;
  type?: Int;
  shieldBy?: String;
  status?: Int;
  ct?: String;
  mt?: String;
  d?: Int;
}

export interface ChongduWorldShieldPreviousValuesPromise
  extends Promise<ChongduWorldShieldPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<Int>;
  shieldBy: () => Promise<String>;
  status: () => Promise<Int>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduWorldShieldPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduWorldShieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  shieldBy: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduAppointment {
  count: Int;
}

export interface AggregateChongduAppointmentPromise
  extends Promise<AggregateChongduAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAppointmentSubscription
  extends Promise<AsyncIterator<AggregateChongduAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCommentPraiseConnection {
  pageInfo: PageInfo;
  edges: ChongduCommentPraiseEdge[];
}

export interface ChongduCommentPraiseConnectionPromise
  extends Promise<ChongduCommentPraiseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCommentPraiseEdge>>() => T;
  aggregate: <T = AggregateChongduCommentPraisePromise>() => T;
}

export interface ChongduCommentPraiseConnectionSubscription
  extends Promise<AsyncIterator<ChongduCommentPraiseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCommentPraiseEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCommentPraiseSubscription>() => T;
}

export interface ChongduOrder {
  id: Int;
  addressId?: Int;
  closeTime?: String;
  ct?: String;
  d?: Int;
  endTime?: String;
  mt?: String;
  orderNo?: String;
  payment?: Float;
  paymentTime?: String;
  paymentType?: Int;
  postage?: Float;
  sendTime?: String;
  status?: Int;
  userId?: String;
}

export interface ChongduOrderPromise
  extends Promise<ChongduOrder>,
    Fragmentable {
  id: () => Promise<Int>;
  addressId: () => Promise<Int>;
  closeTime: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  payment: () => Promise<Float>;
  paymentTime: () => Promise<String>;
  paymentType: () => Promise<Int>;
  postage: () => Promise<Float>;
  sendTime: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduOrderSubscription
  extends Promise<AsyncIterator<ChongduOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  addressId: () => Promise<AsyncIterator<Int>>;
  closeTime: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderNo: () => Promise<AsyncIterator<String>>;
  payment: () => Promise<AsyncIterator<Float>>;
  paymentTime: () => Promise<AsyncIterator<String>>;
  paymentType: () => Promise<AsyncIterator<Int>>;
  postage: () => Promise<AsyncIterator<Float>>;
  sendTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderNullablePromise
  extends Promise<ChongduOrder | null>,
    Fragmentable {
  id: () => Promise<Int>;
  addressId: () => Promise<Int>;
  closeTime: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  payment: () => Promise<Float>;
  paymentTime: () => Promise<String>;
  paymentType: () => Promise<Int>;
  postage: () => Promise<Float>;
  sendTime: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface AggregateChongduWorldShield {
  count: Int;
}

export interface AggregateChongduWorldShieldPromise
  extends Promise<AggregateChongduWorldShield>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduWorldShieldSubscription
  extends Promise<AsyncIterator<AggregateChongduWorldShield>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduModeldetail {
  count: Int;
}

export interface AggregateChongduModeldetailPromise
  extends Promise<AggregateChongduModeldetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduModeldetailSubscription
  extends Promise<AsyncIterator<AggregateChongduModeldetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldShieldConnection {
  pageInfo: PageInfo;
  edges: ChongduWorldShieldEdge[];
}

export interface ChongduWorldShieldConnectionPromise
  extends Promise<ChongduWorldShieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduWorldShieldEdge>>() => T;
  aggregate: <T = AggregateChongduWorldShieldPromise>() => T;
}

export interface ChongduWorldShieldConnectionSubscription
  extends Promise<AsyncIterator<ChongduWorldShieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduWorldShieldEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduWorldShieldSubscription>() => T;
}

export interface ChongduModeldetailEdge {
  node: ChongduModeldetail;
  cursor: String;
}

export interface ChongduModeldetailEdgePromise
  extends Promise<ChongduModeldetailEdge>,
    Fragmentable {
  node: <T = ChongduModeldetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduModeldetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduModeldetailEdge>>,
    Fragmentable {
  node: <T = ChongduModeldetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldShield {
  id: Int;
  type?: Int;
  shieldBy?: String;
  status?: Int;
  ct?: String;
  mt?: String;
  d?: Int;
}

export interface ChongduWorldShieldPromise
  extends Promise<ChongduWorldShield>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<Int>;
  worldId: <T = ChongduWorldPromise>() => T;
  userId: <T = ChongduUserPromise>() => T;
  shieldBy: () => Promise<String>;
  status: () => Promise<Int>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduWorldShieldSubscription
  extends Promise<AsyncIterator<ChongduWorldShield>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  worldId: <T = ChongduWorldSubscription>() => T;
  userId: <T = ChongduUserSubscription>() => T;
  shieldBy: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldShieldNullablePromise
  extends Promise<ChongduWorldShield | null>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<Int>;
  worldId: <T = ChongduWorldPromise>() => T;
  userId: <T = ChongduUserPromise>() => T;
  shieldBy: () => Promise<String>;
  status: () => Promise<Int>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduAccount {
  id: Int;
  d?: Int;
  favorNum?: Int;
  isVip?: Int;
  level?: Int;
  merchantId?: String;
  money?: Float;
  refreshNum?: Int;
  stickNum?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduAccountPromise
  extends Promise<ChongduAccount>,
    Fragmentable {
  id: () => Promise<Int>;
  d: () => Promise<Int>;
  favorNum: () => Promise<Int>;
  isVip: () => Promise<Int>;
  level: () => Promise<Int>;
  merchantId: () => Promise<String>;
  money: () => Promise<Float>;
  refreshNum: () => Promise<Int>;
  stickNum: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduAccountSubscription
  extends Promise<AsyncIterator<ChongduAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  d: () => Promise<AsyncIterator<Int>>;
  favorNum: () => Promise<AsyncIterator<Int>>;
  isVip: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  money: () => Promise<AsyncIterator<Float>>;
  refreshNum: () => Promise<AsyncIterator<Int>>;
  stickNum: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAccountNullablePromise
  extends Promise<ChongduAccount | null>,
    Fragmentable {
  id: () => Promise<Int>;
  d: () => Promise<Int>;
  favorNum: () => Promise<Int>;
  isVip: () => Promise<Int>;
  level: () => Promise<Int>;
  merchantId: () => Promise<String>;
  money: () => Promise<Float>;
  refreshNum: () => Promise<Int>;
  stickNum: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduWorldReplyEdge {
  node: ChongduWorldReply;
  cursor: String;
}

export interface ChongduWorldReplyEdgePromise
  extends Promise<ChongduWorldReplyEdge>,
    Fragmentable {
  node: <T = ChongduWorldReplyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduWorldReplyEdgeSubscription
  extends Promise<AsyncIterator<ChongduWorldReplyEdge>>,
    Fragmentable {
  node: <T = ChongduWorldReplySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduWorldReply {
  count: Int;
}

export interface AggregateChongduWorldReplyPromise
  extends Promise<AggregateChongduWorldReply>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduWorldReplySubscription
  extends Promise<AsyncIterator<AggregateChongduWorldReply>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCommentPraiseEdge {
  node: ChongduCommentPraise;
  cursor: String;
}

export interface ChongduCommentPraiseEdgePromise
  extends Promise<ChongduCommentPraiseEdge>,
    Fragmentable {
  node: <T = ChongduCommentPraisePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCommentPraiseEdgeSubscription
  extends Promise<AsyncIterator<ChongduCommentPraiseEdge>>,
    Fragmentable {
  node: <T = ChongduCommentPraiseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldReplyConnection {
  pageInfo: PageInfo;
  edges: ChongduWorldReplyEdge[];
}

export interface ChongduWorldReplyConnectionPromise
  extends Promise<ChongduWorldReplyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduWorldReplyEdge>>() => T;
  aggregate: <T = AggregateChongduWorldReplyPromise>() => T;
}

export interface ChongduWorldReplyConnectionSubscription
  extends Promise<AsyncIterator<ChongduWorldReplyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduWorldReplyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduWorldReplySubscription>() => T;
}

export interface ChongduAccountSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAccount;
  updatedFields: String[];
  previousValues: ChongduAccountPreviousValues;
}

export interface ChongduAccountSubscriptionPayloadPromise
  extends Promise<ChongduAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAccountPreviousValuesPromise>() => T;
}

export interface ChongduAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAccountPreviousValuesSubscription>() => T;
}

export interface ChongduWorldReply {
  id: Int;
  commentId?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  praiseCount?: Int;
  replyuserId?: String;
  userId?: String;
}

export interface ChongduWorldReplyPromise
  extends Promise<ChongduWorldReply>,
    Fragmentable {
  id: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  replyuserId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduWorldReplySubscription
  extends Promise<AsyncIterator<ChongduWorldReply>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  commentId: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  replyuserId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldReplyNullablePromise
  extends Promise<ChongduWorldReply | null>,
    Fragmentable {
  id: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  replyuserId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduWorldLikeEdge {
  node: ChongduWorldLike;
  cursor: String;
}

export interface ChongduWorldLikeEdgePromise
  extends Promise<ChongduWorldLikeEdge>,
    Fragmentable {
  node: <T = ChongduWorldLikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduWorldLikeEdgeSubscription
  extends Promise<AsyncIterator<ChongduWorldLikeEdge>>,
    Fragmentable {
  node: <T = ChongduWorldLikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAccountPreviousValues {
  id: Int;
  d?: Int;
  favorNum?: Int;
  isVip?: Int;
  level?: Int;
  merchantId?: String;
  money?: Float;
  refreshNum?: Int;
  stickNum?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduAccountPreviousValuesPromise
  extends Promise<ChongduAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  d: () => Promise<Int>;
  favorNum: () => Promise<Int>;
  isVip: () => Promise<Int>;
  level: () => Promise<Int>;
  merchantId: () => Promise<String>;
  money: () => Promise<Float>;
  refreshNum: () => Promise<Int>;
  stickNum: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  d: () => Promise<AsyncIterator<Int>>;
  favorNum: () => Promise<AsyncIterator<Int>>;
  isVip: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  money: () => Promise<AsyncIterator<Float>>;
  refreshNum: () => Promise<AsyncIterator<Int>>;
  stickNum: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldLike {
  id: Int;
  ct?: String;
  d?: Int;
  relateId?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduWorldLikePromise
  extends Promise<ChongduWorldLike>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduWorldLikeSubscription
  extends Promise<AsyncIterator<ChongduWorldLike>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  relateId: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldLikeNullablePromise
  extends Promise<ChongduWorldLike | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduModeldetailConnection {
  pageInfo: PageInfo;
  edges: ChongduModeldetailEdge[];
}

export interface ChongduModeldetailConnectionPromise
  extends Promise<ChongduModeldetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduModeldetailEdge>>() => T;
  aggregate: <T = AggregateChongduModeldetailPromise>() => T;
}

export interface ChongduModeldetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduModeldetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduModeldetailEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduModeldetailSubscription>() => T;
}

export interface ChongduWorldJoinEdge {
  node: ChongduWorldJoin;
  cursor: String;
}

export interface ChongduWorldJoinEdgePromise
  extends Promise<ChongduWorldJoinEdge>,
    Fragmentable {
  node: <T = ChongduWorldJoinPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduWorldJoinEdgeSubscription
  extends Promise<AsyncIterator<ChongduWorldJoinEdge>>,
    Fragmentable {
  node: <T = ChongduWorldJoinSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAddressSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAddress;
  updatedFields: String[];
  previousValues: ChongduAddressPreviousValues;
}

export interface ChongduAddressSubscriptionPayloadPromise
  extends Promise<ChongduAddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAddressPreviousValuesPromise>() => T;
}

export interface ChongduAddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAddressPreviousValuesSubscription>() => T;
}

export interface ChongduAccountConnection {
  pageInfo: PageInfo;
  edges: ChongduAccountEdge[];
}

export interface ChongduAccountConnectionPromise
  extends Promise<ChongduAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAccountEdge>>() => T;
  aggregate: <T = AggregateChongduAccountPromise>() => T;
}

export interface ChongduAccountConnectionSubscription
  extends Promise<AsyncIterator<ChongduAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAccountSubscription>() => T;
}

export interface ChongduAddressPreviousValues {
  id: Int;
  city?: String;
  code?: String;
  country?: String;
  ct?: String;
  d?: Int;
  detailAdd?: String;
  mt?: String;
  name?: String;
  province?: String;
  region?: String;
  sort?: Int;
  status?: Int;
  tel?: String;
  userId?: String;
}

export interface ChongduAddressPreviousValuesPromise
  extends Promise<ChongduAddressPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  country: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  detailAdd: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  province: () => Promise<String>;
  region: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduAddressPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  detailAdd: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduWorldComment {
  count: Int;
}

export interface AggregateChongduWorldCommentPromise
  extends Promise<AggregateChongduWorldComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduWorldCommentSubscription
  extends Promise<AsyncIterator<AggregateChongduWorldComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduModeldetail {
  id: ID_Output;
  action?: String;
  alert?: String;
  ask?: Int;
  auth?: String;
  buttomname?: String;
  button?: String;
  ct?: String;
  d?: Int;
  function?: String;
  heght?: String;
  method?: String;
  methodname?: String;
  modelId?: String;
  mt?: String;
  namespace?: String;
  param?: String;
  refresh?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  viewname?: String;
  width?: String;
}

export interface ChongduModeldetailPromise
  extends Promise<ChongduModeldetail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<String>;
  alert: () => Promise<String>;
  ask: () => Promise<Int>;
  auth: () => Promise<String>;
  buttomname: () => Promise<String>;
  button: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  function: () => Promise<String>;
  heght: () => Promise<String>;
  method: () => Promise<String>;
  methodname: () => Promise<String>;
  modelId: () => Promise<String>;
  mt: () => Promise<String>;
  namespace: () => Promise<String>;
  param: () => Promise<String>;
  refresh: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  viewname: () => Promise<String>;
  width: () => Promise<String>;
}

export interface ChongduModeldetailSubscription
  extends Promise<AsyncIterator<ChongduModeldetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  action: () => Promise<AsyncIterator<String>>;
  alert: () => Promise<AsyncIterator<String>>;
  ask: () => Promise<AsyncIterator<Int>>;
  auth: () => Promise<AsyncIterator<String>>;
  buttomname: () => Promise<AsyncIterator<String>>;
  button: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  function: () => Promise<AsyncIterator<String>>;
  heght: () => Promise<AsyncIterator<String>>;
  method: () => Promise<AsyncIterator<String>>;
  methodname: () => Promise<AsyncIterator<String>>;
  modelId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  namespace: () => Promise<AsyncIterator<String>>;
  param: () => Promise<AsyncIterator<String>>;
  refresh: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  viewname: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<String>>;
}

export interface ChongduModeldetailNullablePromise
  extends Promise<ChongduModeldetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<String>;
  alert: () => Promise<String>;
  ask: () => Promise<Int>;
  auth: () => Promise<String>;
  buttomname: () => Promise<String>;
  button: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  function: () => Promise<String>;
  heght: () => Promise<String>;
  method: () => Promise<String>;
  methodname: () => Promise<String>;
  modelId: () => Promise<String>;
  mt: () => Promise<String>;
  namespace: () => Promise<String>;
  param: () => Promise<String>;
  refresh: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  viewname: () => Promise<String>;
  width: () => Promise<String>;
}

export interface ChongduWorldCommentConnection {
  pageInfo: PageInfo;
  edges: ChongduWorldCommentEdge[];
}

export interface ChongduWorldCommentConnectionPromise
  extends Promise<ChongduWorldCommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduWorldCommentEdge>>() => T;
  aggregate: <T = AggregateChongduWorldCommentPromise>() => T;
}

export interface ChongduWorldCommentConnectionSubscription
  extends Promise<AsyncIterator<ChongduWorldCommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduWorldCommentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduWorldCommentSubscription>() => T;
}

export interface ChongduAddressRelationSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAddressRelation;
  updatedFields: String[];
  previousValues: ChongduAddressRelationPreviousValues;
}

export interface ChongduAddressRelationSubscriptionPayloadPromise
  extends Promise<ChongduAddressRelationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAddressRelationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAddressRelationPreviousValuesPromise>() => T;
}

export interface ChongduAddressRelationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAddressRelationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAddressRelationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAddressRelationPreviousValuesSubscription>() => T;
}

export interface ChongduWorldComment {
  id: Int;
  content?: String;
  ct?: String;
  d?: Int;
  praiseCount?: Int;
  status?: Int;
  userId?: String;
  worldId?: Int;
}

export interface ChongduWorldCommentPromise
  extends Promise<ChongduWorldComment>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduWorldCommentSubscription
  extends Promise<AsyncIterator<ChongduWorldComment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldCommentNullablePromise
  extends Promise<ChongduWorldComment | null>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduAddressRelationPreviousValues {
  id: Int;
  city?: String;
  code?: String;
  country?: String;
  ct?: String;
  d?: Int;
  detailAdd?: String;
  mt?: String;
  name?: String;
  province?: String;
  region?: String;
  sort?: Int;
  status?: Int;
  tel?: String;
  userId?: String;
}

export interface ChongduAddressRelationPreviousValuesPromise
  extends Promise<ChongduAddressRelationPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  country: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  detailAdd: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  province: () => Promise<String>;
  region: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduAddressRelationPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAddressRelationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  detailAdd: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldEdge {
  node: ChongduWorld;
  cursor: String;
}

export interface ChongduWorldEdgePromise
  extends Promise<ChongduWorldEdge>,
    Fragmentable {
  node: <T = ChongduWorldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduWorldEdgeSubscription
  extends Promise<AsyncIterator<ChongduWorldEdge>>,
    Fragmentable {
  node: <T = ChongduWorldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduModel {
  count: Int;
}

export interface AggregateChongduModelPromise
  extends Promise<AggregateChongduModel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduModelSubscription
  extends Promise<AsyncIterator<AggregateChongduModel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldShieldSubscriptionPayload {
  mutation: MutationType;
  node: ChongduWorldShield;
  updatedFields: String[];
  previousValues: ChongduWorldShieldPreviousValues;
}

export interface ChongduWorldShieldSubscriptionPayloadPromise
  extends Promise<ChongduWorldShieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduWorldShieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduWorldShieldPreviousValuesPromise>() => T;
}

export interface ChongduWorldShieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduWorldShieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduWorldShieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduWorldShieldPreviousValuesSubscription>() => T;
}

export interface ChongduAdminSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAdmin;
  updatedFields: String[];
  previousValues: ChongduAdminPreviousValues;
}

export interface ChongduAdminSubscriptionPayloadPromise
  extends Promise<ChongduAdminSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAdminPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAdminPreviousValuesPromise>() => T;
}

export interface ChongduAdminSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAdminSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAdminSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAdminPreviousValuesSubscription>() => T;
}

export interface AggregateChongduViewcount {
  count: Int;
}

export interface AggregateChongduViewcountPromise
  extends Promise<AggregateChongduViewcount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduViewcountSubscription
  extends Promise<AsyncIterator<AggregateChongduViewcount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAdminPreviousValues {
  id: ID_Output;
  agentAdminId?: String;
  agentId?: String;
  cityCode?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  ip?: String;
  isAuth?: Int;
  lastLoginTime?: String;
  level?: Int;
  mac?: String;
  mail?: String;
  mt?: String;
  name?: String;
  nickname?: String;
  pwd?: String;
  realName?: String;
  rt?: Int;
  sort?: Int;
  status?: Int;
  tel?: String;
  type?: Int;
}

export interface ChongduAdminPreviousValuesPromise
  extends Promise<ChongduAdminPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  agentAdminId: () => Promise<String>;
  agentId: () => Promise<String>;
  cityCode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  ip: () => Promise<String>;
  isAuth: () => Promise<Int>;
  lastLoginTime: () => Promise<String>;
  level: () => Promise<Int>;
  mac: () => Promise<String>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  pwd: () => Promise<String>;
  realName: () => Promise<String>;
  rt: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  type: () => Promise<Int>;
}

export interface ChongduAdminPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAdminPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  agentAdminId: () => Promise<AsyncIterator<String>>;
  agentId: () => Promise<AsyncIterator<String>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  isAuth: () => Promise<AsyncIterator<Int>>;
  lastLoginTime: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  mac: () => Promise<AsyncIterator<String>>;
  mail: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  pwd: () => Promise<AsyncIterator<String>>;
  realName: () => Promise<AsyncIterator<String>>;
  rt: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduViewcountConnection {
  pageInfo: PageInfo;
  edges: ChongduViewcountEdge[];
}

export interface ChongduViewcountConnectionPromise
  extends Promise<ChongduViewcountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduViewcountEdge>>() => T;
  aggregate: <T = AggregateChongduViewcountPromise>() => T;
}

export interface ChongduViewcountConnectionSubscription
  extends Promise<AsyncIterator<ChongduViewcountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduViewcountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduViewcountSubscription>() => T;
}

export interface ChongduModelEdge {
  node: ChongduModel;
  cursor: String;
}

export interface ChongduModelEdgePromise
  extends Promise<ChongduModelEdge>,
    Fragmentable {
  node: <T = ChongduModelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduModelEdgeSubscription
  extends Promise<AsyncIterator<ChongduModelEdge>>,
    Fragmentable {
  node: <T = ChongduModelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduViewcount {
  id: Int;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  ip?: String;
  mt?: String;
  muserid?: String;
  pid?: String;
  s?: Int;
  type?: Int;
  userid?: String;
  xu?: Int;
}

export interface ChongduViewcountPromise
  extends Promise<ChongduViewcount>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  ip: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  pid: () => Promise<String>;
  s: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
  xu: () => Promise<Int>;
}

export interface ChongduViewcountSubscription
  extends Promise<AsyncIterator<ChongduViewcount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<String>>;
  s: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  xu: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduViewcountNullablePromise
  extends Promise<ChongduViewcount | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  ip: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  pid: () => Promise<String>;
  s: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
  xu: () => Promise<Int>;
}

export interface ChongduAdminRoleSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAdminRole;
  updatedFields: String[];
  previousValues: ChongduAdminRolePreviousValues;
}

export interface ChongduAdminRoleSubscriptionPayloadPromise
  extends Promise<ChongduAdminRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAdminRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAdminRolePreviousValuesPromise>() => T;
}

export interface ChongduAdminRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAdminRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAdminRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAdminRolePreviousValuesSubscription>() => T;
}

export interface ChongduVersionEdge {
  node: ChongduVersion;
  cursor: String;
}

export interface ChongduVersionEdgePromise
  extends Promise<ChongduVersionEdge>,
    Fragmentable {
  node: <T = ChongduVersionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduVersionEdgeSubscription
  extends Promise<AsyncIterator<ChongduVersionEdge>>,
    Fragmentable {
  node: <T = ChongduVersionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAdminRolePreviousValues {
  id: Int;
  adminId?: String;
  cadminId?: String;
  ct?: String;
  d?: Int;
  mt?: String;
  roleId?: Int;
  sort?: Int;
  status?: Int;
}

export interface ChongduAdminRolePreviousValuesPromise
  extends Promise<ChongduAdminRolePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  cadminId: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  roleId: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduAdminRolePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAdminRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  adminId: () => Promise<AsyncIterator<String>>;
  cadminId: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  roleId: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduAccount {
  count: Int;
}

export interface AggregateChongduAccountPromise
  extends Promise<AggregateChongduAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAccountSubscription
  extends Promise<AsyncIterator<AggregateChongduAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduModelConnection {
  pageInfo: PageInfo;
  edges: ChongduModelEdge[];
}

export interface ChongduModelConnectionPromise
  extends Promise<ChongduModelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduModelEdge>>() => T;
  aggregate: <T = AggregateChongduModelPromise>() => T;
}

export interface ChongduModelConnectionSubscription
  extends Promise<AsyncIterator<ChongduModelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduModelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduModelSubscription>() => T;
}

export interface AggregateChongduValidate {
  count: Int;
}

export interface AggregateChongduValidatePromise
  extends Promise<AggregateChongduValidate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduValidateSubscription
  extends Promise<AsyncIterator<AggregateChongduValidate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAdvertisementSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAdvertisement;
  updatedFields: String[];
  previousValues: ChongduAdvertisementPreviousValues;
}

export interface ChongduAdvertisementSubscriptionPayloadPromise
  extends Promise<ChongduAdvertisementSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAdvertisementPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAdvertisementPreviousValuesPromise>() => T;
}

export interface ChongduAdvertisementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAdvertisementSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAdvertisementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAdvertisementPreviousValuesSubscription>() => T;
}

export interface ChongduValidateConnection {
  pageInfo: PageInfo;
  edges: ChongduValidateEdge[];
}

export interface ChongduValidateConnectionPromise
  extends Promise<ChongduValidateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduValidateEdge>>() => T;
  aggregate: <T = AggregateChongduValidatePromise>() => T;
}

export interface ChongduValidateConnectionSubscription
  extends Promise<AsyncIterator<ChongduValidateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduValidateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduValidateSubscription>() => T;
}

export interface ChongduAdvertisementPreviousValues {
  id: Int;
  adminId?: String;
  agentId?: String;
  cityCode?: String;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  mt?: String;
  relateId?: String;
  relateType?: Int;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  url?: String;
}

export interface ChongduAdvertisementPreviousValuesPromise
  extends Promise<ChongduAdvertisementPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  agentId: () => Promise<String>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  mt: () => Promise<String>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduAdvertisementPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAdvertisementPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  adminId: () => Promise<AsyncIterator<String>>;
  agentId: () => Promise<AsyncIterator<String>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  relateId: () => Promise<AsyncIterator<String>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduVaccineBrand {
  count: Int;
}

export interface AggregateChongduVaccineBrandPromise
  extends Promise<AggregateChongduVaccineBrand>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduVaccineBrandSubscription
  extends Promise<AsyncIterator<AggregateChongduVaccineBrand>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCart {
  id: ID_Output;
  checked?: Int;
  ct?: String;
  d?: Int;
  merchantId?: String;
  mt?: String;
  num?: Int;
  productId?: String;
  userId?: String;
}

export interface ChongduCartPromise extends Promise<ChongduCart>, Fragmentable {
  id: () => Promise<ID_Output>;
  checked: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  num: () => Promise<Int>;
  productId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduCartSubscription
  extends Promise<AsyncIterator<ChongduCart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checked: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  num: () => Promise<AsyncIterator<Int>>;
  productId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCartNullablePromise
  extends Promise<ChongduCart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checked: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  num: () => Promise<Int>;
  productId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduVaccineBrandConnection {
  pageInfo: PageInfo;
  edges: ChongduVaccineBrandEdge[];
}

export interface ChongduVaccineBrandConnectionPromise
  extends Promise<ChongduVaccineBrandConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduVaccineBrandEdge>>() => T;
  aggregate: <T = AggregateChongduVaccineBrandPromise>() => T;
}

export interface ChongduVaccineBrandConnectionSubscription
  extends Promise<AsyncIterator<ChongduVaccineBrandConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduVaccineBrandEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduVaccineBrandSubscription>() => T;
}

export interface ChongduAdviceSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAdvice;
  updatedFields: String[];
  previousValues: ChongduAdvicePreviousValues;
}

export interface ChongduAdviceSubscriptionPayloadPromise
  extends Promise<ChongduAdviceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAdvicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAdvicePreviousValuesPromise>() => T;
}

export interface ChongduAdviceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAdviceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAdviceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAdvicePreviousValuesSubscription>() => T;
}

export interface ChongduVaccineBrand {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  description?: String;
  image?: String;
  name?: String;
  sort?: Int;
  type?: Int;
}

export interface ChongduVaccineBrandPromise
  extends Promise<ChongduVaccineBrand>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduVaccineBrandSubscription
  extends Promise<AsyncIterator<ChongduVaccineBrand>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduVaccineBrandNullablePromise
  extends Promise<ChongduVaccineBrand | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduAdvicePreviousValues {
  id: Int;
  comment?: String;
  ct?: String;
  d?: Int;
  type?: Int;
  useid?: String;
}

export interface ChongduAdvicePreviousValuesPromise
  extends Promise<ChongduAdvicePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  comment: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  type: () => Promise<Int>;
  useid: () => Promise<String>;
}

export interface ChongduAdvicePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAdvicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  useid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduVaccineEdge {
  node: ChongduVaccine;
  cursor: String;
}

export interface ChongduVaccineEdgePromise
  extends Promise<ChongduVaccineEdge>,
    Fragmentable {
  node: <T = ChongduVaccinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduVaccineEdgeSubscription
  extends Promise<AsyncIterator<ChongduVaccineEdge>>,
    Fragmentable {
  node: <T = ChongduVaccineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduModel {
  id: ID_Output;
  action?: String;
  ct?: String;
  d?: Int;
  mt?: String;
  name?: String;
  namespace?: String;
  path?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduModelPromise
  extends Promise<ChongduModel>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  namespace: () => Promise<String>;
  path: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduModelSubscription
  extends Promise<AsyncIterator<ChongduModel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  action: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  namespace: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduModelNullablePromise
  extends Promise<ChongduModel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  namespace: () => Promise<String>;
  path: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduVaccine {
  id: Int;
  brandId?: Int;
  cityCode?: String;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  indexNum?: Int;
  mt?: String;
  petId?: String;
  status?: Int;
  street?: String;
  time?: String;
  userId?: String;
}

export interface ChongduVaccinePromise
  extends Promise<ChongduVaccine>,
    Fragmentable {
  id: () => Promise<Int>;
  brandId: () => Promise<Int>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  indexNum: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  street: () => Promise<String>;
  time: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduVaccineSubscription
  extends Promise<AsyncIterator<ChongduVaccine>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  brandId: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  indexNum: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  street: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduVaccineNullablePromise
  extends Promise<ChongduVaccine | null>,
    Fragmentable {
  id: () => Promise<Int>;
  brandId: () => Promise<Int>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  indexNum: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  street: () => Promise<String>;
  time: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduAgentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAgent;
  updatedFields: String[];
  previousValues: ChongduAgentPreviousValues;
}

export interface ChongduAgentSubscriptionPayloadPromise
  extends Promise<ChongduAgentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAgentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAgentPreviousValuesPromise>() => T;
}

export interface ChongduAgentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAgentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAgentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAgentPreviousValuesSubscription>() => T;
}

export interface ChongduUserstatisticEdge {
  node: ChongduUserstatistic;
  cursor: String;
}

export interface ChongduUserstatisticEdgePromise
  extends Promise<ChongduUserstatisticEdge>,
    Fragmentable {
  node: <T = ChongduUserstatisticPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserstatisticEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserstatisticEdge>>,
    Fragmentable {
  node: <T = ChongduUserstatisticSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAgentPreviousValues {
  id: ID_Output;
  type?: Int;
}

export interface ChongduAgentPreviousValuesPromise
  extends Promise<ChongduAgentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
}

export interface ChongduAgentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAgentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAddressConnection {
  pageInfo: PageInfo;
  edges: ChongduAddressEdge[];
}

export interface ChongduAddressConnectionPromise
  extends Promise<ChongduAddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAddressEdge>>() => T;
  aggregate: <T = AggregateChongduAddressPromise>() => T;
}

export interface ChongduAddressConnectionSubscription
  extends Promise<AsyncIterator<ChongduAddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAddressSubscription>() => T;
}

export interface AggregateChongduMessage {
  count: Int;
}

export interface AggregateChongduMessagePromise
  extends Promise<AggregateChongduMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduMessageSubscription
  extends Promise<AsyncIterator<AggregateChongduMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduUserdetail {
  count: Int;
}

export interface AggregateChongduUserdetailPromise
  extends Promise<AggregateChongduUserdetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserdetailSubscription
  extends Promise<AsyncIterator<AggregateChongduUserdetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAppVersionSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAppVersion;
  updatedFields: String[];
  previousValues: ChongduAppVersionPreviousValues;
}

export interface ChongduAppVersionSubscriptionPayloadPromise
  extends Promise<ChongduAppVersionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAppVersionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAppVersionPreviousValuesPromise>() => T;
}

export interface ChongduAppVersionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAppVersionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAppVersionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAppVersionPreviousValuesSubscription>() => T;
}

export interface ChongduUserdetailConnection {
  pageInfo: PageInfo;
  edges: ChongduUserdetailEdge[];
}

export interface ChongduUserdetailConnectionPromise
  extends Promise<ChongduUserdetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserdetailEdge>>() => T;
  aggregate: <T = AggregateChongduUserdetailPromise>() => T;
}

export interface ChongduUserdetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserdetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduUserdetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduUserdetailSubscription>() => T;
}

export interface ChongduAppVersionPreviousValues {
  id: Int;
  appCode?: String;
  appId?: String;
  appVersion?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  description?: String;
  deviceType?: Int;
  fileName?: String;
  forces?: Int;
  mt?: String;
  muserId?: String;
  sort?: Int;
  status?: Int;
  url?: String;
}

export interface ChongduAppVersionPreviousValuesPromise
  extends Promise<ChongduAppVersionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  appCode: () => Promise<String>;
  appId: () => Promise<String>;
  appVersion: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  deviceType: () => Promise<Int>;
  fileName: () => Promise<String>;
  forces: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduAppVersionPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAppVersionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  appCode: () => Promise<AsyncIterator<String>>;
  appId: () => Promise<AsyncIterator<String>>;
  appVersion: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  deviceType: () => Promise<AsyncIterator<Int>>;
  fileName: () => Promise<AsyncIterator<String>>;
  forces: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserdetail {
  id: Int;
  deviceCode?: String;
  deviceName?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduUserdetailPromise
  extends Promise<ChongduUserdetail>,
    Fragmentable {
  id: () => Promise<Int>;
  deviceCode: () => Promise<String>;
  deviceName: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserdetailSubscription
  extends Promise<AsyncIterator<ChongduUserdetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  deviceCode: () => Promise<AsyncIterator<String>>;
  deviceName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserdetailNullablePromise
  extends Promise<ChongduUserdetail | null>,
    Fragmentable {
  id: () => Promise<Int>;
  deviceCode: () => Promise<String>;
  deviceName: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduMessageEdge {
  node: ChongduMessage;
  cursor: String;
}

export interface ChongduMessageEdgePromise
  extends Promise<ChongduMessageEdge>,
    Fragmentable {
  node: <T = ChongduMessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduMessageEdgeSubscription
  extends Promise<AsyncIterator<ChongduMessageEdge>>,
    Fragmentable {
  node: <T = ChongduMessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserbindEdge {
  node: ChongduUserbind;
  cursor: String;
}

export interface ChongduUserbindEdgePromise
  extends Promise<ChongduUserbindEdge>,
    Fragmentable {
  node: <T = ChongduUserbindPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserbindEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserbindEdge>>,
    Fragmentable {
  node: <T = ChongduUserbindSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAppointmentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduAppointment;
  updatedFields: String[];
  previousValues: ChongduAppointmentPreviousValues;
}

export interface ChongduAppointmentSubscriptionPayloadPromise
  extends Promise<ChongduAppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduAppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduAppointmentPreviousValuesPromise>() => T;
}

export interface ChongduAppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduAppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduAppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduAppointmentPreviousValuesSubscription>() => T;
}

export interface AggregateChongduAddress {
  count: Int;
}

export interface AggregateChongduAddressPromise
  extends Promise<AggregateChongduAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAddressSubscription
  extends Promise<AsyncIterator<AggregateChongduAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAppointmentPreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  isOk?: Int;
  levelmessage?: String;
  mark?: String;
  merchantId?: String;
  mt?: String;
  serviceId?: String;
  sort?: Int;
  state?: Int;
  subtype?: Int;
  time?: String;
  timebegin?: String;
  timeend?: String;
  type?: Int;
  userId?: String;
  orderSn?: String;
}

export interface ChongduAppointmentPreviousValuesPromise
  extends Promise<ChongduAppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  isOk: () => Promise<Int>;
  levelmessage: () => Promise<String>;
  mark: () => Promise<String>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  state: () => Promise<Int>;
  subtype: () => Promise<Int>;
  time: () => Promise<String>;
  timebegin: () => Promise<String>;
  timeend: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  orderSn: () => Promise<String>;
}

export interface ChongduAppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduAppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  isOk: () => Promise<AsyncIterator<Int>>;
  levelmessage: () => Promise<AsyncIterator<String>>;
  mark: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<Int>>;
  subtype: () => Promise<AsyncIterator<Int>>;
  time: () => Promise<AsyncIterator<String>>;
  timebegin: () => Promise<AsyncIterator<String>>;
  timeend: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  orderSn: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduUserauthentLog {
  count: Int;
}

export interface AggregateChongduUserauthentLogPromise
  extends Promise<AggregateChongduUserauthentLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserauthentLogSubscription
  extends Promise<AsyncIterator<AggregateChongduUserauthentLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMessageConnection {
  pageInfo: PageInfo;
  edges: ChongduMessageEdge[];
}

export interface ChongduMessageConnectionPromise
  extends Promise<ChongduMessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduMessageEdge>>() => T;
  aggregate: <T = AggregateChongduMessagePromise>() => T;
}

export interface ChongduMessageConnectionSubscription
  extends Promise<AsyncIterator<ChongduMessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduMessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduMessageSubscription>() => T;
}

export interface ChongduUserauthentLogConnection {
  pageInfo: PageInfo;
  edges: ChongduUserauthentLogEdge[];
}

export interface ChongduUserauthentLogConnectionPromise
  extends Promise<ChongduUserauthentLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserauthentLogEdge>>() => T;
  aggregate: <T = AggregateChongduUserauthentLogPromise>() => T;
}

export interface ChongduUserauthentLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserauthentLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduUserauthentLogEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduUserauthentLogSubscription>() => T;
}

export interface ChongduCartSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCart;
  updatedFields: String[];
  previousValues: ChongduCartPreviousValues;
}

export interface ChongduCartSubscriptionPayloadPromise
  extends Promise<ChongduCartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCartPreviousValuesPromise>() => T;
}

export interface ChongduCartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCartPreviousValuesSubscription>() => T;
}

export interface AggregateChongduUserauthent {
  count: Int;
}

export interface AggregateChongduUserauthentPromise
  extends Promise<AggregateChongduUserauthent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserauthentSubscription
  extends Promise<AsyncIterator<AggregateChongduUserauthent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCartPreviousValues {
  id: ID_Output;
  checked?: Int;
  ct?: String;
  d?: Int;
  merchantId?: String;
  mt?: String;
  num?: Int;
  productId?: String;
  userId?: String;
}

export interface ChongduCartPreviousValuesPromise
  extends Promise<ChongduCartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  checked: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  num: () => Promise<Int>;
  productId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduCartPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  checked: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  num: () => Promise<AsyncIterator<Int>>;
  productId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserauthentConnection {
  pageInfo: PageInfo;
  edges: ChongduUserauthentEdge[];
}

export interface ChongduUserauthentConnectionPromise
  extends Promise<ChongduUserauthentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserauthentEdge>>() => T;
  aggregate: <T = AggregateChongduUserauthentPromise>() => T;
}

export interface ChongduUserauthentConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserauthentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduUserauthentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduUserauthentSubscription>() => T;
}

export interface ChongduMessage {
  id: Int;
  authentstate?: String;
  content?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  img?: String;
  mt?: String;
  muserId?: String;
  publishtime?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduMessagePromise
  extends Promise<ChongduMessage>,
    Fragmentable {
  id: () => Promise<Int>;
  authentstate: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  publishtime: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduMessageSubscription
  extends Promise<AsyncIterator<ChongduMessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  authentstate: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  img: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  publishtime: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMessageNullablePromise
  extends Promise<ChongduMessage | null>,
    Fragmentable {
  id: () => Promise<Int>;
  authentstate: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  publishtime: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserauthent {
  id: ID_Output;
  authtime?: String;
  backPhoto?: String;
  beginTime?: String;
  birthday?: String;
  cardAddress?: String;
  cardNum?: String;
  citycode?: String;
  ct?: String;
  d?: Int;
  endTime?: String;
  frontPhoto?: String;
  handPhoto?: String;
  nation?: String;
  realName?: String;
  sex?: Int;
  signFrom?: String;
  status?: Int;
}

export interface ChongduUserauthentPromise
  extends Promise<ChongduUserauthent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authtime: () => Promise<String>;
  backPhoto: () => Promise<String>;
  beginTime: () => Promise<String>;
  birthday: () => Promise<String>;
  cardAddress: () => Promise<String>;
  cardNum: () => Promise<String>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  frontPhoto: () => Promise<String>;
  handPhoto: () => Promise<String>;
  nation: () => Promise<String>;
  realName: () => Promise<String>;
  sex: () => Promise<Int>;
  signFrom: () => Promise<String>;
  status: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduUserauthentSubscription
  extends Promise<AsyncIterator<ChongduUserauthent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authtime: () => Promise<AsyncIterator<String>>;
  backPhoto: () => Promise<AsyncIterator<String>>;
  beginTime: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  cardAddress: () => Promise<AsyncIterator<String>>;
  cardNum: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  frontPhoto: () => Promise<AsyncIterator<String>>;
  handPhoto: () => Promise<AsyncIterator<String>>;
  nation: () => Promise<AsyncIterator<String>>;
  realName: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<Int>>;
  signFrom: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: <T = ChongduUserSubscription>() => T;
}

export interface ChongduUserauthentNullablePromise
  extends Promise<ChongduUserauthent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authtime: () => Promise<String>;
  backPhoto: () => Promise<String>;
  beginTime: () => Promise<String>;
  birthday: () => Promise<String>;
  cardAddress: () => Promise<String>;
  cardNum: () => Promise<String>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  frontPhoto: () => Promise<String>;
  handPhoto: () => Promise<String>;
  nation: () => Promise<String>;
  realName: () => Promise<String>;
  sex: () => Promise<Int>;
  signFrom: () => Promise<String>;
  status: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduCitySubscriptionPayload {
  mutation: MutationType;
  node: ChongduCity;
  updatedFields: String[];
  previousValues: ChongduCityPreviousValues;
}

export interface ChongduCitySubscriptionPayloadPromise
  extends Promise<ChongduCitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCityPreviousValuesPromise>() => T;
}

export interface ChongduCitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCityPreviousValuesSubscription>() => T;
}

export interface ChongduUserFavouriteEdge {
  node: ChongduUserFavourite;
  cursor: String;
}

export interface ChongduUserFavouriteEdgePromise
  extends Promise<ChongduUserFavouriteEdge>,
    Fragmentable {
  node: <T = ChongduUserFavouritePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserFavouriteEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserFavouriteEdge>>,
    Fragmentable {
  node: <T = ChongduUserFavouriteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCityPreviousValues {
  id: Int;
  code?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduCityPreviousValuesPromise
  extends Promise<ChongduCityPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduCityPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserFavourite {
  id: Int;
  ct?: String;
  d?: Int;
  relateId?: String;
  relateType?: Int;
  status?: Int;
  userId?: String;
}

export interface ChongduUserFavouritePromise
  extends Promise<ChongduUserFavourite>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserFavouriteSubscription
  extends Promise<AsyncIterator<ChongduUserFavourite>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  relateId: () => Promise<AsyncIterator<String>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserFavouriteNullablePromise
  extends Promise<ChongduUserFavourite | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface AggregateChongduMerchantstatistic {
  count: Int;
}

export interface AggregateChongduMerchantstatisticPromise
  extends Promise<AggregateChongduMerchantstatistic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduMerchantstatisticSubscription
  extends Promise<AsyncIterator<AggregateChongduMerchantstatistic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserEdge {
  node: ChongduUser;
  cursor: String;
}

export interface ChongduUserEdgePromise
  extends Promise<ChongduUserEdge>,
    Fragmentable {
  node: <T = ChongduUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserEdge>>,
    Fragmentable {
  node: <T = ChongduUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduComment;
  updatedFields: String[];
  previousValues: ChongduCommentPreviousValues;
}

export interface ChongduCommentSubscriptionPayloadPromise
  extends Promise<ChongduCommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCommentPreviousValuesPromise>() => T;
}

export interface ChongduCommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCommentPreviousValuesSubscription>() => T;
}

export interface ChongduAddressRelationConnection {
  pageInfo: PageInfo;
  edges: ChongduAddressRelationEdge[];
}

export interface ChongduAddressRelationConnectionPromise
  extends Promise<ChongduAddressRelationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAddressRelationEdge>>() => T;
  aggregate: <T = AggregateChongduAddressRelationPromise>() => T;
}

export interface ChongduAddressRelationConnectionSubscription
  extends Promise<AsyncIterator<ChongduAddressRelationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduAddressRelationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduAddressRelationSubscription>() => T;
}

export interface ChongduCommentPreviousValues {
  id: Int;
  anonymity?: Int;
  brower?: Int;
  commentType?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  isAdd?: Int;
  likedNum?: Int;
  productId?: String;
  replyNum?: Int;
  serviceId?: String;
  shareNum?: Int;
  starNum?: Float;
  userId?: String;
  video?: String;
  orderSn?: String;
}

export interface ChongduCommentPreviousValuesPromise
  extends Promise<ChongduCommentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  anonymity: () => Promise<Int>;
  brower: () => Promise<Int>;
  commentType: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  isAdd: () => Promise<Int>;
  likedNum: () => Promise<Int>;
  productId: () => Promise<String>;
  replyNum: () => Promise<Int>;
  serviceId: () => Promise<String>;
  shareNum: () => Promise<Int>;
  starNum: () => Promise<Float>;
  userId: () => Promise<String>;
  video: () => Promise<String>;
  orderSn: () => Promise<String>;
}

export interface ChongduCommentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  anonymity: () => Promise<AsyncIterator<Int>>;
  brower: () => Promise<AsyncIterator<Int>>;
  commentType: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  isAdd: () => Promise<AsyncIterator<Int>>;
  likedNum: () => Promise<AsyncIterator<Int>>;
  productId: () => Promise<AsyncIterator<String>>;
  replyNum: () => Promise<AsyncIterator<Int>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  shareNum: () => Promise<AsyncIterator<Int>>;
  starNum: () => Promise<AsyncIterator<Float>>;
  userId: () => Promise<AsyncIterator<String>>;
  video: () => Promise<AsyncIterator<String>>;
  orderSn: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTradingAreaEdge {
  node: ChongduTradingArea;
  cursor: String;
}

export interface ChongduTradingAreaEdgePromise
  extends Promise<ChongduTradingAreaEdge>,
    Fragmentable {
  node: <T = ChongduTradingAreaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduTradingAreaEdgeSubscription
  extends Promise<AsyncIterator<ChongduTradingAreaEdge>>,
    Fragmentable {
  node: <T = ChongduTradingAreaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMerchantstatisticEdge {
  node: ChongduMerchantstatistic;
  cursor: String;
}

export interface ChongduMerchantstatisticEdgePromise
  extends Promise<ChongduMerchantstatisticEdge>,
    Fragmentable {
  node: <T = ChongduMerchantstatisticPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduMerchantstatisticEdgeSubscription
  extends Promise<AsyncIterator<ChongduMerchantstatisticEdge>>,
    Fragmentable {
  node: <T = ChongduMerchantstatisticSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAddressRelationEdge {
  node: ChongduAddressRelation;
  cursor: String;
}

export interface ChongduAddressRelationEdgePromise
  extends Promise<ChongduAddressRelationEdge>,
    Fragmentable {
  node: <T = ChongduAddressRelationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAddressRelationEdgeSubscription
  extends Promise<AsyncIterator<ChongduAddressRelationEdge>>,
    Fragmentable {
  node: <T = ChongduAddressRelationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentPraiseSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCommentPraise;
  updatedFields: String[];
  previousValues: ChongduCommentPraisePreviousValues;
}

export interface ChongduCommentPraiseSubscriptionPayloadPromise
  extends Promise<ChongduCommentPraiseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCommentPraisePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCommentPraisePreviousValuesPromise>() => T;
}

export interface ChongduCommentPraiseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCommentPraiseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCommentPraiseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCommentPraisePreviousValuesSubscription>() => T;
}

export interface AggregateChongduTagDetail {
  count: Int;
}

export interface AggregateChongduTagDetailPromise
  extends Promise<AggregateChongduTagDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduTagDetailSubscription
  extends Promise<AsyncIterator<AggregateChongduTagDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCommentPraisePreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  relateId?: Int;
  relateType?: Int;
  status?: Int;
  userId?: String;
}

export interface ChongduCommentPraisePreviousValuesPromise
  extends Promise<ChongduCommentPraisePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<Int>;
  relateType: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduCommentPraisePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCommentPraisePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  relateId: () => Promise<AsyncIterator<Int>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTagDetailConnection {
  pageInfo: PageInfo;
  edges: ChongduTagDetailEdge[];
}

export interface ChongduTagDetailConnectionPromise
  extends Promise<ChongduTagDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduTagDetailEdge>>() => T;
  aggregate: <T = AggregateChongduTagDetailPromise>() => T;
}

export interface ChongduTagDetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduTagDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduTagDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduTagDetailSubscription>() => T;
}

export interface ChongduMerchantstatisticConnection {
  pageInfo: PageInfo;
  edges: ChongduMerchantstatisticEdge[];
}

export interface ChongduMerchantstatisticConnectionPromise
  extends Promise<ChongduMerchantstatisticConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduMerchantstatisticEdge>>() => T;
  aggregate: <T = AggregateChongduMerchantstatisticPromise>() => T;
}

export interface ChongduMerchantstatisticConnectionSubscription
  extends Promise<AsyncIterator<ChongduMerchantstatisticConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduMerchantstatisticEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduMerchantstatisticSubscription>() => T;
}

export interface ChongduTagDetail {
  id: Int;
  ct?: String;
  d?: Int;
  petCardId?: Int;
  tagId?: Int;
  worldId?: Int;
}

export interface ChongduTagDetailPromise
  extends Promise<ChongduTagDetail>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petCardId: () => Promise<Int>;
  tagId: () => Promise<Int>;
  worldId: () => Promise<Int>;
}

export interface ChongduTagDetailSubscription
  extends Promise<AsyncIterator<ChongduTagDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  petCardId: () => Promise<AsyncIterator<Int>>;
  tagId: () => Promise<AsyncIterator<Int>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduTagDetailNullablePromise
  extends Promise<ChongduTagDetail | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petCardId: () => Promise<Int>;
  tagId: () => Promise<Int>;
  worldId: () => Promise<Int>;
}

export interface ChongduCommentReplySubscriptionPayload {
  mutation: MutationType;
  node: ChongduCommentReply;
  updatedFields: String[];
  previousValues: ChongduCommentReplyPreviousValues;
}

export interface ChongduCommentReplySubscriptionPayloadPromise
  extends Promise<ChongduCommentReplySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCommentReplyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCommentReplyPreviousValuesPromise>() => T;
}

export interface ChongduCommentReplySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCommentReplySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCommentReplySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCommentReplyPreviousValuesSubscription>() => T;
}

export interface ChongduTagEdge {
  node: ChongduTag;
  cursor: String;
}

export interface ChongduTagEdgePromise
  extends Promise<ChongduTagEdge>,
    Fragmentable {
  node: <T = ChongduTagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduTagEdgeSubscription
  extends Promise<AsyncIterator<ChongduTagEdge>>,
    Fragmentable {
  node: <T = ChongduTagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentReplyPreviousValues {
  id: Int;
  commentId?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  praiseCount?: Int;
  replyuserId?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduCommentReplyPreviousValuesPromise
  extends Promise<ChongduCommentReplyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  replyuserId: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduCommentReplyPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCommentReplyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  commentId: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  replyuserId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTag {
  id: Int;
  content?: String;
  ct?: String;
  d?: Int;
  petCardId?: Int;
  type?: Int;
  userId?: String;
  worldId?: Int;
}

export interface ChongduTagPromise extends Promise<ChongduTag>, Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petCardId: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduTagSubscription
  extends Promise<AsyncIterator<ChongduTag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  petCardId: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduTagNullablePromise
  extends Promise<ChongduTag | null>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petCardId: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduCartConnection {
  pageInfo: PageInfo;
  edges: ChongduCartEdge[];
}

export interface ChongduCartConnectionPromise
  extends Promise<ChongduCartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCartEdge>>() => T;
  aggregate: <T = AggregateChongduCartPromise>() => T;
}

export interface ChongduCartConnectionSubscription
  extends Promise<AsyncIterator<ChongduCartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduCartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduCartSubscription>() => T;
}

export interface ChongduStatEdge {
  node: ChongduStat;
  cursor: String;
}

export interface ChongduStatEdgePromise
  extends Promise<ChongduStatEdge>,
    Fragmentable {
  node: <T = ChongduStatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduStatEdgeSubscription
  extends Promise<AsyncIterator<ChongduStatEdge>>,
    Fragmentable {
  node: <T = ChongduStatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentReviewSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCommentReview;
  updatedFields: String[];
  previousValues: ChongduCommentReviewPreviousValues;
}

export interface ChongduCommentReviewSubscriptionPayloadPromise
  extends Promise<ChongduCommentReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCommentReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCommentReviewPreviousValuesPromise>() => T;
}

export interface ChongduCommentReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCommentReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCommentReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCommentReviewPreviousValuesSubscription>() => T;
}

export interface AggregateChongduCommentPraise {
  count: Int;
}

export interface AggregateChongduCommentPraisePromise
  extends Promise<AggregateChongduCommentPraise>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCommentPraiseSubscription
  extends Promise<AsyncIterator<AggregateChongduCommentPraise>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCommentReviewPreviousValues {
  id: Int;
  brower?: Int;
  commentId?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  likedNum?: Int;
  replyNum?: Int;
  userId?: String;
  video?: String;
}

export interface ChongduCommentReviewPreviousValuesPromise
  extends Promise<ChongduCommentReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  brower: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  likedNum: () => Promise<Int>;
  replyNum: () => Promise<Int>;
  userId: () => Promise<String>;
  video: () => Promise<String>;
}

export interface ChongduCommentReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCommentReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  brower: () => Promise<AsyncIterator<Int>>;
  commentId: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  likedNum: () => Promise<AsyncIterator<Int>>;
  replyNum: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  video: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduServiceauthentLog {
  count: Int;
}

export interface AggregateChongduServiceauthentLogPromise
  extends Promise<AggregateChongduServiceauthentLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServiceauthentLogSubscription
  extends Promise<AsyncIterator<AggregateChongduServiceauthentLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMerchantstatistic {
  id: Int;
  count?: Int;
  ct?: String;
  d?: Int;
  day?: Int;
  hour?: Int;
  month?: Int;
  mt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  year?: Int;
}

export interface ChongduMerchantstatisticPromise
  extends Promise<ChongduMerchantstatistic>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduMerchantstatisticSubscription
  extends Promise<AsyncIterator<ChongduMerchantstatistic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMerchantstatisticNullablePromise
  extends Promise<ChongduMerchantstatistic | null>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduServiceauthentLogConnection {
  pageInfo: PageInfo;
  edges: ChongduServiceauthentLogEdge[];
}

export interface ChongduServiceauthentLogConnectionPromise
  extends Promise<ChongduServiceauthentLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServiceauthentLogEdge>>() => T;
  aggregate: <T = AggregateChongduServiceauthentLogPromise>() => T;
}

export interface ChongduServiceauthentLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduServiceauthentLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduServiceauthentLogEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduServiceauthentLogSubscription>() => T;
}

export interface ChongduCompanyauthentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCompanyauthent;
  updatedFields: String[];
  previousValues: ChongduCompanyauthentPreviousValues;
}

export interface ChongduCompanyauthentSubscriptionPayloadPromise
  extends Promise<ChongduCompanyauthentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCompanyauthentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCompanyauthentPreviousValuesPromise>() => T;
}

export interface ChongduCompanyauthentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCompanyauthentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCompanyauthentPreviousValuesSubscription>() => T;
}

export interface ChongduServiceauthentLog {
  id: Int;
  serviceauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduServiceauthentLogPromise
  extends Promise<ChongduServiceauthentLog>,
    Fragmentable {
  id: () => Promise<Int>;
  serviceauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduServiceauthentLogSubscription
  extends Promise<AsyncIterator<ChongduServiceauthentLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serviceauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  cadminId: <T = ChongduAdminSubscription>() => T;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceauthentLogNullablePromise
  extends Promise<ChongduServiceauthentLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  serviceauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduCompanyauthentPreviousValues {
  id: ID_Output;
  authType?: String;
  backPhoto?: String;
  bisDate?: String;
  bisPhoto?: String;
  city?: String;
  citycode?: String;
  companyAddress?: String;
  ct?: String;
  d?: Int;
  discription?: String;
  frontPhoto?: String;
  handPhoto?: String;
  headPhoto?: String;
  isSame?: Int;
  latitude?: String;
  legalDi?: String;
  legalName?: String;
  legalTel?: String;
  longitude?: String;
  merchantId?: String;
  name?: String;
  nowAddress?: String;
  otherPhoto?: String;
  registMoney?: String;
  setupDate?: String;
  socialCode?: String;
  status?: Int;
}

export interface ChongduCompanyauthentPreviousValuesPromise
  extends Promise<ChongduCompanyauthentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authType: () => Promise<String>;
  backPhoto: () => Promise<String>;
  bisDate: () => Promise<String>;
  bisPhoto: () => Promise<String>;
  city: () => Promise<String>;
  citycode: () => Promise<String>;
  companyAddress: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  discription: () => Promise<String>;
  frontPhoto: () => Promise<String>;
  handPhoto: () => Promise<String>;
  headPhoto: () => Promise<String>;
  isSame: () => Promise<Int>;
  latitude: () => Promise<String>;
  legalDi: () => Promise<String>;
  legalName: () => Promise<String>;
  legalTel: () => Promise<String>;
  longitude: () => Promise<String>;
  merchantId: () => Promise<String>;
  name: () => Promise<String>;
  nowAddress: () => Promise<String>;
  otherPhoto: () => Promise<String>;
  registMoney: () => Promise<String>;
  setupDate: () => Promise<String>;
  socialCode: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduCompanyauthentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authType: () => Promise<AsyncIterator<String>>;
  backPhoto: () => Promise<AsyncIterator<String>>;
  bisDate: () => Promise<AsyncIterator<String>>;
  bisPhoto: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  companyAddress: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  discription: () => Promise<AsyncIterator<String>>;
  frontPhoto: () => Promise<AsyncIterator<String>>;
  handPhoto: () => Promise<AsyncIterator<String>>;
  headPhoto: () => Promise<AsyncIterator<String>>;
  isSame: () => Promise<AsyncIterator<Int>>;
  latitude: () => Promise<AsyncIterator<String>>;
  legalDi: () => Promise<AsyncIterator<String>>;
  legalName: () => Promise<AsyncIterator<String>>;
  legalTel: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nowAddress: () => Promise<AsyncIterator<String>>;
  otherPhoto: () => Promise<AsyncIterator<String>>;
  registMoney: () => Promise<AsyncIterator<String>>;
  setupDate: () => Promise<AsyncIterator<String>>;
  socialCode: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceTypeEdge {
  node: ChongduServiceType;
  cursor: String;
}

export interface ChongduServiceTypeEdgePromise
  extends Promise<ChongduServiceTypeEdge>,
    Fragmentable {
  node: <T = ChongduServiceTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServiceTypeEdgeSubscription
  extends Promise<AsyncIterator<ChongduServiceTypeEdge>>,
    Fragmentable {
  node: <T = ChongduServiceTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduMerchantImg {
  count: Int;
}

export interface AggregateChongduMerchantImgPromise
  extends Promise<AggregateChongduMerchantImg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduMerchantImgSubscription
  extends Promise<AsyncIterator<AggregateChongduMerchantImg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleGroup {
  id: Int;
  userId?: String;
  roleName?: String;
  cuserId?: String;
  muserId?: String;
}

export interface ChongduRoleGroupPromise
  extends Promise<ChongduRoleGroup>,
    Fragmentable {
  id: () => Promise<Int>;
  userId: () => Promise<String>;
  roleName: () => Promise<String>;
  cuserId: () => Promise<String>;
  muserId: () => Promise<String>;
}

export interface ChongduRoleGroupSubscription
  extends Promise<AsyncIterator<ChongduRoleGroup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  roleName: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleGroupNullablePromise
  extends Promise<ChongduRoleGroup | null>,
    Fragmentable {
  id: () => Promise<Int>;
  userId: () => Promise<String>;
  roleName: () => Promise<String>;
  cuserId: () => Promise<String>;
  muserId: () => Promise<String>;
}

export interface ChongduCompanyauthentLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCompanyauthentLog;
  updatedFields: String[];
  previousValues: ChongduCompanyauthentLogPreviousValues;
}

export interface ChongduCompanyauthentLogSubscriptionPayloadPromise
  extends Promise<ChongduCompanyauthentLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCompanyauthentLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCompanyauthentLogPreviousValuesPromise>() => T;
}

export interface ChongduCompanyauthentLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCompanyauthentLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduCompanyauthentLogPreviousValuesSubscription
  >() => T;
}

export interface ChongduServiceRecommendEdge {
  node: ChongduServiceRecommend;
  cursor: String;
}

export interface ChongduServiceRecommendEdgePromise
  extends Promise<ChongduServiceRecommendEdge>,
    Fragmentable {
  node: <T = ChongduServiceRecommendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServiceRecommendEdgeSubscription
  extends Promise<AsyncIterator<ChongduServiceRecommendEdge>>,
    Fragmentable {
  node: <T = ChongduServiceRecommendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCompanyauthentLogPreviousValues {
  id: Int;
  companyauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduCompanyauthentLogPreviousValuesPromise
  extends Promise<ChongduCompanyauthentLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  companyauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduCompanyauthentLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  companyauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceRecommend {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  endtime?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  s?: Int;
  serviceId?: String;
  sort?: Int;
  starttime?: String;
  userid?: String;
  username?: String;
}

export interface ChongduServiceRecommendPromise
  extends Promise<ChongduServiceRecommend>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  s: () => Promise<Int>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduServiceRecommendSubscription
  extends Promise<AsyncIterator<ChongduServiceRecommend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  s: () => Promise<AsyncIterator<Int>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceRecommendNullablePromise
  extends Promise<ChongduServiceRecommend | null>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  s: () => Promise<Int>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduMerchantImgEdge {
  node: ChongduMerchantImg;
  cursor: String;
}

export interface ChongduMerchantImgEdgePromise
  extends Promise<ChongduMerchantImgEdge>,
    Fragmentable {
  node: <T = ChongduMerchantImgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduMerchantImgEdgeSubscription
  extends Promise<AsyncIterator<ChongduMerchantImgEdge>>,
    Fragmentable {
  node: <T = ChongduMerchantImgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServicePettypeEdge {
  node: ChongduServicePettype;
  cursor: String;
}

export interface ChongduServicePettypeEdgePromise
  extends Promise<ChongduServicePettypeEdge>,
    Fragmentable {
  node: <T = ChongduServicePettypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServicePettypeEdgeSubscription
  extends Promise<AsyncIterator<ChongduServicePettypeEdge>>,
    Fragmentable {
  node: <T = ChongduServicePettypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCompanyrecommendSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCompanyrecommend;
  updatedFields: String[];
  previousValues: ChongduCompanyrecommendPreviousValues;
}

export interface ChongduCompanyrecommendSubscriptionPayloadPromise
  extends Promise<ChongduCompanyrecommendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCompanyrecommendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCompanyrecommendPreviousValuesPromise>() => T;
}

export interface ChongduCompanyrecommendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCompanyrecommendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCompanyrecommendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduCompanyrecommendPreviousValuesSubscription
  >() => T;
}

export interface ChongduServicePettype {
  id: Int;
  ct?: String;
  d?: Int;
  level?: Int;
  petTypeId?: Int;
  petTypeName?: String;
  serviceId?: String;
}

export interface ChongduServicePettypePromise
  extends Promise<ChongduServicePettype>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  level: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  petTypeName: () => Promise<String>;
  serviceId: () => Promise<String>;
}

export interface ChongduServicePettypeSubscription
  extends Promise<AsyncIterator<ChongduServicePettype>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  petTypeId: () => Promise<AsyncIterator<Int>>;
  petTypeName: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServicePettypeNullablePromise
  extends Promise<ChongduServicePettype | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  level: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  petTypeName: () => Promise<String>;
  serviceId: () => Promise<String>;
}

export interface ChongduCompanyrecommendPreviousValues {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: Int;
  endtime?: DateTimeOutput;
  fullname?: String;
  merchantId?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  sort?: Int;
  starttime?: DateTimeOutput;
  status?: Int;
}

export interface ChongduCompanyrecommendPreviousValuesPromise
  extends Promise<ChongduCompanyrecommendPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  fullname: () => Promise<String>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
}

export interface ChongduCompanyrecommendPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCompanyrecommendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  fullname: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceImgEdge {
  node: ChongduServiceImg;
  cursor: String;
}

export interface ChongduServiceImgEdgePromise
  extends Promise<ChongduServiceImgEdge>,
    Fragmentable {
  node: <T = ChongduServiceImgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServiceImgEdgeSubscription
  extends Promise<AsyncIterator<ChongduServiceImgEdge>>,
    Fragmentable {
  node: <T = ChongduServiceImgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMerchantImgConnection {
  pageInfo: PageInfo;
  edges: ChongduMerchantImgEdge[];
}

export interface ChongduMerchantImgConnectionPromise
  extends Promise<ChongduMerchantImgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduMerchantImgEdge>>() => T;
  aggregate: <T = AggregateChongduMerchantImgPromise>() => T;
}

export interface ChongduMerchantImgConnectionSubscription
  extends Promise<AsyncIterator<ChongduMerchantImgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduMerchantImgEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduMerchantImgSubscription>() => T;
}

export interface ChongduAdminConnection {
  pageInfo: PageInfo;
  edges: ChongduAdminEdge[];
}

export interface ChongduAdminConnectionPromise
  extends Promise<ChongduAdminConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAdminEdge>>() => T;
  aggregate: <T = AggregateChongduAdminPromise>() => T;
}

export interface ChongduAdminConnectionSubscription
  extends Promise<AsyncIterator<ChongduAdminConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAdminEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAdminSubscription>() => T;
}

export interface ChongduCorrelationSubscriptionPayload {
  mutation: MutationType;
  node: ChongduCorrelation;
  updatedFields: String[];
  previousValues: ChongduCorrelationPreviousValues;
}

export interface ChongduCorrelationSubscriptionPayloadPromise
  extends Promise<ChongduCorrelationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduCorrelationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduCorrelationPreviousValuesPromise>() => T;
}

export interface ChongduCorrelationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduCorrelationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduCorrelationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduCorrelationPreviousValuesSubscription>() => T;
}

export interface AggregateChongduServiceAuthentdetail {
  count: Int;
}

export interface AggregateChongduServiceAuthentdetailPromise
  extends Promise<AggregateChongduServiceAuthentdetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServiceAuthentdetailSubscription
  extends Promise<AsyncIterator<AggregateChongduServiceAuthentdetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCorrelationPreviousValues {
  id: ID_Output;
  ct?: String;
  d?: Int;
  petLevelId?: Int;
  petTypeId?: Int;
  productId?: String;
  serviceId?: String;
  type?: Int;
}

export interface ChongduCorrelationPreviousValuesPromise
  extends Promise<ChongduCorrelationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petLevelId: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  productId: () => Promise<String>;
  serviceId: () => Promise<String>;
  type: () => Promise<Int>;
}

export interface ChongduCorrelationPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduCorrelationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  petLevelId: () => Promise<AsyncIterator<Int>>;
  petTypeId: () => Promise<AsyncIterator<Int>>;
  productId: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceAuthentdetailConnection {
  pageInfo: PageInfo;
  edges: ChongduServiceAuthentdetailEdge[];
}

export interface ChongduServiceAuthentdetailConnectionPromise
  extends Promise<ChongduServiceAuthentdetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServiceAuthentdetailEdge>>() => T;
  aggregate: <T = AggregateChongduServiceAuthentdetailPromise>() => T;
}

export interface ChongduServiceAuthentdetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduServiceAuthentdetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduServiceAuthentdetailEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduServiceAuthentdetailSubscription>() => T;
}

export interface ChongduCartEdge {
  node: ChongduCart;
  cursor: String;
}

export interface ChongduCartEdgePromise
  extends Promise<ChongduCartEdge>,
    Fragmentable {
  node: <T = ChongduCartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCartEdgeSubscription
  extends Promise<AsyncIterator<ChongduCartEdge>>,
    Fragmentable {
  node: <T = ChongduCartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceAuthentdetail {
  id: Int;
  audit?: Int;
  audittime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  mt?: String;
  muserid?: String;
  serviceId?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  userid?: String;
}

export interface ChongduServiceAuthentdetailPromise
  extends Promise<ChongduServiceAuthentdetail>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduServiceAuthentdetailSubscription
  extends Promise<AsyncIterator<ChongduServiceAuthentdetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audit: () => Promise<AsyncIterator<Int>>;
  audittime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceAuthentdetailNullablePromise
  extends Promise<ChongduServiceAuthentdetail | null>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduDataVersionSubscriptionPayload {
  mutation: MutationType;
  node: ChongduDataVersion;
  updatedFields: String[];
  previousValues: ChongduDataVersionPreviousValues;
}

export interface ChongduDataVersionSubscriptionPayloadPromise
  extends Promise<ChongduDataVersionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduDataVersionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduDataVersionPreviousValuesPromise>() => T;
}

export interface ChongduDataVersionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduDataVersionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduDataVersionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduDataVersionPreviousValuesSubscription>() => T;
}

export interface ChongduServiceEdge {
  node: ChongduService;
  cursor: String;
}

export interface ChongduServiceEdgePromise
  extends Promise<ChongduServiceEdge>,
    Fragmentable {
  node: <T = ChongduServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServiceEdgeSubscription
  extends Promise<AsyncIterator<ChongduServiceEdge>>,
    Fragmentable {
  node: <T = ChongduServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduDataVersionPreviousValues {
  id: Int;
  ip?: String;
  mac?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  type?: Int;
  versionCode?: String;
}

export interface ChongduDataVersionPreviousValuesPromise
  extends Promise<ChongduDataVersionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ip: () => Promise<String>;
  mac: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  type: () => Promise<Int>;
  versionCode: () => Promise<String>;
}

export interface ChongduDataVersionPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduDataVersionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mac: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  versionCode: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduAdmin {
  count: Int;
}

export interface AggregateChongduAdminPromise
  extends Promise<AggregateChongduAdmin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAdminSubscription
  extends Promise<AsyncIterator<AggregateChongduAdmin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMerchantImg {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  merchantId?: String;
  mt?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduMerchantImgPromise
  extends Promise<ChongduMerchantImg>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduMerchantImgSubscription
  extends Promise<AsyncIterator<ChongduMerchantImg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMerchantImgNullablePromise
  extends Promise<ChongduMerchantImg | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduService {
  id: ID_Output;
  area?: String;
  browser?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  endtime?: String;
  icon?: String;
  mt?: String;
  name?: String;
  price?: Float;
  sale?: Int;
  shareCount?: Int;
  starttime?: String;
  status?: Int;
  title?: String;
}

export interface ChongduServicePromise
  extends Promise<ChongduService>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  area: () => Promise<String>;
  browser: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endtime: () => Promise<String>;
  icon: () => Promise<String>;
  merchantId: <T = ChongduMerchantPromise>() => T;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  sale: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  typeId: <T = ChongduServiceTypePromise>() => T;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduServiceSubscription
  extends Promise<AsyncIterator<ChongduService>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  area: () => Promise<AsyncIterator<String>>;
  browser: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  merchantId: <T = ChongduMerchantSubscription>() => T;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  sale: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  typeId: <T = ChongduServiceTypeSubscription>() => T;
  userId: <T = ChongduUserSubscription>() => T;
}

export interface ChongduServiceNullablePromise
  extends Promise<ChongduService | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  area: () => Promise<String>;
  browser: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endtime: () => Promise<String>;
  icon: () => Promise<String>;
  merchantId: <T = ChongduMerchantPromise>() => T;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  sale: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  typeId: <T = ChongduServiceTypePromise>() => T;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduDiscussSubscriptionPayload {
  mutation: MutationType;
  node: ChongduDiscuss;
  updatedFields: String[];
  previousValues: ChongduDiscussPreviousValues;
}

export interface ChongduDiscussSubscriptionPayloadPromise
  extends Promise<ChongduDiscussSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduDiscussPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduDiscussPreviousValuesPromise>() => T;
}

export interface ChongduDiscussSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduDiscussSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduDiscussSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduDiscussPreviousValuesSubscription>() => T;
}

export interface ChongduSearchthinkEdge {
  node: ChongduSearchthink;
  cursor: String;
}

export interface ChongduSearchthinkEdgePromise
  extends Promise<ChongduSearchthinkEdge>,
    Fragmentable {
  node: <T = ChongduSearchthinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduSearchthinkEdgeSubscription
  extends Promise<AsyncIterator<ChongduSearchthinkEdge>>,
    Fragmentable {
  node: <T = ChongduSearchthinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduDiscussPreviousValues {
  id: Int;
  content?: String;
  ct?: String;
  d?: Int;
  pSComId?: Int;
  replyType?: Int;
  userId?: String;
}

export interface ChongduDiscussPreviousValuesPromise
  extends Promise<ChongduDiscussPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  pSComId: () => Promise<Int>;
  replyType: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduDiscussPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduDiscussPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  pSComId: () => Promise<AsyncIterator<Int>>;
  replyType: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduSearchthink {
  id: Int;
  ct?: String;
  d?: Int;
  hot?: Int;
  mt?: String;
  name?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduSearchthinkPromise
  extends Promise<ChongduSearchthink>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  hot: () => Promise<Int>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduSearchthinkSubscription
  extends Promise<AsyncIterator<ChongduSearchthink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  hot: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduSearchthinkNullablePromise
  extends Promise<ChongduSearchthink | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  hot: () => Promise<Int>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface AggregateChongduMerchant {
  count: Int;
}

export interface AggregateChongduMerchantPromise
  extends Promise<AggregateChongduMerchant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduMerchantSubscription
  extends Promise<AsyncIterator<AggregateChongduMerchant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleMenuChildrenEdge {
  node: ChongduRoleMenuChildren;
  cursor: String;
}

export interface ChongduRoleMenuChildrenEdgePromise
  extends Promise<ChongduRoleMenuChildrenEdge>,
    Fragmentable {
  node: <T = ChongduRoleMenuChildrenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRoleMenuChildrenEdgeSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuChildrenEdge>>,
    Fragmentable {
  node: <T = ChongduRoleMenuChildrenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduFilemanageSubscriptionPayload {
  mutation: MutationType;
  node: ChongduFilemanage;
  updatedFields: String[];
  previousValues: ChongduFilemanagePreviousValues;
}

export interface ChongduFilemanageSubscriptionPayloadPromise
  extends Promise<ChongduFilemanageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduFilemanagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduFilemanagePreviousValuesPromise>() => T;
}

export interface ChongduFilemanageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduFilemanageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduFilemanageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduFilemanagePreviousValuesSubscription>() => T;
}

export interface ChongduAdminRole {
  id: Int;
  adminId?: String;
  cadminId?: String;
  ct?: String;
  d?: Int;
  mt?: String;
  roleId?: Int;
  sort?: Int;
  status?: Int;
}

export interface ChongduAdminRolePromise
  extends Promise<ChongduAdminRole>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  cadminId: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  roleId: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduAdminRoleSubscription
  extends Promise<AsyncIterator<ChongduAdminRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  adminId: () => Promise<AsyncIterator<String>>;
  cadminId: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  roleId: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAdminRoleNullablePromise
  extends Promise<ChongduAdminRole | null>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  cadminId: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  roleId: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduFilemanagePreviousValues {
  id: Int;
  ct?: String;
  customtype?: Int;
  d?: Int;
  filename?: String;
  mt?: String;
  path?: String;
  pid?: String;
  sort?: Int;
  status?: Int;
  tablename?: String;
  type?: Int;
  userid?: String;
}

export interface ChongduFilemanagePreviousValuesPromise
  extends Promise<ChongduFilemanagePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  customtype: () => Promise<Int>;
  d: () => Promise<Int>;
  filename: () => Promise<String>;
  mt: () => Promise<String>;
  path: () => Promise<String>;
  pid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tablename: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduFilemanagePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduFilemanagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  customtype: () => Promise<AsyncIterator<Int>>;
  d: () => Promise<AsyncIterator<Int>>;
  filename: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tablename: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduRoleMenu {
  count: Int;
}

export interface AggregateChongduRoleMenuPromise
  extends Promise<AggregateChongduRoleMenu>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRoleMenuSubscription
  extends Promise<AsyncIterator<AggregateChongduRoleMenu>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMerchantEdge {
  node: ChongduMerchant;
  cursor: String;
}

export interface ChongduMerchantEdgePromise
  extends Promise<ChongduMerchantEdge>,
    Fragmentable {
  node: <T = ChongduMerchantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduMerchantEdgeSubscription
  extends Promise<AsyncIterator<ChongduMerchantEdge>>,
    Fragmentable {
  node: <T = ChongduMerchantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleMenuConnection {
  pageInfo: PageInfo;
  edges: ChongduRoleMenuEdge[];
}

export interface ChongduRoleMenuConnectionPromise
  extends Promise<ChongduRoleMenuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRoleMenuEdge>>() => T;
  aggregate: <T = AggregateChongduRoleMenuPromise>() => T;
}

export interface ChongduRoleMenuConnectionSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRoleMenuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRoleMenuSubscription>() => T;
}

export interface ChongduFocusingSubscriptionPayload {
  mutation: MutationType;
  node: ChongduFocusing;
  updatedFields: String[];
  previousValues: ChongduFocusingPreviousValues;
}

export interface ChongduFocusingSubscriptionPayloadPromise
  extends Promise<ChongduFocusingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduFocusingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduFocusingPreviousValuesPromise>() => T;
}

export interface ChongduFocusingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduFocusingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduFocusingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduFocusingPreviousValuesSubscription>() => T;
}

export interface AggregateChongduRoleGroup {
  count: Int;
}

export interface AggregateChongduRoleGroupPromise
  extends Promise<AggregateChongduRoleGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRoleGroupSubscription
  extends Promise<AsyncIterator<AggregateChongduRoleGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduFocusingPreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  fUserId?: String;
  status?: Int;
  userId?: String;
}

export interface ChongduFocusingPreviousValuesPromise
  extends Promise<ChongduFocusingPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  fUserId: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduFocusingPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduFocusingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  fUserId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleGroupConnection {
  pageInfo: PageInfo;
  edges: ChongduRoleGroupEdge[];
}

export interface ChongduRoleGroupConnectionPromise
  extends Promise<ChongduRoleGroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRoleGroupEdge>>() => T;
  aggregate: <T = AggregateChongduRoleGroupPromise>() => T;
}

export interface ChongduRoleGroupConnectionSubscription
  extends Promise<AsyncIterator<ChongduRoleGroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRoleGroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRoleGroupSubscription>() => T;
}

export interface ChongduMerchantConnection {
  pageInfo: PageInfo;
  edges: ChongduMerchantEdge[];
}

export interface ChongduMerchantConnectionPromise
  extends Promise<ChongduMerchantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduMerchantEdge>>() => T;
  aggregate: <T = AggregateChongduMerchantPromise>() => T;
}

export interface ChongduMerchantConnectionSubscription
  extends Promise<AsyncIterator<ChongduMerchantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduMerchantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduMerchantSubscription>() => T;
}

export interface AggregateChongduRoleDetail {
  count: Int;
}

export interface AggregateChongduRoleDetailPromise
  extends Promise<AggregateChongduRoleDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRoleDetailSubscription
  extends Promise<AsyncIterator<AggregateChongduRoleDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduInformSubscriptionPayload {
  mutation: MutationType;
  node: ChongduInform;
  updatedFields: String[];
  previousValues: ChongduInformPreviousValues;
}

export interface ChongduInformSubscriptionPayloadPromise
  extends Promise<ChongduInformSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduInformPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduInformPreviousValuesPromise>() => T;
}

export interface ChongduInformSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduInformSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduInformSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduInformPreviousValuesSubscription>() => T;
}

export interface ChongduRoleDetailConnection {
  pageInfo: PageInfo;
  edges: ChongduRoleDetailEdge[];
}

export interface ChongduRoleDetailConnectionPromise
  extends Promise<ChongduRoleDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRoleDetailEdge>>() => T;
  aggregate: <T = AggregateChongduRoleDetailPromise>() => T;
}

export interface ChongduRoleDetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduRoleDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRoleDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRoleDetailSubscription>() => T;
}

export interface ChongduInformPreviousValues {
  id: Int;
  type?: Int;
  relatedType?: Int;
  relatedId?: Int;
  description?: String;
  image?: String;
  status?: Int;
  disposeAt?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduInformPreviousValuesPromise
  extends Promise<ChongduInformPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<Int>;
  relatedType: () => Promise<Int>;
  relatedId: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  status: () => Promise<Int>;
  disposeAt: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduInformPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduInformPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  relatedType: () => Promise<AsyncIterator<Int>>;
  relatedId: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  disposeAt: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleDetail {
  id: ID_Output;
  ct?: String;
  cuserId?: String;
  d?: Int;
  modeldetailId?: String;
  mt?: String;
  muserId?: String;
  roleId?: String;
  status?: Int;
}

export interface ChongduRoleDetailPromise
  extends Promise<ChongduRoleDetail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  modeldetailId: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  roleId: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduRoleDetailSubscription
  extends Promise<AsyncIterator<ChongduRoleDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  modeldetailId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  roleId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleDetailNullablePromise
  extends Promise<ChongduRoleDetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  modeldetailId: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  roleId: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface AggregateChongduCart {
  count: Int;
}

export interface AggregateChongduCartPromise
  extends Promise<AggregateChongduCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCartSubscription
  extends Promise<AsyncIterator<AggregateChongduCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleAuthEdge {
  node: ChongduRoleAuth;
  cursor: String;
}

export interface ChongduRoleAuthEdgePromise
  extends Promise<ChongduRoleAuthEdge>,
    Fragmentable {
  node: <T = ChongduRoleAuthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRoleAuthEdgeSubscription
  extends Promise<AsyncIterator<ChongduRoleAuthEdge>>,
    Fragmentable {
  node: <T = ChongduRoleAuthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLockSubscriptionPayload {
  mutation: MutationType;
  node: ChongduLock;
  updatedFields: String[];
  previousValues: ChongduLockPreviousValues;
}

export interface ChongduLockSubscriptionPayloadPromise
  extends Promise<ChongduLockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduLockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduLockPreviousValuesPromise>() => T;
}

export interface ChongduLockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduLockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduLockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduLockPreviousValuesSubscription>() => T;
}

export interface AggregateChongduAdminRole {
  count: Int;
}

export interface AggregateChongduAdminRolePromise
  extends Promise<AggregateChongduAdminRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAdminRoleSubscription
  extends Promise<AsyncIterator<AggregateChongduAdminRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduLockPreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  sort?: Int;
  status?: Int;
  thread?: String;
  tName?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduLockPreviousValuesPromise
  extends Promise<ChongduLockPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  thread: () => Promise<String>;
  tName: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduLockPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduLockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  thread: () => Promise<AsyncIterator<String>>;
  tName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduRole {
  count: Int;
}

export interface AggregateChongduRolePromise
  extends Promise<AggregateChongduRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRoleSubscription
  extends Promise<AsyncIterator<AggregateChongduRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldReplySubscriptionPayload {
  mutation: MutationType;
  node: ChongduWorldReply;
  updatedFields: String[];
  previousValues: ChongduWorldReplyPreviousValues;
}

export interface ChongduWorldReplySubscriptionPayloadPromise
  extends Promise<ChongduWorldReplySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduWorldReplyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduWorldReplyPreviousValuesPromise>() => T;
}

export interface ChongduWorldReplySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduWorldReplySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduWorldReplySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduWorldReplyPreviousValuesSubscription>() => T;
}

export interface ChongduRoleConnection {
  pageInfo: PageInfo;
  edges: ChongduRoleEdge[];
}

export interface ChongduRoleConnectionPromise
  extends Promise<ChongduRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRoleEdge>>() => T;
  aggregate: <T = AggregateChongduRolePromise>() => T;
}

export interface ChongduRoleConnectionSubscription
  extends Promise<AsyncIterator<ChongduRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRoleSubscription>() => T;
}

export interface ChongduLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduLog;
  updatedFields: String[];
  previousValues: ChongduLogPreviousValues;
}

export interface ChongduLogSubscriptionPayloadPromise
  extends Promise<ChongduLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduLogPreviousValuesPromise>() => T;
}

export interface ChongduLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduLogPreviousValuesSubscription>() => T;
}

export interface AggregateChongduRepellent {
  count: Int;
}

export interface AggregateChongduRepellentPromise
  extends Promise<AggregateChongduRepellent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRepellentSubscription
  extends Promise<AsyncIterator<AggregateChongduRepellent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduLogPreviousValues {
  id: Int;
  cn?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  dataId?: Int;
  ip?: String;
  mn?: String;
  mt?: String;
  muserId?: String;
  originalData?: String;
  sort?: Int;
  status?: Int;
  targetData?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduLogPreviousValuesPromise
  extends Promise<ChongduLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  cn: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  dataId: () => Promise<Int>;
  ip: () => Promise<String>;
  mn: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  originalData: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  targetData: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cn: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  dataId: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mn: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  originalData: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  targetData: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRepellentConnection {
  pageInfo: PageInfo;
  edges: ChongduRepellentEdge[];
}

export interface ChongduRepellentConnectionPromise
  extends Promise<ChongduRepellentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRepellentEdge>>() => T;
  aggregate: <T = AggregateChongduRepellentPromise>() => T;
}

export interface ChongduRepellentConnectionSubscription
  extends Promise<AsyncIterator<ChongduRepellentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRepellentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRepellentSubscription>() => T;
}

export interface ChongduMerchant {
  id: ID_Output;
  address?: String;
  attention?: Int;
  beginTime?: String;
  city?: String;
  citycode?: String;
  endTime?: String;
  icon?: String;
  latitude?: String;
  longitude?: String;
  name?: String;
  tel?: String;
  userId?: String;
}

export interface ChongduMerchantPromise
  extends Promise<ChongduMerchant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  attention: () => Promise<Int>;
  beginTime: () => Promise<String>;
  city: () => Promise<String>;
  citycode: () => Promise<String>;
  endTime: () => Promise<String>;
  icon: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  name: () => Promise<String>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduMerchantSubscription
  extends Promise<AsyncIterator<ChongduMerchant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  attention: () => Promise<AsyncIterator<Int>>;
  beginTime: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tel: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMerchantNullablePromise
  extends Promise<ChongduMerchant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  attention: () => Promise<Int>;
  beginTime: () => Promise<String>;
  city: () => Promise<String>;
  citycode: () => Promise<String>;
  endTime: () => Promise<String>;
  icon: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  name: () => Promise<String>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduRepellent {
  id: Int;
  brandId?: Int;
  cityCode?: String;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  indexNum?: Int;
  mt?: String;
  petId?: String;
  status?: Int;
  street?: String;
  time?: String;
  userId?: String;
}

export interface ChongduRepellentPromise
  extends Promise<ChongduRepellent>,
    Fragmentable {
  id: () => Promise<Int>;
  brandId: () => Promise<Int>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  indexNum: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  street: () => Promise<String>;
  time: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduRepellentSubscription
  extends Promise<AsyncIterator<ChongduRepellent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  brandId: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  indexNum: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  street: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRepellentNullablePromise
  extends Promise<ChongduRepellent | null>,
    Fragmentable {
  id: () => Promise<Int>;
  brandId: () => Promise<Int>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  indexNum: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  street: () => Promise<String>;
  time: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduLoginLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduLoginLog;
  updatedFields: String[];
  previousValues: ChongduLoginLogPreviousValues;
}

export interface ChongduLoginLogSubscriptionPayloadPromise
  extends Promise<ChongduLoginLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduLoginLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduLoginLogPreviousValuesPromise>() => T;
}

export interface ChongduLoginLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduLoginLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduLoginLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduLoginLogPreviousValuesSubscription>() => T;
}

export interface ChongduRefreshEdge {
  node: ChongduRefresh;
  cursor: String;
}

export interface ChongduRefreshEdgePromise
  extends Promise<ChongduRefreshEdge>,
    Fragmentable {
  node: <T = ChongduRefreshPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRefreshEdgeSubscription
  extends Promise<AsyncIterator<ChongduRefreshEdge>>,
    Fragmentable {
  node: <T = ChongduRefreshSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLoginLogPreviousValues {
  id: Int;
  adminId?: String;
  ip?: String;
  loginTime?: String;
  mac?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduLoginLogPreviousValuesPromise
  extends Promise<ChongduLoginLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  ip: () => Promise<String>;
  loginTime: () => Promise<String>;
  mac: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduLoginLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduLoginLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  adminId: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  loginTime: () => Promise<AsyncIterator<String>>;
  mac: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRefresh {
  id: Int;
  businessId?: Int;
  ct?: String;
  petId?: String;
  productId?: String;
  refreshType?: Int;
  serviceId?: Int;
  type?: Int;
}

export interface ChongduRefreshPromise
  extends Promise<ChongduRefresh>,
    Fragmentable {
  id: () => Promise<Int>;
  businessId: () => Promise<Int>;
  ct: () => Promise<String>;
  petId: () => Promise<String>;
  productId: () => Promise<String>;
  refreshType: () => Promise<Int>;
  serviceId: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduRefreshSubscription
  extends Promise<AsyncIterator<ChongduRefresh>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  businessId: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  refreshType: () => Promise<AsyncIterator<Int>>;
  serviceId: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRefreshNullablePromise
  extends Promise<ChongduRefresh | null>,
    Fragmentable {
  id: () => Promise<Int>;
  businessId: () => Promise<Int>;
  ct: () => Promise<String>;
  petId: () => Promise<String>;
  productId: () => Promise<String>;
  refreshType: () => Promise<Int>;
  serviceId: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface AggregateChongduMenu {
  count: Int;
}

export interface AggregateChongduMenuPromise
  extends Promise<AggregateChongduMenu>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduMenuSubscription
  extends Promise<AsyncIterator<AggregateChongduMenu>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRecommendEdge {
  node: ChongduRecommend;
  cursor: String;
}

export interface ChongduRecommendEdgePromise
  extends Promise<ChongduRecommendEdge>,
    Fragmentable {
  node: <T = ChongduRecommendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRecommendEdgeSubscription
  extends Promise<AsyncIterator<ChongduRecommendEdge>>,
    Fragmentable {
  node: <T = ChongduRecommendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMenuSubscriptionPayload {
  mutation: MutationType;
  node: ChongduMenu;
  updatedFields: String[];
  previousValues: ChongduMenuPreviousValues;
}

export interface ChongduMenuSubscriptionPayloadPromise
  extends Promise<ChongduMenuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduMenuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduMenuPreviousValuesPromise>() => T;
}

export interface ChongduMenuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduMenuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduMenuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduMenuPreviousValuesSubscription>() => T;
}

export interface ChongduAdvertisementConnection {
  pageInfo: PageInfo;
  edges: ChongduAdvertisementEdge[];
}

export interface ChongduAdvertisementConnectionPromise
  extends Promise<ChongduAdvertisementConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAdvertisementEdge>>() => T;
  aggregate: <T = AggregateChongduAdvertisementPromise>() => T;
}

export interface ChongduAdvertisementConnectionSubscription
  extends Promise<AsyncIterator<ChongduAdvertisementConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduAdvertisementEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduAdvertisementSubscription>() => T;
}

export interface ChongduMenuPreviousValues {
  id: ID_Output;
  ct?: String;
  d?: Int;
  icon?: String;
  mobile?: String;
  mobileIcon?: String;
  modelId?: String;
  mt?: String;
  name?: String;
  path?: String;
  pid?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduMenuPreviousValuesPromise
  extends Promise<ChongduMenuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  mobile: () => Promise<String>;
  mobileIcon: () => Promise<String>;
  modelId: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  path: () => Promise<String>;
  pid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduMenuPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduMenuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  mobile: () => Promise<AsyncIterator<String>>;
  mobileIcon: () => Promise<AsyncIterator<String>>;
  modelId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduProductauthentLog {
  count: Int;
}

export interface AggregateChongduProductauthentLogPromise
  extends Promise<AggregateChongduProductauthentLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductauthentLogSubscription
  extends Promise<AsyncIterator<AggregateChongduProductauthentLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMenuEdge {
  node: ChongduMenu;
  cursor: String;
}

export interface ChongduMenuEdgePromise
  extends Promise<ChongduMenuEdge>,
    Fragmentable {
  node: <T = ChongduMenuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduMenuEdgeSubscription
  extends Promise<AsyncIterator<ChongduMenuEdge>>,
    Fragmentable {
  node: <T = ChongduMenuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductauthentLogConnection {
  pageInfo: PageInfo;
  edges: ChongduProductauthentLogEdge[];
}

export interface ChongduProductauthentLogConnectionPromise
  extends Promise<ChongduProductauthentLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductauthentLogEdge>>() => T;
  aggregate: <T = AggregateChongduProductauthentLogPromise>() => T;
}

export interface ChongduProductauthentLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductauthentLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduProductauthentLogEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduProductauthentLogSubscription>() => T;
}

export interface ChongduMerchantSubscriptionPayload {
  mutation: MutationType;
  node: ChongduMerchant;
  updatedFields: String[];
  previousValues: ChongduMerchantPreviousValues;
}

export interface ChongduMerchantSubscriptionPayloadPromise
  extends Promise<ChongduMerchantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduMerchantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduMerchantPreviousValuesPromise>() => T;
}

export interface ChongduMerchantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduMerchantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduMerchantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduMerchantPreviousValuesSubscription>() => T;
}

export interface ChongduProductauthentLog {
  id: Int;
  productauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduProductauthentLogPromise
  extends Promise<ChongduProductauthentLog>,
    Fragmentable {
  id: () => Promise<Int>;
  productauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduProductauthentLogSubscription
  extends Promise<AsyncIterator<ChongduProductauthentLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  productauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  cadminId: <T = ChongduAdminSubscription>() => T;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductauthentLogNullablePromise
  extends Promise<ChongduProductauthentLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  productauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduMerchantPreviousValues {
  id: ID_Output;
  address?: String;
  attention?: Int;
  beginTime?: String;
  city?: String;
  citycode?: String;
  endTime?: String;
  icon?: String;
  latitude?: String;
  longitude?: String;
  name?: String;
  tel?: String;
  userId?: String;
}

export interface ChongduMerchantPreviousValuesPromise
  extends Promise<ChongduMerchantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  attention: () => Promise<Int>;
  beginTime: () => Promise<String>;
  city: () => Promise<String>;
  citycode: () => Promise<String>;
  endTime: () => Promise<String>;
  icon: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  name: () => Promise<String>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduMerchantPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduMerchantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  attention: () => Promise<AsyncIterator<Int>>;
  beginTime: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tel: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductTypeEdge {
  node: ChongduProductType;
  cursor: String;
}

export interface ChongduProductTypeEdgePromise
  extends Promise<ChongduProductTypeEdge>,
    Fragmentable {
  node: <T = ChongduProductTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductTypeEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductTypeEdge>>,
    Fragmentable {
  node: <T = ChongduProductTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMenuConnection {
  pageInfo: PageInfo;
  edges: ChongduMenuEdge[];
}

export interface ChongduMenuConnectionPromise
  extends Promise<ChongduMenuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduMenuEdge>>() => T;
  aggregate: <T = AggregateChongduMenuPromise>() => T;
}

export interface ChongduMenuConnectionSubscription
  extends Promise<AsyncIterator<ChongduMenuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduMenuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduMenuSubscription>() => T;
}

export interface AggregateChongduAdvertisement {
  count: Int;
}

export interface AggregateChongduAdvertisementPromise
  extends Promise<AggregateChongduAdvertisement>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAdvertisementSubscription
  extends Promise<AsyncIterator<AggregateChongduAdvertisement>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMerchantImgSubscriptionPayload {
  mutation: MutationType;
  node: ChongduMerchantImg;
  updatedFields: String[];
  previousValues: ChongduMerchantImgPreviousValues;
}

export interface ChongduMerchantImgSubscriptionPayloadPromise
  extends Promise<ChongduMerchantImgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduMerchantImgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduMerchantImgPreviousValuesPromise>() => T;
}

export interface ChongduMerchantImgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduMerchantImgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduMerchantImgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduMerchantImgPreviousValuesSubscription>() => T;
}

export interface ChongduProductSkuEdge {
  node: ChongduProductSku;
  cursor: String;
}

export interface ChongduProductSkuEdgePromise
  extends Promise<ChongduProductSkuEdge>,
    Fragmentable {
  node: <T = ChongduProductSkuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductSkuEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductSkuEdge>>,
    Fragmentable {
  node: <T = ChongduProductSkuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMerchantImgPreviousValues {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  merchantId?: String;
  mt?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduMerchantImgPreviousValuesPromise
  extends Promise<ChongduMerchantImgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduMerchantImgPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduMerchantImgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductSku {
  id: Int;
  attribute?: String;
  d?: Int;
  lockStock?: Int;
  lowStock?: Int;
  num?: Int;
  price?: Float;
  productId?: String;
  salesVolume?: Int;
  skuCode?: String;
  status?: Int;
}

export interface ChongduProductSkuPromise
  extends Promise<ChongduProductSku>,
    Fragmentable {
  id: () => Promise<Int>;
  attribute: () => Promise<String>;
  d: () => Promise<Int>;
  lockStock: () => Promise<Int>;
  lowStock: () => Promise<Int>;
  num: () => Promise<Int>;
  price: () => Promise<Float>;
  productId: () => Promise<String>;
  salesVolume: () => Promise<Int>;
  skuCode: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduProductSkuSubscription
  extends Promise<AsyncIterator<ChongduProductSku>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  attribute: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  lockStock: () => Promise<AsyncIterator<Int>>;
  lowStock: () => Promise<AsyncIterator<Int>>;
  num: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  productId: () => Promise<AsyncIterator<String>>;
  salesVolume: () => Promise<AsyncIterator<Int>>;
  skuCode: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductSkuNullablePromise
  extends Promise<ChongduProductSku | null>,
    Fragmentable {
  id: () => Promise<Int>;
  attribute: () => Promise<String>;
  d: () => Promise<Int>;
  lockStock: () => Promise<Int>;
  lowStock: () => Promise<Int>;
  num: () => Promise<Int>;
  price: () => Promise<Float>;
  productId: () => Promise<String>;
  salesVolume: () => Promise<Int>;
  skuCode: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduMenu {
  id: ID_Output;
  ct?: String;
  d?: Int;
  icon?: String;
  mobile?: String;
  mobileIcon?: String;
  modelId?: String;
  mt?: String;
  name?: String;
  path?: String;
  pid?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduMenuPromise extends Promise<ChongduMenu>, Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  mobile: () => Promise<String>;
  mobileIcon: () => Promise<String>;
  modelId: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  path: () => Promise<String>;
  pid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduMenuSubscription
  extends Promise<AsyncIterator<ChongduMenu>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  mobile: () => Promise<AsyncIterator<String>>;
  mobileIcon: () => Promise<AsyncIterator<String>>;
  modelId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMenuNullablePromise
  extends Promise<ChongduMenu | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  mobile: () => Promise<String>;
  mobileIcon: () => Promise<String>;
  modelId: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  path: () => Promise<String>;
  pid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduProductRecommendEdge {
  node: ChongduProductRecommend;
  cursor: String;
}

export interface ChongduProductRecommendEdgePromise
  extends Promise<ChongduProductRecommendEdge>,
    Fragmentable {
  node: <T = ChongduProductRecommendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductRecommendEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductRecommendEdge>>,
    Fragmentable {
  node: <T = ChongduProductRecommendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduMerchantstatisticSubscriptionPayload {
  mutation: MutationType;
  node: ChongduMerchantstatistic;
  updatedFields: String[];
  previousValues: ChongduMerchantstatisticPreviousValues;
}

export interface ChongduMerchantstatisticSubscriptionPayloadPromise
  extends Promise<ChongduMerchantstatisticSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduMerchantstatisticPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduMerchantstatisticPreviousValuesPromise>() => T;
}

export interface ChongduMerchantstatisticSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduMerchantstatisticSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduMerchantstatisticSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduMerchantstatisticPreviousValuesSubscription
  >() => T;
}

export interface ChongduAdvice {
  id: Int;
  comment?: String;
  ct?: String;
  d?: Int;
  type?: Int;
  useid?: String;
}

export interface ChongduAdvicePromise
  extends Promise<ChongduAdvice>,
    Fragmentable {
  id: () => Promise<Int>;
  comment: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  type: () => Promise<Int>;
  useid: () => Promise<String>;
}

export interface ChongduAdviceSubscription
  extends Promise<AsyncIterator<ChongduAdvice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  useid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAdviceNullablePromise
  extends Promise<ChongduAdvice | null>,
    Fragmentable {
  id: () => Promise<Int>;
  comment: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  type: () => Promise<Int>;
  useid: () => Promise<String>;
}

export interface ChongduMerchantstatisticPreviousValues {
  id: Int;
  count?: Int;
  ct?: String;
  d?: Int;
  day?: Int;
  hour?: Int;
  month?: Int;
  mt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  year?: Int;
}

export interface ChongduMerchantstatisticPreviousValuesPromise
  extends Promise<ChongduMerchantstatisticPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduMerchantstatisticPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduMerchantstatisticPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduProductPettype {
  count: Int;
}

export interface AggregateChongduProductPettypePromise
  extends Promise<AggregateChongduProductPettype>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductPettypeSubscription
  extends Promise<AsyncIterator<AggregateChongduProductPettype>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduLoginLog {
  count: Int;
}

export interface AggregateChongduLoginLogPromise
  extends Promise<AggregateChongduLoginLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduLoginLogSubscription
  extends Promise<AsyncIterator<AggregateChongduLoginLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductPettypeConnection {
  pageInfo: PageInfo;
  edges: ChongduProductPettypeEdge[];
}

export interface ChongduProductPettypeConnectionPromise
  extends Promise<ChongduProductPettypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductPettypeEdge>>() => T;
  aggregate: <T = AggregateChongduProductPettypePromise>() => T;
}

export interface ChongduProductPettypeConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductPettypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduProductPettypeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduProductPettypeSubscription>() => T;
}

export interface ChongduMessageSubscriptionPayload {
  mutation: MutationType;
  node: ChongduMessage;
  updatedFields: String[];
  previousValues: ChongduMessagePreviousValues;
}

export interface ChongduMessageSubscriptionPayloadPromise
  extends Promise<ChongduMessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduMessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduMessagePreviousValuesPromise>() => T;
}

export interface ChongduMessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduMessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduMessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduMessagePreviousValuesSubscription>() => T;
}

export interface AggregateChongduProductImg {
  count: Int;
}

export interface AggregateChongduProductImgPromise
  extends Promise<AggregateChongduProductImg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductImgSubscription
  extends Promise<AsyncIterator<AggregateChongduProductImg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduMessagePreviousValues {
  id: Int;
  authentstate?: String;
  content?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  img?: String;
  mt?: String;
  muserId?: String;
  publishtime?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduMessagePreviousValuesPromise
  extends Promise<ChongduMessagePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  authentstate: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  publishtime: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduMessagePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduMessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  authentstate: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  img: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  publishtime: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductImgConnection {
  pageInfo: PageInfo;
  edges: ChongduProductImgEdge[];
}

export interface ChongduProductImgConnectionPromise
  extends Promise<ChongduProductImgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductImgEdge>>() => T;
  aggregate: <T = AggregateChongduProductImgPromise>() => T;
}

export interface ChongduProductImgConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductImgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduProductImgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduProductImgSubscription>() => T;
}

export interface ChongduLoginLogEdge {
  node: ChongduLoginLog;
  cursor: String;
}

export interface ChongduLoginLogEdgePromise
  extends Promise<ChongduLoginLogEdge>,
    Fragmentable {
  node: <T = ChongduLoginLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduLoginLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduLoginLogEdge>>,
    Fragmentable {
  node: <T = ChongduLoginLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductImg {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  mt?: String;
  productId?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduProductImgPromise
  extends Promise<ChongduProductImg>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  productId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduProductImgSubscription
  extends Promise<AsyncIterator<ChongduProductImg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductImgNullablePromise
  extends Promise<ChongduProductImg | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  productId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduModelSubscriptionPayload {
  mutation: MutationType;
  node: ChongduModel;
  updatedFields: String[];
  previousValues: ChongduModelPreviousValues;
}

export interface ChongduModelSubscriptionPayloadPromise
  extends Promise<ChongduModelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduModelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduModelPreviousValuesPromise>() => T;
}

export interface ChongduModelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduModelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduModelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduModelPreviousValuesSubscription>() => T;
}

export interface ChongduProductBrandEdge {
  node: ChongduProductBrand;
  cursor: String;
}

export interface ChongduProductBrandEdgePromise
  extends Promise<ChongduProductBrandEdge>,
    Fragmentable {
  node: <T = ChongduProductBrandPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductBrandEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductBrandEdge>>,
    Fragmentable {
  node: <T = ChongduProductBrandSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduModelPreviousValues {
  id: ID_Output;
  action?: String;
  ct?: String;
  d?: Int;
  mt?: String;
  name?: String;
  namespace?: String;
  path?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduModelPreviousValuesPromise
  extends Promise<ChongduModelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  namespace: () => Promise<String>;
  path: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduModelPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduModelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  action: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  namespace: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAdviceEdge {
  node: ChongduAdvice;
  cursor: String;
}

export interface ChongduAdviceEdgePromise
  extends Promise<ChongduAdviceEdge>,
    Fragmentable {
  node: <T = ChongduAdvicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAdviceEdgeSubscription
  extends Promise<AsyncIterator<ChongduAdviceEdge>>,
    Fragmentable {
  node: <T = ChongduAdviceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLoginLogConnection {
  pageInfo: PageInfo;
  edges: ChongduLoginLogEdge[];
}

export interface ChongduLoginLogConnectionPromise
  extends Promise<ChongduLoginLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduLoginLogEdge>>() => T;
  aggregate: <T = AggregateChongduLoginLogPromise>() => T;
}

export interface ChongduLoginLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduLoginLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduLoginLogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduLoginLogSubscription>() => T;
}

export interface ChongduProductAuthentdetailEdge {
  node: ChongduProductAuthentdetail;
  cursor: String;
}

export interface ChongduProductAuthentdetailEdgePromise
  extends Promise<ChongduProductAuthentdetailEdge>,
    Fragmentable {
  node: <T = ChongduProductAuthentdetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductAuthentdetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductAuthentdetailEdge>>,
    Fragmentable {
  node: <T = ChongduProductAuthentdetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduModeldetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduModeldetail;
  updatedFields: String[];
  previousValues: ChongduModeldetailPreviousValues;
}

export interface ChongduModeldetailSubscriptionPayloadPromise
  extends Promise<ChongduModeldetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduModeldetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduModeldetailPreviousValuesPromise>() => T;
}

export interface ChongduModeldetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduModeldetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduModeldetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduModeldetailPreviousValuesSubscription>() => T;
}

export interface AggregateChongduAdvice {
  count: Int;
}

export interface AggregateChongduAdvicePromise
  extends Promise<AggregateChongduAdvice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAdviceSubscription
  extends Promise<AsyncIterator<AggregateChongduAdvice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduModeldetailPreviousValues {
  id: ID_Output;
  action?: String;
  alert?: String;
  ask?: Int;
  auth?: String;
  buttomname?: String;
  button?: String;
  ct?: String;
  d?: Int;
  function?: String;
  heght?: String;
  method?: String;
  methodname?: String;
  modelId?: String;
  mt?: String;
  namespace?: String;
  param?: String;
  refresh?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  viewname?: String;
  width?: String;
}

export interface ChongduModeldetailPreviousValuesPromise
  extends Promise<ChongduModeldetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  action: () => Promise<String>;
  alert: () => Promise<String>;
  ask: () => Promise<Int>;
  auth: () => Promise<String>;
  buttomname: () => Promise<String>;
  button: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  function: () => Promise<String>;
  heght: () => Promise<String>;
  method: () => Promise<String>;
  methodname: () => Promise<String>;
  modelId: () => Promise<String>;
  mt: () => Promise<String>;
  namespace: () => Promise<String>;
  param: () => Promise<String>;
  refresh: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  viewname: () => Promise<String>;
  width: () => Promise<String>;
}

export interface ChongduModeldetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduModeldetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  action: () => Promise<AsyncIterator<String>>;
  alert: () => Promise<AsyncIterator<String>>;
  ask: () => Promise<AsyncIterator<Int>>;
  auth: () => Promise<AsyncIterator<String>>;
  buttomname: () => Promise<AsyncIterator<String>>;
  button: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  function: () => Promise<AsyncIterator<String>>;
  heght: () => Promise<AsyncIterator<String>>;
  method: () => Promise<AsyncIterator<String>>;
  methodname: () => Promise<AsyncIterator<String>>;
  modelId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  namespace: () => Promise<AsyncIterator<String>>;
  param: () => Promise<AsyncIterator<String>>;
  refresh: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  viewname: () => Promise<AsyncIterator<String>>;
  width: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduProduct {
  count: Int;
}

export interface AggregateChongduProductPromise
  extends Promise<AggregateChongduProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductSubscription
  extends Promise<AsyncIterator<AggregateChongduProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCity {
  id: Int;
  code?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduCityPromise extends Promise<ChongduCity>, Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduCitySubscription
  extends Promise<AsyncIterator<ChongduCity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCityNullablePromise
  extends Promise<ChongduCity | null>,
    Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduProductConnection {
  pageInfo: PageInfo;
  edges: ChongduProductEdge[];
}

export interface ChongduProductConnectionPromise
  extends Promise<ChongduProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductEdge>>() => T;
  aggregate: <T = AggregateChongduProductPromise>() => T;
}

export interface ChongduProductConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduProductSubscription>() => T;
}

export interface ChongduOrderSubscriptionPayload {
  mutation: MutationType;
  node: ChongduOrder;
  updatedFields: String[];
  previousValues: ChongduOrderPreviousValues;
}

export interface ChongduOrderSubscriptionPayloadPromise
  extends Promise<ChongduOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduOrderPreviousValuesPromise>() => T;
}

export interface ChongduOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduOrderPreviousValuesSubscription>() => T;
}

export interface ChongduProductBrand {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  firstLetter?: String;
  logoImg?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  status?: Int;
  type?: Int;
}

export interface ChongduProductBrandPromise
  extends Promise<ChongduProductBrand>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  firstLetter: () => Promise<String>;
  logoImg: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduProductBrandSubscription
  extends Promise<AsyncIterator<ChongduProductBrand>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  firstLetter: () => Promise<AsyncIterator<String>>;
  logoImg: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductBrandNullablePromise
  extends Promise<ChongduProductBrand | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  firstLetter: () => Promise<String>;
  logoImg: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduOrderPreviousValues {
  id: Int;
  addressId?: Int;
  closeTime?: String;
  ct?: String;
  d?: Int;
  endTime?: String;
  mt?: String;
  orderNo?: String;
  payment?: Float;
  paymentTime?: String;
  paymentType?: Int;
  postage?: Float;
  sendTime?: String;
  status?: Int;
  userId?: String;
}

export interface ChongduOrderPreviousValuesPromise
  extends Promise<ChongduOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  addressId: () => Promise<Int>;
  closeTime: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  payment: () => Promise<Float>;
  paymentTime: () => Promise<String>;
  paymentType: () => Promise<Int>;
  postage: () => Promise<Float>;
  sendTime: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  addressId: () => Promise<AsyncIterator<Int>>;
  closeTime: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderNo: () => Promise<AsyncIterator<String>>;
  payment: () => Promise<AsyncIterator<Float>>;
  paymentTime: () => Promise<AsyncIterator<String>>;
  paymentType: () => Promise<AsyncIterator<Int>>;
  postage: () => Promise<AsyncIterator<Float>>;
  sendTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPlatformExecute {
  count: Int;
}

export interface AggregateChongduPlatformExecutePromise
  extends Promise<AggregateChongduPlatformExecute>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPlatformExecuteSubscription
  extends Promise<AsyncIterator<AggregateChongduPlatformExecute>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduLoginLog {
  id: Int;
  adminId?: String;
  ip?: String;
  loginTime?: String;
  mac?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduLoginLogPromise
  extends Promise<ChongduLoginLog>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  ip: () => Promise<String>;
  loginTime: () => Promise<String>;
  mac: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduLoginLogSubscription
  extends Promise<AsyncIterator<ChongduLoginLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  adminId: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  loginTime: () => Promise<AsyncIterator<String>>;
  mac: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLoginLogNullablePromise
  extends Promise<ChongduLoginLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  ip: () => Promise<String>;
  loginTime: () => Promise<String>;
  mac: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduPlatformExecuteConnection {
  pageInfo: PageInfo;
  edges: ChongduPlatformExecuteEdge[];
}

export interface ChongduPlatformExecuteConnectionPromise
  extends Promise<ChongduPlatformExecuteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPlatformExecuteEdge>>() => T;
  aggregate: <T = AggregateChongduPlatformExecutePromise>() => T;
}

export interface ChongduPlatformExecuteConnectionSubscription
  extends Promise<AsyncIterator<ChongduPlatformExecuteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduPlatformExecuteEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduPlatformExecuteSubscription>() => T;
}

export interface ChongduOrderItemSubscriptionPayload {
  mutation: MutationType;
  node: ChongduOrderItem;
  updatedFields: String[];
  previousValues: ChongduOrderItemPreviousValues;
}

export interface ChongduOrderItemSubscriptionPayloadPromise
  extends Promise<ChongduOrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduOrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduOrderItemPreviousValuesPromise>() => T;
}

export interface ChongduOrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduOrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduOrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduOrderItemPreviousValuesSubscription>() => T;
}

export interface ChongduPlatformExecute {
  id: Int;
  business?: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  endtime?: String;
  money?: Float;
  mt?: String;
  muserId?: String;
  oneprice?: Float;
  relateId?: Int;
  relateType?: Int;
  residue?: Int;
  sort?: Int;
  starttime?: String;
  status?: Int;
  timestep?: String;
  type?: Int;
  userarea?: String;
  userId?: String;
  username?: String;
}

export interface ChongduPlatformExecutePromise
  extends Promise<ChongduPlatformExecute>,
    Fragmentable {
  id: () => Promise<Int>;
  business: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  endtime: () => Promise<String>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  oneprice: () => Promise<Float>;
  relateId: () => Promise<Int>;
  relateType: () => Promise<Int>;
  residue: () => Promise<Int>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  timestep: () => Promise<String>;
  type: () => Promise<Int>;
  userarea: () => Promise<String>;
  userId: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduPlatformExecuteSubscription
  extends Promise<AsyncIterator<ChongduPlatformExecute>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  business: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  money: () => Promise<AsyncIterator<Float>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  oneprice: () => Promise<AsyncIterator<Float>>;
  relateId: () => Promise<AsyncIterator<Int>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  residue: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  timestep: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userarea: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPlatformExecuteNullablePromise
  extends Promise<ChongduPlatformExecute | null>,
    Fragmentable {
  id: () => Promise<Int>;
  business: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  endtime: () => Promise<String>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  oneprice: () => Promise<Float>;
  relateId: () => Promise<Int>;
  relateType: () => Promise<Int>;
  residue: () => Promise<Int>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  timestep: () => Promise<String>;
  type: () => Promise<Int>;
  userarea: () => Promise<String>;
  userId: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduOrderItemPreviousValues {
  id: Int;
  closeTime?: String;
  ct?: String;
  currentPrice?: Float;
  d?: Int;
  endTime?: String;
  image?: String;
  merchantId?: String;
  merOrderNo?: String;
  mt?: String;
  orderNo?: String;
  paymentTime?: String;
  paymentType?: Int;
  postage?: Float;
  productId?: String;
  productName?: String;
  quantity?: Int;
  remark?: String;
  reStatus?: Int;
  sendTime?: String;
  status?: Int;
  totalPrice?: Float;
  userId?: String;
}

export interface ChongduOrderItemPreviousValuesPromise
  extends Promise<ChongduOrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  closeTime: () => Promise<String>;
  ct: () => Promise<String>;
  currentPrice: () => Promise<Float>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  image: () => Promise<String>;
  merchantId: () => Promise<String>;
  merOrderNo: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  paymentTime: () => Promise<String>;
  paymentType: () => Promise<Int>;
  postage: () => Promise<Float>;
  productId: () => Promise<String>;
  productName: () => Promise<String>;
  quantity: () => Promise<Int>;
  remark: () => Promise<String>;
  reStatus: () => Promise<Int>;
  sendTime: () => Promise<String>;
  status: () => Promise<Int>;
  totalPrice: () => Promise<Float>;
  userId: () => Promise<String>;
}

export interface ChongduOrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduOrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  closeTime: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  currentPrice: () => Promise<AsyncIterator<Float>>;
  d: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  merOrderNo: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderNo: () => Promise<AsyncIterator<String>>;
  paymentTime: () => Promise<AsyncIterator<String>>;
  paymentType: () => Promise<AsyncIterator<Int>>;
  postage: () => Promise<AsyncIterator<Float>>;
  productId: () => Promise<AsyncIterator<String>>;
  productName: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  reStatus: () => Promise<AsyncIterator<Int>>;
  sendTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPlatformBusinessEdge {
  node: ChongduPlatformBusiness;
  cursor: String;
}

export interface ChongduPlatformBusinessEdgePromise
  extends Promise<ChongduPlatformBusinessEdge>,
    Fragmentable {
  node: <T = ChongduPlatformBusinessPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPlatformBusinessEdgeSubscription
  extends Promise<AsyncIterator<ChongduPlatformBusinessEdge>>,
    Fragmentable {
  node: <T = ChongduPlatformBusinessSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduLog {
  count: Int;
}

export interface AggregateChongduLogPromise
  extends Promise<AggregateChongduLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduLogSubscription
  extends Promise<AsyncIterator<AggregateChongduLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPlatformBusiness {
  id: Int;
  content?: String;
  ct?: String;
  currency?: Float;
  cuserId?: String;
  d?: Int;
  length?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  price?: Float;
  rNum?: Int;
  sort?: Int;
  status?: Int;
  timestep?: Int;
  type?: Int;
}

export interface ChongduPlatformBusinessPromise
  extends Promise<ChongduPlatformBusiness>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  currency: () => Promise<Float>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  length: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  rNum: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  timestep: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduPlatformBusinessSubscription
  extends Promise<AsyncIterator<ChongduPlatformBusiness>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<Float>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  length: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  rNum: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  timestep: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPlatformBusinessNullablePromise
  extends Promise<ChongduPlatformBusiness | null>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  currency: () => Promise<Float>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  length: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  rNum: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  timestep: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduOrderinvoiceSubscriptionPayload {
  mutation: MutationType;
  node: ChongduOrderinvoice;
  updatedFields: String[];
  previousValues: ChongduOrderinvoicePreviousValues;
}

export interface ChongduOrderinvoiceSubscriptionPayloadPromise
  extends Promise<ChongduOrderinvoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduOrderinvoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduOrderinvoicePreviousValuesPromise>() => T;
}

export interface ChongduOrderinvoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduOrderinvoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduOrderinvoicePreviousValuesSubscription>() => T;
}

export interface ChongduPetauthentdetailEdge {
  node: ChongduPetauthentdetail;
  cursor: String;
}

export interface ChongduPetauthentdetailEdgePromise
  extends Promise<ChongduPetauthentdetailEdge>,
    Fragmentable {
  node: <T = ChongduPetauthentdetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetauthentdetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetauthentdetailEdge>>,
    Fragmentable {
  node: <T = ChongduPetauthentdetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderinvoicePreviousValues {
  id: Int;
  accountnum?: String;
  addressid?: Int;
  ct?: String;
  cuserid?: String;
  d?: Int;
  head?: String;
  invoicename?: String;
  money?: Float;
  mt?: String;
  muserid?: String;
  name?: String;
  nature?: Int;
  orderid?: String;
  phone?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  userid?: String;
  username?: String;
  usernum?: String;
}

export interface ChongduOrderinvoicePreviousValuesPromise
  extends Promise<ChongduOrderinvoicePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  accountnum: () => Promise<String>;
  addressid: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  head: () => Promise<String>;
  invoicename: () => Promise<String>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  nature: () => Promise<Int>;
  orderid: () => Promise<String>;
  phone: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
  usernum: () => Promise<String>;
}

export interface ChongduOrderinvoicePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  accountnum: () => Promise<AsyncIterator<String>>;
  addressid: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  head: () => Promise<AsyncIterator<String>>;
  invoicename: () => Promise<AsyncIterator<String>>;
  money: () => Promise<AsyncIterator<Float>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nature: () => Promise<AsyncIterator<Int>>;
  orderid: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  usernum: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAgentConnection {
  pageInfo: PageInfo;
  edges: ChongduAgentEdge[];
}

export interface ChongduAgentConnectionPromise
  extends Promise<ChongduAgentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAgentEdge>>() => T;
  aggregate: <T = AggregateChongduAgentPromise>() => T;
}

export interface ChongduAgentConnectionSubscription
  extends Promise<AsyncIterator<ChongduAgentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAgentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAgentSubscription>() => T;
}

export interface ChongduLogEdge {
  node: ChongduLog;
  cursor: String;
}

export interface ChongduLogEdgePromise
  extends Promise<ChongduLogEdge>,
    Fragmentable {
  node: <T = ChongduLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduLogEdge>>,
    Fragmentable {
  node: <T = ChongduLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPetauthentLog {
  count: Int;
}

export interface AggregateChongduPetauthentLogPromise
  extends Promise<AggregateChongduPetauthentLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetauthentLogSubscription
  extends Promise<AsyncIterator<AggregateChongduPetauthentLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderinvoicedetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduOrderinvoicedetail;
  updatedFields: String[];
  previousValues: ChongduOrderinvoicedetailPreviousValues;
}

export interface ChongduOrderinvoicedetailSubscriptionPayloadPromise
  extends Promise<ChongduOrderinvoicedetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduOrderinvoicedetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduOrderinvoicedetailPreviousValuesPromise>() => T;
}

export interface ChongduOrderinvoicedetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoicedetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduOrderinvoicedetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduOrderinvoicedetailPreviousValuesSubscription
  >() => T;
}

export interface ChongduPetauthentLogConnection {
  pageInfo: PageInfo;
  edges: ChongduPetauthentLogEdge[];
}

export interface ChongduPetauthentLogConnectionPromise
  extends Promise<ChongduPetauthentLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetauthentLogEdge>>() => T;
  aggregate: <T = AggregateChongduPetauthentLogPromise>() => T;
}

export interface ChongduPetauthentLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetauthentLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduPetauthentLogEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduPetauthentLogSubscription>() => T;
}

export interface ChongduOrderinvoicedetailPreviousValues {
  id: Int;
  audittime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  invoiceid?: Int;
  mt?: String;
  muserid?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  userid?: String;
}

export interface ChongduOrderinvoicedetailPreviousValuesPromise
  extends Promise<ChongduOrderinvoicedetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  invoiceid: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduOrderinvoicedetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoicedetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audittime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  invoiceid: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetauthentLog {
  id: Int;
  petauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduPetauthentLogPromise
  extends Promise<ChongduPetauthentLog>,
    Fragmentable {
  id: () => Promise<Int>;
  petauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduPetauthentLogSubscription
  extends Promise<AsyncIterator<ChongduPetauthentLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  petauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  cadminId: <T = ChongduAdminSubscription>() => T;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetauthentLogNullablePromise
  extends Promise<ChongduPetauthentLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  petauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduLogConnection {
  pageInfo: PageInfo;
  edges: ChongduLogEdge[];
}

export interface ChongduLogConnectionPromise
  extends Promise<ChongduLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduLogEdge>>() => T;
  aggregate: <T = AggregateChongduLogPromise>() => T;
}

export interface ChongduLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduLogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduLogSubscription>() => T;
}

export interface ChongduPetTypeEdge {
  node: ChongduPetType;
  cursor: String;
}

export interface ChongduPetTypeEdgePromise
  extends Promise<ChongduPetTypeEdge>,
    Fragmentable {
  node: <T = ChongduPetTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetTypeEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetTypeEdge>>,
    Fragmentable {
  node: <T = ChongduPetTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderserialSubscriptionPayload {
  mutation: MutationType;
  node: ChongduOrderserial;
  updatedFields: String[];
  previousValues: ChongduOrderserialPreviousValues;
}

export interface ChongduOrderserialSubscriptionPayloadPromise
  extends Promise<ChongduOrderserialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduOrderserialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduOrderserialPreviousValuesPromise>() => T;
}

export interface ChongduOrderserialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduOrderserialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduOrderserialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduOrderserialPreviousValuesSubscription>() => T;
}

export interface AggregateChongduAgent {
  count: Int;
}

export interface AggregateChongduAgentPromise
  extends Promise<AggregateChongduAgent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAgentSubscription
  extends Promise<AsyncIterator<AggregateChongduAgent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderserialPreviousValues {
  id: Int;
  context?: String;
  ct?: String;
  d?: Int;
  money?: Float;
  mt?: String;
  orderid?: Int;
  ordersn?: String;
  platformtype?: Int;
  sort?: Int;
  status?: Int;
  type?: Int;
  userid?: String;
}

export interface ChongduOrderserialPreviousValuesPromise
  extends Promise<ChongduOrderserialPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  context: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  orderid: () => Promise<Int>;
  ordersn: () => Promise<String>;
  platformtype: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduOrderserialPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduOrderserialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  context: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  money: () => Promise<AsyncIterator<Float>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  ordersn: () => Promise<AsyncIterator<String>>;
  platformtype: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetRecommendEdge {
  node: ChongduPetRecommend;
  cursor: String;
}

export interface ChongduPetRecommendEdgePromise
  extends Promise<ChongduPetRecommendEdge>,
    Fragmentable {
  node: <T = ChongduPetRecommendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetRecommendEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetRecommendEdge>>,
    Fragmentable {
  node: <T = ChongduPetRecommendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLog {
  id: Int;
  cn?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  dataId?: Int;
  ip?: String;
  mn?: String;
  mt?: String;
  muserId?: String;
  originalData?: String;
  sort?: Int;
  status?: Int;
  targetData?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduLogPromise extends Promise<ChongduLog>, Fragmentable {
  id: () => Promise<Int>;
  cn: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  dataId: () => Promise<Int>;
  ip: () => Promise<String>;
  mn: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  originalData: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  targetData: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduLogSubscription
  extends Promise<AsyncIterator<ChongduLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cn: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  dataId: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mn: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  originalData: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  targetData: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLogNullablePromise
  extends Promise<ChongduLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  cn: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  dataId: () => Promise<Int>;
  ip: () => Promise<String>;
  mn: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  originalData: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  targetData: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduPetRecommend {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  endtime?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  pid?: Int;
  sort?: Int;
  starttime?: String;
  status?: Int;
  userid?: String;
  username?: String;
}

export interface ChongduPetRecommendPromise
  extends Promise<ChongduPetRecommend>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduPetRecommendSubscription
  extends Promise<AsyncIterator<ChongduPetRecommend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetRecommendNullablePromise
  extends Promise<ChongduPetRecommend | null>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduOrderstatisticSubscriptionPayload {
  mutation: MutationType;
  node: ChongduOrderstatistic;
  updatedFields: String[];
  previousValues: ChongduOrderstatisticPreviousValues;
}

export interface ChongduOrderstatisticSubscriptionPayloadPromise
  extends Promise<ChongduOrderstatisticSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduOrderstatisticPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduOrderstatisticPreviousValuesPromise>() => T;
}

export interface ChongduOrderstatisticSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduOrderstatisticSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduOrderstatisticSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduOrderstatisticPreviousValuesSubscription>() => T;
}

export interface ChongduPetImgEdge {
  node: ChongduPetImg;
  cursor: String;
}

export interface ChongduPetImgEdgePromise
  extends Promise<ChongduPetImgEdge>,
    Fragmentable {
  node: <T = ChongduPetImgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetImgEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetImgEdge>>,
    Fragmentable {
  node: <T = ChongduPetImgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderstatisticPreviousValues {
  id: Int;
  count?: Int;
  ct?: String;
  d?: Int;
  day?: Int;
  hour?: Int;
  month?: Int;
  mt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  year?: Int;
}

export interface ChongduOrderstatisticPreviousValuesPromise
  extends Promise<ChongduOrderstatisticPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduOrderstatisticPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduOrderstatisticPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAppVersion {
  id: Int;
  appCode?: String;
  appId?: String;
  appVersion?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  description?: String;
  deviceType?: Int;
  fileName?: String;
  forces?: Int;
  mt?: String;
  muserId?: String;
  sort?: Int;
  status?: Int;
  url?: String;
}

export interface ChongduAppVersionPromise
  extends Promise<ChongduAppVersion>,
    Fragmentable {
  id: () => Promise<Int>;
  appCode: () => Promise<String>;
  appId: () => Promise<String>;
  appVersion: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  deviceType: () => Promise<Int>;
  fileName: () => Promise<String>;
  forces: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduAppVersionSubscription
  extends Promise<AsyncIterator<ChongduAppVersion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  appCode: () => Promise<AsyncIterator<String>>;
  appId: () => Promise<AsyncIterator<String>>;
  appVersion: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  deviceType: () => Promise<AsyncIterator<Int>>;
  fileName: () => Promise<AsyncIterator<String>>;
  forces: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAppVersionNullablePromise
  extends Promise<ChongduAppVersion | null>,
    Fragmentable {
  id: () => Promise<Int>;
  appCode: () => Promise<String>;
  appId: () => Promise<String>;
  appVersion: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  deviceType: () => Promise<Int>;
  fileName: () => Promise<String>;
  forces: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface AggregateChongduLock {
  count: Int;
}

export interface AggregateChongduLockPromise
  extends Promise<AggregateChongduLock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduLockSubscription
  extends Promise<AsyncIterator<AggregateChongduLock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduPetCard {
  count: Int;
}

export interface AggregateChongduPetCardPromise
  extends Promise<AggregateChongduPetCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetCardSubscription
  extends Promise<AsyncIterator<AggregateChongduPetCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPayInfoSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPayInfo;
  updatedFields: String[];
  previousValues: ChongduPayInfoPreviousValues;
}

export interface ChongduPayInfoSubscriptionPayloadPromise
  extends Promise<ChongduPayInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPayInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPayInfoPreviousValuesPromise>() => T;
}

export interface ChongduPayInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPayInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPayInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPayInfoPreviousValuesSubscription>() => T;
}

export interface ChongduPetCardConnection {
  pageInfo: PageInfo;
  edges: ChongduPetCardEdge[];
}

export interface ChongduPetCardConnectionPromise
  extends Promise<ChongduPetCardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetCardEdge>>() => T;
  aggregate: <T = AggregateChongduPetCardPromise>() => T;
}

export interface ChongduPetCardConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetCardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduPetCardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduPetCardSubscription>() => T;
}

export interface ChongduPayInfoPreviousValues {
  id: Int;
  ct?: String;
  mt?: String;
  orderNo?: String;
  payNo?: String;
  payPlatform?: String;
  status?: Int;
  userId?: String;
}

export interface ChongduPayInfoPreviousValuesPromise
  extends Promise<ChongduPayInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  payNo: () => Promise<String>;
  payPlatform: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduPayInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPayInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderNo: () => Promise<AsyncIterator<String>>;
  payNo: () => Promise<AsyncIterator<String>>;
  payPlatform: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPet {
  count: Int;
}

export interface AggregateChongduPetPromise
  extends Promise<AggregateChongduPet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetSubscription
  extends Promise<AsyncIterator<AggregateChongduPet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduLockEdge {
  node: ChongduLock;
  cursor: String;
}

export interface ChongduLockEdgePromise
  extends Promise<ChongduLockEdge>,
    Fragmentable {
  node: <T = ChongduLockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduLockEdgeSubscription
  extends Promise<AsyncIterator<ChongduLockEdge>>,
    Fragmentable {
  node: <T = ChongduLockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetConnection {
  pageInfo: PageInfo;
  edges: ChongduPetEdge[];
}

export interface ChongduPetConnectionPromise
  extends Promise<ChongduPetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetEdge>>() => T;
  aggregate: <T = AggregateChongduPetPromise>() => T;
}

export interface ChongduPetConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduPetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduPetSubscription>() => T;
}

export interface ChongduPermissionSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPermission;
  updatedFields: String[];
  previousValues: ChongduPermissionPreviousValues;
}

export interface ChongduPermissionSubscriptionPayloadPromise
  extends Promise<ChongduPermissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPermissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPermissionPreviousValuesPromise>() => T;
}

export interface ChongduPermissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPermissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPermissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPermissionPreviousValuesSubscription>() => T;
}

export interface ChongduPetType {
  id: Int;
  ct?: String;
  cuserId?: String;
  image?: String;
  level?: Int;
  name?: String;
  pid?: Int;
  ppid?: Int;
  sort?: Int;
}

export interface ChongduPetTypePromise
  extends Promise<ChongduPetType>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  image: () => Promise<String>;
  level: () => Promise<Int>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  ppid: () => Promise<Int>;
  sort: () => Promise<Int>;
}

export interface ChongduPetTypeSubscription
  extends Promise<AsyncIterator<ChongduPetType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  ppid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetTypeNullablePromise
  extends Promise<ChongduPetType | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  image: () => Promise<String>;
  level: () => Promise<Int>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  ppid: () => Promise<Int>;
  sort: () => Promise<Int>;
}

export interface ChongduPermissionPreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  name?: String;
  parentId?: String;
  parentIds?: String;
  permission?: String;
  status?: Int;
  type?: Int;
  url?: String;
}

export interface ChongduPermissionPreviousValuesPromise
  extends Promise<ChongduPermissionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  name: () => Promise<String>;
  parentId: () => Promise<String>;
  parentIds: () => Promise<String>;
  permission: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduPermissionPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPermissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  parentId: () => Promise<AsyncIterator<String>>;
  parentIds: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPermission {
  count: Int;
}

export interface AggregateChongduPermissionPromise
  extends Promise<AggregateChongduPermission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPermissionSubscription
  extends Promise<AsyncIterator<AggregateChongduPermission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduLockConnection {
  pageInfo: PageInfo;
  edges: ChongduLockEdge[];
}

export interface ChongduLockConnectionPromise
  extends Promise<ChongduLockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduLockEdge>>() => T;
  aggregate: <T = AggregateChongduLockPromise>() => T;
}

export interface ChongduLockConnectionSubscription
  extends Promise<AsyncIterator<ChongduLockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduLockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduLockSubscription>() => T;
}

export interface ChongduPermissionConnection {
  pageInfo: PageInfo;
  edges: ChongduPermissionEdge[];
}

export interface ChongduPermissionConnectionPromise
  extends Promise<ChongduPermissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPermissionEdge>>() => T;
  aggregate: <T = AggregateChongduPermissionPromise>() => T;
}

export interface ChongduPermissionConnectionSubscription
  extends Promise<AsyncIterator<ChongduPermissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduPermissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduPermissionSubscription>() => T;
}

export interface ChongduPetSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPet;
  updatedFields: String[];
  previousValues: ChongduPetPreviousValues;
}

export interface ChongduPetSubscriptionPayloadPromise
  extends Promise<ChongduPetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetPreviousValuesPromise>() => T;
}

export interface ChongduPetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPetPreviousValuesSubscription>() => T;
}

export interface ChongduPermission {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  name?: String;
  parentId?: String;
  parentIds?: String;
  permission?: String;
  status?: Int;
  type?: Int;
  url?: String;
}

export interface ChongduPermissionPromise
  extends Promise<ChongduPermission>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  name: () => Promise<String>;
  parentId: () => Promise<String>;
  parentIds: () => Promise<String>;
  permission: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduPermissionSubscription
  extends Promise<AsyncIterator<ChongduPermission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  parentId: () => Promise<AsyncIterator<String>>;
  parentIds: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPermissionNullablePromise
  extends Promise<ChongduPermission | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  name: () => Promise<String>;
  parentId: () => Promise<String>;
  parentIds: () => Promise<String>;
  permission: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduPetPreviousValues {
  id: ID_Output;
  addressId?: Int;
  birthday?: String;
  browser?: Int;
  citycode?: String;
  code?: String;
  color?: String;
  content?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  isMeet?: Int;
  level?: Int;
  merchantId?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  price?: Float;
  pType?: Int;
  sex?: Int;
  shareCount?: Int;
  status?: Int;
  title?: String;
}

export interface ChongduPetPreviousValuesPromise
  extends Promise<ChongduPetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addressId: () => Promise<Int>;
  birthday: () => Promise<String>;
  browser: () => Promise<Int>;
  citycode: () => Promise<String>;
  code: () => Promise<String>;
  color: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  isMeet: () => Promise<Int>;
  level: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  pType: () => Promise<Int>;
  sex: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
}

export interface ChongduPetPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addressId: () => Promise<AsyncIterator<Int>>;
  birthday: () => Promise<AsyncIterator<String>>;
  browser: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  isMeet: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  pType: () => Promise<AsyncIterator<Int>>;
  sex: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPayInfoEdge {
  node: ChongduPayInfo;
  cursor: String;
}

export interface ChongduPayInfoEdgePromise
  extends Promise<ChongduPayInfoEdge>,
    Fragmentable {
  node: <T = ChongduPayInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPayInfoEdgeSubscription
  extends Promise<AsyncIterator<ChongduPayInfoEdge>>,
    Fragmentable {
  node: <T = ChongduPayInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCityConnection {
  pageInfo: PageInfo;
  edges: ChongduCityEdge[];
}

export interface ChongduCityConnectionPromise
  extends Promise<ChongduCityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCityEdge>>() => T;
  aggregate: <T = AggregateChongduCityPromise>() => T;
}

export interface ChongduCityConnectionSubscription
  extends Promise<AsyncIterator<ChongduCityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduCityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduCitySubscription>() => T;
}

export interface AggregateChongduAppVersion {
  count: Int;
}

export interface AggregateChongduAppVersionPromise
  extends Promise<AggregateChongduAppVersion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAppVersionSubscription
  extends Promise<AsyncIterator<AggregateChongduAppVersion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetCardSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPetCard;
  updatedFields: String[];
  previousValues: ChongduPetCardPreviousValues;
}

export interface ChongduPetCardSubscriptionPayloadPromise
  extends Promise<ChongduPetCardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetCardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetCardPreviousValuesPromise>() => T;
}

export interface ChongduPetCardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetCardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetCardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPetCardPreviousValuesSubscription>() => T;
}

export interface AggregateChongduOrderstatistic {
  count: Int;
}

export interface AggregateChongduOrderstatisticPromise
  extends Promise<AggregateChongduOrderstatistic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduOrderstatisticSubscription
  extends Promise<AsyncIterator<AggregateChongduOrderstatistic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetCardPreviousValues {
  id: Int;
  birthday?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  isSteriliz?: Int;
  name?: String;
  petType?: Int;
  praiseCount?: Int;
  sex?: Int;
  userId?: String;
  weight?: String;
}

export interface ChongduPetCardPreviousValuesPromise
  extends Promise<ChongduPetCardPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  birthday: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  isSteriliz: () => Promise<Int>;
  name: () => Promise<String>;
  petType: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  sex: () => Promise<Int>;
  userId: () => Promise<String>;
  weight: () => Promise<String>;
}

export interface ChongduPetCardPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetCardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  birthday: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  isSteriliz: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  petType: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  sex: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  weight: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderstatisticConnection {
  pageInfo: PageInfo;
  edges: ChongduOrderstatisticEdge[];
}

export interface ChongduOrderstatisticConnectionPromise
  extends Promise<ChongduOrderstatisticConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduOrderstatisticEdge>>() => T;
  aggregate: <T = AggregateChongduOrderstatisticPromise>() => T;
}

export interface ChongduOrderstatisticConnectionSubscription
  extends Promise<AsyncIterator<ChongduOrderstatisticConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduOrderstatisticEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduOrderstatisticSubscription>() => T;
}

export interface ChongduLock {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  sort?: Int;
  status?: Int;
  thread?: String;
  tName?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduLockPromise extends Promise<ChongduLock>, Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  thread: () => Promise<String>;
  tName: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduLockSubscription
  extends Promise<AsyncIterator<ChongduLock>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  thread: () => Promise<AsyncIterator<String>>;
  tName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduLockNullablePromise
  extends Promise<ChongduLock | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  thread: () => Promise<String>;
  tName: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface AggregateChongduOrderserial {
  count: Int;
}

export interface AggregateChongduOrderserialPromise
  extends Promise<AggregateChongduOrderserial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduOrderserialSubscription
  extends Promise<AsyncIterator<AggregateChongduOrderserial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetImgSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPetImg;
  updatedFields: String[];
  previousValues: ChongduPetImgPreviousValues;
}

export interface ChongduPetImgSubscriptionPayloadPromise
  extends Promise<ChongduPetImgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetImgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetImgPreviousValuesPromise>() => T;
}

export interface ChongduPetImgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetImgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetImgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPetImgPreviousValuesSubscription>() => T;
}

export interface ChongduOrderserialConnection {
  pageInfo: PageInfo;
  edges: ChongduOrderserialEdge[];
}

export interface ChongduOrderserialConnectionPromise
  extends Promise<ChongduOrderserialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduOrderserialEdge>>() => T;
  aggregate: <T = AggregateChongduOrderserialPromise>() => T;
}

export interface ChongduOrderserialConnectionSubscription
  extends Promise<AsyncIterator<ChongduOrderserialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduOrderserialEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduOrderserialSubscription>() => T;
}

export interface ChongduPetImgPreviousValues {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  mt?: String;
  petId?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduPetImgPreviousValuesPromise
  extends Promise<ChongduPetImgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduPetImgPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetImgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderserial {
  id: Int;
  context?: String;
  ct?: String;
  d?: Int;
  money?: Float;
  mt?: String;
  orderid?: Int;
  ordersn?: String;
  platformtype?: Int;
  sort?: Int;
  status?: Int;
  type?: Int;
  userid?: String;
}

export interface ChongduOrderserialPromise
  extends Promise<ChongduOrderserial>,
    Fragmentable {
  id: () => Promise<Int>;
  context: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  orderid: () => Promise<Int>;
  ordersn: () => Promise<String>;
  platformtype: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduOrderserialSubscription
  extends Promise<AsyncIterator<ChongduOrderserial>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  context: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  money: () => Promise<AsyncIterator<Float>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderid: () => Promise<AsyncIterator<Int>>;
  ordersn: () => Promise<AsyncIterator<String>>;
  platformtype: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderserialNullablePromise
  extends Promise<ChongduOrderserial | null>,
    Fragmentable {
  id: () => Promise<Int>;
  context: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  orderid: () => Promise<Int>;
  ordersn: () => Promise<String>;
  platformtype: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface AggregateChongduInform {
  count: Int;
}

export interface AggregateChongduInformPromise
  extends Promise<AggregateChongduInform>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduInformSubscription
  extends Promise<AsyncIterator<AggregateChongduInform>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderinvoicedetailEdge {
  node: ChongduOrderinvoicedetail;
  cursor: String;
}

export interface ChongduOrderinvoicedetailEdgePromise
  extends Promise<ChongduOrderinvoicedetailEdge>,
    Fragmentable {
  node: <T = ChongduOrderinvoicedetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduOrderinvoicedetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoicedetailEdge>>,
    Fragmentable {
  node: <T = ChongduOrderinvoicedetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetRecommendSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPetRecommend;
  updatedFields: String[];
  previousValues: ChongduPetRecommendPreviousValues;
}

export interface ChongduPetRecommendSubscriptionPayloadPromise
  extends Promise<ChongduPetRecommendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetRecommendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetRecommendPreviousValuesPromise>() => T;
}

export interface ChongduPetRecommendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetRecommendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetRecommendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPetRecommendPreviousValuesSubscription>() => T;
}

export interface ChongduOrderinvoicedetail {
  id: Int;
  audittime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  invoiceid?: Int;
  mt?: String;
  muserid?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  userid?: String;
}

export interface ChongduOrderinvoicedetailPromise
  extends Promise<ChongduOrderinvoicedetail>,
    Fragmentable {
  id: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  invoiceid: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduOrderinvoicedetailSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoicedetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audittime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  invoiceid: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderinvoicedetailNullablePromise
  extends Promise<ChongduOrderinvoicedetail | null>,
    Fragmentable {
  id: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  invoiceid: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduPetRecommendPreviousValues {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  endtime?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  pid?: Int;
  sort?: Int;
  starttime?: String;
  status?: Int;
  userid?: String;
  username?: String;
}

export interface ChongduPetRecommendPreviousValuesPromise
  extends Promise<ChongduPetRecommendPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduPetRecommendPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetRecommendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderinvoiceEdge {
  node: ChongduOrderinvoice;
  cursor: String;
}

export interface ChongduOrderinvoiceEdgePromise
  extends Promise<ChongduOrderinvoiceEdge>,
    Fragmentable {
  node: <T = ChongduOrderinvoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduOrderinvoiceEdgeSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoiceEdge>>,
    Fragmentable {
  node: <T = ChongduOrderinvoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduInformEdge {
  node: ChongduInform;
  cursor: String;
}

export interface ChongduInformEdgePromise
  extends Promise<ChongduInformEdge>,
    Fragmentable {
  node: <T = ChongduInformPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduInformEdgeSubscription
  extends Promise<AsyncIterator<ChongduInformEdge>>,
    Fragmentable {
  node: <T = ChongduInformSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAppointmentConnection {
  pageInfo: PageInfo;
  edges: ChongduAppointmentEdge[];
}

export interface ChongduAppointmentConnectionPromise
  extends Promise<ChongduAppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAppointmentEdge>>() => T;
  aggregate: <T = AggregateChongduAppointmentPromise>() => T;
}

export interface ChongduAppointmentConnectionSubscription
  extends Promise<AsyncIterator<ChongduAppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduAppointmentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduAppointmentSubscription>() => T;
}

export interface ChongduPetTypeSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPetType;
  updatedFields: String[];
  previousValues: ChongduPetTypePreviousValues;
}

export interface ChongduPetTypeSubscriptionPayloadPromise
  extends Promise<ChongduPetTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetTypePreviousValuesPromise>() => T;
}

export interface ChongduPetTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPetTypePreviousValuesSubscription>() => T;
}

export interface AggregateChongduOrderItem {
  count: Int;
}

export interface AggregateChongduOrderItemPromise
  extends Promise<AggregateChongduOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduOrderItemSubscription
  extends Promise<AsyncIterator<AggregateChongduOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetTypePreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  image?: String;
  level?: Int;
  name?: String;
  pid?: Int;
  ppid?: Int;
  sort?: Int;
}

export interface ChongduPetTypePreviousValuesPromise
  extends Promise<ChongduPetTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  image: () => Promise<String>;
  level: () => Promise<Int>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  ppid: () => Promise<Int>;
  sort: () => Promise<Int>;
}

export interface ChongduPetTypePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  ppid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderItemConnection {
  pageInfo: PageInfo;
  edges: ChongduOrderItemEdge[];
}

export interface ChongduOrderItemConnectionPromise
  extends Promise<ChongduOrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduOrderItemEdge>>() => T;
  aggregate: <T = AggregateChongduOrderItemPromise>() => T;
}

export interface ChongduOrderItemConnectionSubscription
  extends Promise<AsyncIterator<ChongduOrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduOrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduOrderItemSubscription>() => T;
}

export interface ChongduInformConnection {
  pageInfo: PageInfo;
  edges: ChongduInformEdge[];
}

export interface ChongduInformConnectionPromise
  extends Promise<ChongduInformConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduInformEdge>>() => T;
  aggregate: <T = AggregateChongduInformPromise>() => T;
}

export interface ChongduInformConnectionSubscription
  extends Promise<AsyncIterator<ChongduInformConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduInformEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduInformSubscription>() => T;
}

export interface ChongduOrderItem {
  id: Int;
  closeTime?: String;
  ct?: String;
  currentPrice?: Float;
  d?: Int;
  endTime?: String;
  image?: String;
  merchantId?: String;
  merOrderNo?: String;
  mt?: String;
  orderNo?: String;
  paymentTime?: String;
  paymentType?: Int;
  postage?: Float;
  productId?: String;
  productName?: String;
  quantity?: Int;
  remark?: String;
  reStatus?: Int;
  sendTime?: String;
  status?: Int;
  totalPrice?: Float;
  userId?: String;
}

export interface ChongduOrderItemPromise
  extends Promise<ChongduOrderItem>,
    Fragmentable {
  id: () => Promise<Int>;
  closeTime: () => Promise<String>;
  ct: () => Promise<String>;
  currentPrice: () => Promise<Float>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  image: () => Promise<String>;
  merchantId: () => Promise<String>;
  merOrderNo: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  paymentTime: () => Promise<String>;
  paymentType: () => Promise<Int>;
  postage: () => Promise<Float>;
  productId: () => Promise<String>;
  productName: () => Promise<String>;
  quantity: () => Promise<Int>;
  remark: () => Promise<String>;
  reStatus: () => Promise<Int>;
  sendTime: () => Promise<String>;
  status: () => Promise<Int>;
  totalPrice: () => Promise<Float>;
  userId: () => Promise<String>;
}

export interface ChongduOrderItemSubscription
  extends Promise<AsyncIterator<ChongduOrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  closeTime: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  currentPrice: () => Promise<AsyncIterator<Float>>;
  d: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  merOrderNo: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderNo: () => Promise<AsyncIterator<String>>;
  paymentTime: () => Promise<AsyncIterator<String>>;
  paymentType: () => Promise<AsyncIterator<Int>>;
  postage: () => Promise<AsyncIterator<Float>>;
  productId: () => Promise<AsyncIterator<String>>;
  productName: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  reStatus: () => Promise<AsyncIterator<Int>>;
  sendTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderItemNullablePromise
  extends Promise<ChongduOrderItem | null>,
    Fragmentable {
  id: () => Promise<Int>;
  closeTime: () => Promise<String>;
  ct: () => Promise<String>;
  currentPrice: () => Promise<Float>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  image: () => Promise<String>;
  merchantId: () => Promise<String>;
  merOrderNo: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  paymentTime: () => Promise<String>;
  paymentType: () => Promise<Int>;
  postage: () => Promise<Float>;
  productId: () => Promise<String>;
  productName: () => Promise<String>;
  quantity: () => Promise<Int>;
  remark: () => Promise<String>;
  reStatus: () => Promise<Int>;
  sendTime: () => Promise<String>;
  status: () => Promise<Int>;
  totalPrice: () => Promise<Float>;
  userId: () => Promise<String>;
}

export interface ChongduPetauthentLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPetauthentLog;
  updatedFields: String[];
  previousValues: ChongduPetauthentLogPreviousValues;
}

export interface ChongduPetauthentLogSubscriptionPayloadPromise
  extends Promise<ChongduPetauthentLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetauthentLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetauthentLogPreviousValuesPromise>() => T;
}

export interface ChongduPetauthentLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetauthentLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetauthentLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPetauthentLogPreviousValuesSubscription>() => T;
}

export interface ChongduOrderEdge {
  node: ChongduOrder;
  cursor: String;
}

export interface ChongduOrderEdgePromise
  extends Promise<ChongduOrderEdge>,
    Fragmentable {
  node: <T = ChongduOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduOrderEdgeSubscription
  extends Promise<AsyncIterator<ChongduOrderEdge>>,
    Fragmentable {
  node: <T = ChongduOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetauthentLogPreviousValues {
  id: Int;
  petauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduPetauthentLogPreviousValuesPromise
  extends Promise<ChongduPetauthentLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  petauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduPetauthentLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetauthentLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  petauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChongduCityEdge {
  node: ChongduCity;
  cursor: String;
}

export interface ChongduCityEdgePromise
  extends Promise<ChongduCityEdge>,
    Fragmentable {
  node: <T = ChongduCityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCityEdgeSubscription
  extends Promise<AsyncIterator<ChongduCityEdge>>,
    Fragmentable {
  node: <T = ChongduCitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldReplyPreviousValues {
  id: Int;
  commentId?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  praiseCount?: Int;
  replyuserId?: String;
  userId?: String;
}

export interface ChongduWorldReplyPreviousValuesPromise
  extends Promise<ChongduWorldReplyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  replyuserId: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduWorldReplyPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduWorldReplyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  commentId: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  replyuserId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetauthentdetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPetauthentdetail;
  updatedFields: String[];
  previousValues: ChongduPetauthentdetailPreviousValues;
}

export interface ChongduPetauthentdetailSubscriptionPayloadPromise
  extends Promise<ChongduPetauthentdetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPetauthentdetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPetauthentdetailPreviousValuesPromise>() => T;
}

export interface ChongduPetauthentdetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPetauthentdetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPetauthentdetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduPetauthentdetailPreviousValuesSubscription
  >() => T;
}

export interface ChongduWorldLikeConnection {
  pageInfo: PageInfo;
  edges: ChongduWorldLikeEdge[];
}

export interface ChongduWorldLikeConnectionPromise
  extends Promise<ChongduWorldLikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduWorldLikeEdge>>() => T;
  aggregate: <T = AggregateChongduWorldLikePromise>() => T;
}

export interface ChongduWorldLikeConnectionSubscription
  extends Promise<AsyncIterator<ChongduWorldLikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduWorldLikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduWorldLikeSubscription>() => T;
}

export interface ChongduPetauthentdetailPreviousValues {
  id: Int;
  audit?: Int;
  authtime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  mt?: String;
  muserid?: String;
  sort?: Int;
  status?: Int;
  title?: String;
}

export interface ChongduPetauthentdetailPreviousValuesPromise
  extends Promise<ChongduPetauthentdetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  authtime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
}

export interface ChongduPetauthentdetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPetauthentdetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audit: () => Promise<AsyncIterator<Int>>;
  authtime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldJoinConnection {
  pageInfo: PageInfo;
  edges: ChongduWorldJoinEdge[];
}

export interface ChongduWorldJoinConnectionPromise
  extends Promise<ChongduWorldJoinConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduWorldJoinEdge>>() => T;
  aggregate: <T = AggregateChongduWorldJoinPromise>() => T;
}

export interface ChongduWorldJoinConnectionSubscription
  extends Promise<AsyncIterator<ChongduWorldJoinConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduWorldJoinEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduWorldJoinSubscription>() => T;
}

export interface ChongduInform {
  id: Int;
  type?: Int;
  relatedType?: Int;
  relatedId?: Int;
  description?: String;
  image?: String;
  status?: Int;
  disposeAt?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduInformPromise
  extends Promise<ChongduInform>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<Int>;
  relatedType: () => Promise<Int>;
  relatedId: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  userId: <T = ChongduUserPromise>() => T;
  status: () => Promise<Int>;
  disposeBy: <T = ChongduAdminPromise>() => T;
  disposeAt: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduInformSubscription
  extends Promise<AsyncIterator<ChongduInform>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  relatedType: () => Promise<AsyncIterator<Int>>;
  relatedId: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  userId: <T = ChongduUserSubscription>() => T;
  status: () => Promise<AsyncIterator<Int>>;
  disposeBy: <T = ChongduAdminSubscription>() => T;
  disposeAt: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduInformNullablePromise
  extends Promise<ChongduInform | null>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<Int>;
  relatedType: () => Promise<Int>;
  relatedId: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  userId: <T = ChongduUserPromise>() => T;
  status: () => Promise<Int>;
  disposeBy: <T = ChongduAdminPromise>() => T;
  disposeAt: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduWorldCommentEdge {
  node: ChongduWorldComment;
  cursor: String;
}

export interface ChongduWorldCommentEdgePromise
  extends Promise<ChongduWorldCommentEdge>,
    Fragmentable {
  node: <T = ChongduWorldCommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduWorldCommentEdgeSubscription
  extends Promise<AsyncIterator<ChongduWorldCommentEdge>>,
    Fragmentable {
  node: <T = ChongduWorldCommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPlatformBusinessSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPlatformBusiness;
  updatedFields: String[];
  previousValues: ChongduPlatformBusinessPreviousValues;
}

export interface ChongduPlatformBusinessSubscriptionPayloadPromise
  extends Promise<ChongduPlatformBusinessSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPlatformBusinessPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPlatformBusinessPreviousValuesPromise>() => T;
}

export interface ChongduPlatformBusinessSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPlatformBusinessSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPlatformBusinessSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduPlatformBusinessPreviousValuesSubscription
  >() => T;
}

export interface AggregateChongduWorld {
  count: Int;
}

export interface AggregateChongduWorldPromise
  extends Promise<AggregateChongduWorld>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduWorldSubscription
  extends Promise<AsyncIterator<AggregateChongduWorld>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPlatformBusinessPreviousValues {
  id: Int;
  content?: String;
  ct?: String;
  currency?: Float;
  cuserId?: String;
  d?: Int;
  length?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  price?: Float;
  rNum?: Int;
  sort?: Int;
  status?: Int;
  timestep?: Int;
  type?: Int;
}

export interface ChongduPlatformBusinessPreviousValuesPromise
  extends Promise<ChongduPlatformBusinessPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  currency: () => Promise<Float>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  length: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  rNum: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  timestep: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduPlatformBusinessPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPlatformBusinessPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<Float>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  length: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  rNum: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  timestep: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorld {
  id: Int;
  activityName?: String;
  commentStatus?: Int;
  ct?: String;
  d?: Int;
  description?: String;
  gif?: String;
  height?: Float;
  image?: String;
  joinCount?: Int;
  latitude?: String;
  longitude?: String;
  praiseCount?: Int;
  shareCount?: Int;
  type?: Int;
  video?: String;
  viewCount?: Int;
  width?: Float;
}

export interface ChongduWorldPromise
  extends Promise<ChongduWorld>,
    Fragmentable {
  id: () => Promise<Int>;
  activityName: () => Promise<String>;
  commentStatus: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  gif: () => Promise<String>;
  height: () => Promise<Float>;
  image: () => Promise<String>;
  joinCount: () => Promise<Int>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  praiseCount: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
  video: () => Promise<String>;
  viewCount: () => Promise<Int>;
  width: () => Promise<Float>;
}

export interface ChongduWorldSubscription
  extends Promise<AsyncIterator<ChongduWorld>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activityName: () => Promise<AsyncIterator<String>>;
  commentStatus: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  gif: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<Float>>;
  image: () => Promise<AsyncIterator<String>>;
  joinCount: () => Promise<AsyncIterator<Int>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: <T = ChongduUserSubscription>() => T;
  video: () => Promise<AsyncIterator<String>>;
  viewCount: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Float>>;
}

export interface ChongduWorldNullablePromise
  extends Promise<ChongduWorld | null>,
    Fragmentable {
  id: () => Promise<Int>;
  activityName: () => Promise<String>;
  commentStatus: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  gif: () => Promise<String>;
  height: () => Promise<Float>;
  image: () => Promise<String>;
  joinCount: () => Promise<Int>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  praiseCount: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
  video: () => Promise<String>;
  viewCount: () => Promise<Int>;
  width: () => Promise<Float>;
}

export interface AggregateChongduFocusing {
  count: Int;
}

export interface AggregateChongduFocusingPromise
  extends Promise<AggregateChongduFocusing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduFocusingSubscription
  extends Promise<AsyncIterator<AggregateChongduFocusing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAccountEdge {
  node: ChongduAccount;
  cursor: String;
}

export interface ChongduAccountEdgePromise
  extends Promise<ChongduAccountEdge>,
    Fragmentable {
  node: <T = ChongduAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAccountEdgeSubscription
  extends Promise<AsyncIterator<ChongduAccountEdge>>,
    Fragmentable {
  node: <T = ChongduAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPlatformExecuteSubscriptionPayload {
  mutation: MutationType;
  node: ChongduPlatformExecute;
  updatedFields: String[];
  previousValues: ChongduPlatformExecutePreviousValues;
}

export interface ChongduPlatformExecuteSubscriptionPayloadPromise
  extends Promise<ChongduPlatformExecuteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduPlatformExecutePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduPlatformExecutePreviousValuesPromise>() => T;
}

export interface ChongduPlatformExecuteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduPlatformExecuteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduPlatformExecuteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduPlatformExecutePreviousValuesSubscription>() => T;
}

export interface ChongduVersionConnection {
  pageInfo: PageInfo;
  edges: ChongduVersionEdge[];
}

export interface ChongduVersionConnectionPromise
  extends Promise<ChongduVersionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduVersionEdge>>() => T;
  aggregate: <T = AggregateChongduVersionPromise>() => T;
}

export interface ChongduVersionConnectionSubscription
  extends Promise<AsyncIterator<ChongduVersionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduVersionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduVersionSubscription>() => T;
}

export interface ChongduPlatformExecutePreviousValues {
  id: Int;
  business?: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  endtime?: String;
  money?: Float;
  mt?: String;
  muserId?: String;
  oneprice?: Float;
  relateId?: Int;
  relateType?: Int;
  residue?: Int;
  sort?: Int;
  starttime?: String;
  status?: Int;
  timestep?: String;
  type?: Int;
  userarea?: String;
  userId?: String;
  username?: String;
}

export interface ChongduPlatformExecutePreviousValuesPromise
  extends Promise<ChongduPlatformExecutePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  business: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  endtime: () => Promise<String>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  oneprice: () => Promise<Float>;
  relateId: () => Promise<Int>;
  relateType: () => Promise<Int>;
  residue: () => Promise<Int>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  timestep: () => Promise<String>;
  type: () => Promise<Int>;
  userarea: () => Promise<String>;
  userId: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduPlatformExecutePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduPlatformExecutePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  business: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  money: () => Promise<AsyncIterator<Float>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  oneprice: () => Promise<AsyncIterator<Float>>;
  relateId: () => Promise<AsyncIterator<Int>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  residue: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  timestep: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userarea: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduValidateEdge {
  node: ChongduValidate;
  cursor: String;
}

export interface ChongduValidateEdgePromise
  extends Promise<ChongduValidateEdge>,
    Fragmentable {
  node: <T = ChongduValidatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduValidateEdgeSubscription
  extends Promise<AsyncIterator<ChongduValidateEdge>>,
    Fragmentable {
  node: <T = ChongduValidateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduFocusingEdge {
  node: ChongduFocusing;
  cursor: String;
}

export interface ChongduFocusingEdgePromise
  extends Promise<ChongduFocusingEdge>,
    Fragmentable {
  node: <T = ChongduFocusingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduFocusingEdgeSubscription
  extends Promise<AsyncIterator<ChongduFocusingEdge>>,
    Fragmentable {
  node: <T = ChongduFocusingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduVaccineBrandEdge {
  node: ChongduVaccineBrand;
  cursor: String;
}

export interface ChongduVaccineBrandEdgePromise
  extends Promise<ChongduVaccineBrandEdge>,
    Fragmentable {
  node: <T = ChongduVaccineBrandPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduVaccineBrandEdgeSubscription
  extends Promise<AsyncIterator<ChongduVaccineBrandEdge>>,
    Fragmentable {
  node: <T = ChongduVaccineBrandSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProduct;
  updatedFields: String[];
  previousValues: ChongduProductPreviousValues;
}

export interface ChongduProductSubscriptionPayloadPromise
  extends Promise<ChongduProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductPreviousValuesPromise>() => T;
}

export interface ChongduProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduProductPreviousValuesSubscription>() => T;
}

export interface AggregateChongduVaccine {
  count: Int;
}

export interface AggregateChongduVaccinePromise
  extends Promise<AggregateChongduVaccine>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduVaccineSubscription
  extends Promise<AsyncIterator<AggregateChongduVaccine>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductPreviousValues {
  id: ID_Output;
  browser?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  mt?: String;
  name?: String;
  price?: Float;
  promotionPrice?: Float;
  sale?: Int;
  shareCount?: Int;
  status?: Int;
  stock?: Int;
  title?: String;
  userId?: String;
}

export interface ChongduProductPreviousValuesPromise
  extends Promise<ChongduProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  browser: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  promotionPrice: () => Promise<Float>;
  sale: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  status: () => Promise<Int>;
  stock: () => Promise<Int>;
  title: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  browser: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  promotionPrice: () => Promise<AsyncIterator<Float>>;
  sale: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  stock: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduUserstatistic {
  count: Int;
}

export interface AggregateChongduUserstatisticPromise
  extends Promise<AggregateChongduUserstatistic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserstatisticSubscription
  extends Promise<AsyncIterator<AggregateChongduUserstatistic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduFocusingConnection {
  pageInfo: PageInfo;
  edges: ChongduFocusingEdge[];
}

export interface ChongduFocusingConnectionPromise
  extends Promise<ChongduFocusingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduFocusingEdge>>() => T;
  aggregate: <T = AggregateChongduFocusingPromise>() => T;
}

export interface ChongduFocusingConnectionSubscription
  extends Promise<AsyncIterator<ChongduFocusingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduFocusingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduFocusingSubscription>() => T;
}

export interface ChongduUserstatistic {
  id: Int;
  count?: Int;
  ct?: String;
  d?: Int;
  day?: Int;
  hour?: Int;
  month?: Int;
  mt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  year?: Int;
}

export interface ChongduUserstatisticPromise
  extends Promise<ChongduUserstatistic>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduUserstatisticSubscription
  extends Promise<AsyncIterator<ChongduUserstatistic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserstatisticNullablePromise
  extends Promise<ChongduUserstatistic | null>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduProductAuthentdetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductAuthentdetail;
  updatedFields: String[];
  previousValues: ChongduProductAuthentdetailPreviousValues;
}

export interface ChongduProductAuthentdetailSubscriptionPayloadPromise
  extends Promise<ChongduProductAuthentdetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductAuthentdetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductAuthentdetailPreviousValuesPromise>() => T;
}

export interface ChongduProductAuthentdetailSubscriptionPayloadSubscription
  extends Promise<
      AsyncIterator<ChongduProductAuthentdetailSubscriptionPayload>
    >,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductAuthentdetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduProductAuthentdetailPreviousValuesSubscription
  >() => T;
}

export interface ChongduAddressEdge {
  node: ChongduAddress;
  cursor: String;
}

export interface ChongduAddressEdgePromise
  extends Promise<ChongduAddressEdge>,
    Fragmentable {
  node: <T = ChongduAddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAddressEdgeSubscription
  extends Promise<AsyncIterator<ChongduAddressEdge>>,
    Fragmentable {
  node: <T = ChongduAddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductAuthentdetailPreviousValues {
  id: Int;
  audit?: Int;
  audittime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  mt?: String;
  muserid?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
}

export interface ChongduProductAuthentdetailPreviousValuesPromise
  extends Promise<ChongduProductAuthentdetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
}

export interface ChongduProductAuthentdetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductAuthentdetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audit: () => Promise<AsyncIterator<Int>>;
  audittime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserbindConnection {
  pageInfo: PageInfo;
  edges: ChongduUserbindEdge[];
}

export interface ChongduUserbindConnectionPromise
  extends Promise<ChongduUserbindConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserbindEdge>>() => T;
  aggregate: <T = AggregateChongduUserbindPromise>() => T;
}

export interface ChongduUserbindConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserbindConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduUserbindEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduUserbindSubscription>() => T;
}

export interface AggregateChongduCity {
  count: Int;
}

export interface AggregateChongduCityPromise
  extends Promise<AggregateChongduCity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCitySubscription
  extends Promise<AsyncIterator<AggregateChongduCity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserauthentLogEdge {
  node: ChongduUserauthentLog;
  cursor: String;
}

export interface ChongduUserauthentLogEdgePromise
  extends Promise<ChongduUserauthentLogEdge>,
    Fragmentable {
  node: <T = ChongduUserauthentLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserauthentLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserauthentLogEdge>>,
    Fragmentable {
  node: <T = ChongduUserauthentLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductBrandSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductBrand;
  updatedFields: String[];
  previousValues: ChongduProductBrandPreviousValues;
}

export interface ChongduProductBrandSubscriptionPayloadPromise
  extends Promise<ChongduProductBrandSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductBrandPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductBrandPreviousValuesPromise>() => T;
}

export interface ChongduProductBrandSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductBrandSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductBrandSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduProductBrandPreviousValuesSubscription>() => T;
}

export interface ChongduUserauthentEdge {
  node: ChongduUserauthent;
  cursor: String;
}

export interface ChongduUserauthentEdgePromise
  extends Promise<ChongduUserauthentEdge>,
    Fragmentable {
  node: <T = ChongduUserauthentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserauthentEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserauthentEdge>>,
    Fragmentable {
  node: <T = ChongduUserauthentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductBrandPreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  firstLetter?: String;
  logoImg?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  status?: Int;
  type?: Int;
}

export interface ChongduProductBrandPreviousValuesPromise
  extends Promise<ChongduProductBrandPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  firstLetter: () => Promise<String>;
  logoImg: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduProductBrandPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductBrandPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  firstLetter: () => Promise<AsyncIterator<String>>;
  logoImg: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduUserFavourite {
  count: Int;
}

export interface AggregateChongduUserFavouritePromise
  extends Promise<AggregateChongduUserFavourite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserFavouriteSubscription
  extends Promise<AsyncIterator<AggregateChongduUserFavourite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduFocusing {
  id: Int;
  ct?: String;
  d?: Int;
  fUserId?: String;
  status?: Int;
  userId?: String;
}

export interface ChongduFocusingPromise
  extends Promise<ChongduFocusing>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  fUserId: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduFocusingSubscription
  extends Promise<AsyncIterator<ChongduFocusing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  fUserId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduFocusingNullablePromise
  extends Promise<ChongduFocusing | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  fUserId: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface AggregateChongduUser {
  count: Int;
}

export interface AggregateChongduUserPromise
  extends Promise<AggregateChongduUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserSubscription
  extends Promise<AsyncIterator<AggregateChongduUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductImgSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductImg;
  updatedFields: String[];
  previousValues: ChongduProductImgPreviousValues;
}

export interface ChongduProductImgSubscriptionPayloadPromise
  extends Promise<ChongduProductImgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductImgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductImgPreviousValuesPromise>() => T;
}

export interface ChongduProductImgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductImgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductImgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduProductImgPreviousValuesSubscription>() => T;
}

export interface AggregateChongduTradingArea {
  count: Int;
}

export interface AggregateChongduTradingAreaPromise
  extends Promise<AggregateChongduTradingArea>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduTradingAreaSubscription
  extends Promise<AsyncIterator<AggregateChongduTradingArea>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductImgPreviousValues {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  mt?: String;
  productId?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduProductImgPreviousValuesPromise
  extends Promise<ChongduProductImgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  productId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduProductImgPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductImgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTradingArea {
  id: Int;
  pCityCode?: Int;
  cityCode?: String;
  cityName?: String;
  tradingAreaName?: String;
  latitude?: String;
  longitude?: String;
  distance?: Float;
  cuserId?: String;
  muserId?: String;
  ct?: String;
  mt?: String;
}

export interface ChongduTradingAreaPromise
  extends Promise<ChongduTradingArea>,
    Fragmentable {
  id: () => Promise<Int>;
  pCityCode: () => Promise<Int>;
  cityCode: () => Promise<String>;
  cityName: () => Promise<String>;
  tradingAreaName: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  distance: () => Promise<Float>;
  cuserId: () => Promise<String>;
  muserId: () => Promise<String>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
}

export interface ChongduTradingAreaSubscription
  extends Promise<AsyncIterator<ChongduTradingArea>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  pCityCode: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  cityName: () => Promise<AsyncIterator<String>>;
  tradingAreaName: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  distance: () => Promise<AsyncIterator<Float>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTradingAreaNullablePromise
  extends Promise<ChongduTradingArea | null>,
    Fragmentable {
  id: () => Promise<Int>;
  pCityCode: () => Promise<Int>;
  cityCode: () => Promise<String>;
  cityName: () => Promise<String>;
  tradingAreaName: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  distance: () => Promise<Float>;
  cuserId: () => Promise<String>;
  muserId: () => Promise<String>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
}

export interface AggregateChongduFilemanage {
  count: Int;
}

export interface AggregateChongduFilemanagePromise
  extends Promise<AggregateChongduFilemanage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduFilemanageSubscription
  extends Promise<AsyncIterator<AggregateChongduFilemanage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduAddressRelation {
  count: Int;
}

export interface AggregateChongduAddressRelationPromise
  extends Promise<AggregateChongduAddressRelation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduAddressRelationSubscription
  extends Promise<AsyncIterator<AggregateChongduAddressRelation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductPettypeSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductPettype;
  updatedFields: String[];
  previousValues: ChongduProductPettypePreviousValues;
}

export interface ChongduProductPettypeSubscriptionPayloadPromise
  extends Promise<ChongduProductPettypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductPettypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductPettypePreviousValuesPromise>() => T;
}

export interface ChongduProductPettypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductPettypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductPettypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduProductPettypePreviousValuesSubscription>() => T;
}

export interface ChongduTagConnection {
  pageInfo: PageInfo;
  edges: ChongduTagEdge[];
}

export interface ChongduTagConnectionPromise
  extends Promise<ChongduTagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduTagEdge>>() => T;
  aggregate: <T = AggregateChongduTagPromise>() => T;
}

export interface ChongduTagConnectionSubscription
  extends Promise<AsyncIterator<ChongduTagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduTagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduTagSubscription>() => T;
}

export interface ChongduProductPettypePreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  level?: Int;
  petTypeId?: Int;
  petTypeName?: String;
  productId?: String;
}

export interface ChongduProductPettypePreviousValuesPromise
  extends Promise<ChongduProductPettypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  level: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  petTypeName: () => Promise<String>;
  productId: () => Promise<String>;
}

export interface ChongduProductPettypePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductPettypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  petTypeId: () => Promise<AsyncIterator<Int>>;
  petTypeName: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduStatConnection {
  pageInfo: PageInfo;
  edges: ChongduStatEdge[];
}

export interface ChongduStatConnectionPromise
  extends Promise<ChongduStatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduStatEdge>>() => T;
  aggregate: <T = AggregateChongduStatPromise>() => T;
}

export interface ChongduStatConnectionSubscription
  extends Promise<AsyncIterator<ChongduStatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduStatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduStatSubscription>() => T;
}

export interface ChongduFilemanageEdge {
  node: ChongduFilemanage;
  cursor: String;
}

export interface ChongduFilemanageEdgePromise
  extends Promise<ChongduFilemanageEdge>,
    Fragmentable {
  node: <T = ChongduFilemanagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduFilemanageEdgeSubscription
  extends Promise<AsyncIterator<ChongduFilemanageEdge>>,
    Fragmentable {
  node: <T = ChongduFilemanageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceauthentLogEdge {
  node: ChongduServiceauthentLog;
  cursor: String;
}

export interface ChongduServiceauthentLogEdgePromise
  extends Promise<ChongduServiceauthentLogEdge>,
    Fragmentable {
  node: <T = ChongduServiceauthentLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServiceauthentLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduServiceauthentLogEdge>>,
    Fragmentable {
  node: <T = ChongduServiceauthentLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductRecommendSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductRecommend;
  updatedFields: String[];
  previousValues: ChongduProductRecommendPreviousValues;
}

export interface ChongduProductRecommendSubscriptionPayloadPromise
  extends Promise<ChongduProductRecommendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductRecommendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductRecommendPreviousValuesPromise>() => T;
}

export interface ChongduProductRecommendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductRecommendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductRecommendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduProductRecommendPreviousValuesSubscription
  >() => T;
}

export interface AggregateChongduServiceType {
  count: Int;
}

export interface AggregateChongduServiceTypePromise
  extends Promise<AggregateChongduServiceType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServiceTypeSubscription
  extends Promise<AsyncIterator<AggregateChongduServiceType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductRecommendPreviousValues {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  endtime?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  productId?: String;
  sort?: Int;
  starttime?: String;
  status?: Int;
  userid?: String;
  username?: String;
}

export interface ChongduProductRecommendPreviousValuesPromise
  extends Promise<ChongduProductRecommendPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  productId: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduProductRecommendPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductRecommendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduServiceRecommend {
  count: Int;
}

export interface AggregateChongduServiceRecommendPromise
  extends Promise<AggregateChongduServiceRecommend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServiceRecommendSubscription
  extends Promise<AsyncIterator<AggregateChongduServiceRecommend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduFilemanageConnection {
  pageInfo: PageInfo;
  edges: ChongduFilemanageEdge[];
}

export interface ChongduFilemanageConnectionPromise
  extends Promise<ChongduFilemanageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduFilemanageEdge>>() => T;
  aggregate: <T = AggregateChongduFilemanagePromise>() => T;
}

export interface ChongduFilemanageConnectionSubscription
  extends Promise<AsyncIterator<ChongduFilemanageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduFilemanageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduFilemanageSubscription>() => T;
}

export interface AggregateChongduServicePettype {
  count: Int;
}

export interface AggregateChongduServicePettypePromise
  extends Promise<AggregateChongduServicePettype>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServicePettypeSubscription
  extends Promise<AsyncIterator<AggregateChongduServicePettype>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductSkuSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductSku;
  updatedFields: String[];
  previousValues: ChongduProductSkuPreviousValues;
}

export interface ChongduProductSkuSubscriptionPayloadPromise
  extends Promise<ChongduProductSkuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductSkuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductSkuPreviousValuesPromise>() => T;
}

export interface ChongduProductSkuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductSkuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductSkuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduProductSkuPreviousValuesSubscription>() => T;
}

export interface AggregateChongduServiceImg {
  count: Int;
}

export interface AggregateChongduServiceImgPromise
  extends Promise<AggregateChongduServiceImg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServiceImgSubscription
  extends Promise<AsyncIterator<AggregateChongduServiceImg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductSkuPreviousValues {
  id: Int;
  attribute?: String;
  d?: Int;
  lockStock?: Int;
  lowStock?: Int;
  num?: Int;
  price?: Float;
  productId?: String;
  salesVolume?: Int;
  skuCode?: String;
  status?: Int;
}

export interface ChongduProductSkuPreviousValuesPromise
  extends Promise<ChongduProductSkuPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  attribute: () => Promise<String>;
  d: () => Promise<Int>;
  lockStock: () => Promise<Int>;
  lowStock: () => Promise<Int>;
  num: () => Promise<Int>;
  price: () => Promise<Float>;
  productId: () => Promise<String>;
  salesVolume: () => Promise<Int>;
  skuCode: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduProductSkuPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductSkuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  attribute: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  lockStock: () => Promise<AsyncIterator<Int>>;
  lowStock: () => Promise<AsyncIterator<Int>>;
  num: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  productId: () => Promise<AsyncIterator<String>>;
  salesVolume: () => Promise<AsyncIterator<Int>>;
  skuCode: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceImg {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  mt?: String;
  serviceId?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduServiceImgPromise
  extends Promise<ChongduServiceImg>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  serviceId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduServiceImgSubscription
  extends Promise<AsyncIterator<ChongduServiceImg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceImgNullablePromise
  extends Promise<ChongduServiceImg | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  serviceId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduFilemanage {
  id: Int;
  ct?: String;
  customtype?: Int;
  d?: Int;
  filename?: String;
  mt?: String;
  path?: String;
  pid?: String;
  sort?: Int;
  status?: Int;
  tablename?: String;
  type?: Int;
  userid?: String;
}

export interface ChongduFilemanagePromise
  extends Promise<ChongduFilemanage>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  customtype: () => Promise<Int>;
  d: () => Promise<Int>;
  filename: () => Promise<String>;
  mt: () => Promise<String>;
  path: () => Promise<String>;
  pid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tablename: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduFilemanageSubscription
  extends Promise<AsyncIterator<ChongduFilemanage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  customtype: () => Promise<AsyncIterator<Int>>;
  d: () => Promise<AsyncIterator<Int>>;
  filename: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  path: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tablename: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduFilemanageNullablePromise
  extends Promise<ChongduFilemanage | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  customtype: () => Promise<Int>;
  d: () => Promise<Int>;
  filename: () => Promise<String>;
  mt: () => Promise<String>;
  path: () => Promise<String>;
  pid: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tablename: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduAdminEdge {
  node: ChongduAdmin;
  cursor: String;
}

export interface ChongduAdminEdgePromise
  extends Promise<ChongduAdminEdge>,
    Fragmentable {
  node: <T = ChongduAdminPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAdminEdgeSubscription
  extends Promise<AsyncIterator<ChongduAdminEdge>>,
    Fragmentable {
  node: <T = ChongduAdminSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductTypeSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductType;
  updatedFields: String[];
  previousValues: ChongduProductTypePreviousValues;
}

export interface ChongduProductTypeSubscriptionPayloadPromise
  extends Promise<ChongduProductTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductTypePreviousValuesPromise>() => T;
}

export interface ChongduProductTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduProductTypePreviousValuesSubscription>() => T;
}

export interface ChongduServiceConnection {
  pageInfo: PageInfo;
  edges: ChongduServiceEdge[];
}

export interface ChongduServiceConnectionPromise
  extends Promise<ChongduServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServiceEdge>>() => T;
  aggregate: <T = AggregateChongduServicePromise>() => T;
}

export interface ChongduServiceConnectionSubscription
  extends Promise<AsyncIterator<ChongduServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduServiceSubscription>() => T;
}

export interface ChongduProductTypePreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  img?: String;
  level?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  pettypeId?: String;
  pid?: Int;
  sort?: Int;
  status?: Int;
}

export interface ChongduProductTypePreviousValuesPromise
  extends Promise<ChongduProductTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  level: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  pettypeId: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduProductTypePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  img: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pettypeId: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduSearchthink {
  count: Int;
}

export interface AggregateChongduSearchthinkPromise
  extends Promise<AggregateChongduSearchthink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduSearchthinkSubscription
  extends Promise<AsyncIterator<AggregateChongduSearchthink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduDiscuss {
  count: Int;
}

export interface AggregateChongduDiscussPromise
  extends Promise<AggregateChongduDiscuss>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduDiscussSubscription
  extends Promise<AsyncIterator<AggregateChongduDiscuss>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduRoleMenuChildren {
  count: Int;
}

export interface AggregateChongduRoleMenuChildrenPromise
  extends Promise<AggregateChongduRoleMenuChildren>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRoleMenuChildrenSubscription
  extends Promise<AsyncIterator<AggregateChongduRoleMenuChildren>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductauthentLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduProductauthentLog;
  updatedFields: String[];
  previousValues: ChongduProductauthentLogPreviousValues;
}

export interface ChongduProductauthentLogSubscriptionPayloadPromise
  extends Promise<ChongduProductauthentLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduProductauthentLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduProductauthentLogPreviousValuesPromise>() => T;
}

export interface ChongduProductauthentLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduProductauthentLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduProductauthentLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduProductauthentLogPreviousValuesSubscription
  >() => T;
}

export interface ChongduRoleMenuChildren {
  id: Int;
  action?: String;
  authName?: String;
  menuUrlName?: String;
}

export interface ChongduRoleMenuChildrenPromise
  extends Promise<ChongduRoleMenuChildren>,
    Fragmentable {
  id: () => Promise<Int>;
  menuId: <T = ChongduRoleMenuPromise>() => T;
  action: () => Promise<String>;
  authName: () => Promise<String>;
  menuUrlName: () => Promise<String>;
}

export interface ChongduRoleMenuChildrenSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuChildren>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  menuId: <T = ChongduRoleMenuSubscription>() => T;
  action: () => Promise<AsyncIterator<String>>;
  authName: () => Promise<AsyncIterator<String>>;
  menuUrlName: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleMenuChildrenNullablePromise
  extends Promise<ChongduRoleMenuChildren | null>,
    Fragmentable {
  id: () => Promise<Int>;
  menuId: <T = ChongduRoleMenuPromise>() => T;
  action: () => Promise<String>;
  authName: () => Promise<String>;
  menuUrlName: () => Promise<String>;
}

export interface ChongduProductauthentLogPreviousValues {
  id: Int;
  productauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduProductauthentLogPreviousValuesPromise
  extends Promise<ChongduProductauthentLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  productauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduProductauthentLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduProductauthentLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  productauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleMenu {
  id: Int;
  menuName?: String;
  menuUrl?: String;
  menuChildrenId?: String;
}

export interface ChongduRoleMenuPromise
  extends Promise<ChongduRoleMenu>,
    Fragmentable {
  id: () => Promise<Int>;
  menuName: () => Promise<String>;
  menuUrl: () => Promise<String>;
  menuChildrenId: () => Promise<String>;
  roleGroupId: <T = ChongduRoleGroupPromise>() => T;
}

export interface ChongduRoleMenuSubscription
  extends Promise<AsyncIterator<ChongduRoleMenu>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  menuName: () => Promise<AsyncIterator<String>>;
  menuUrl: () => Promise<AsyncIterator<String>>;
  menuChildrenId: () => Promise<AsyncIterator<String>>;
  roleGroupId: <T = ChongduRoleGroupSubscription>() => T;
}

export interface ChongduRoleMenuNullablePromise
  extends Promise<ChongduRoleMenu | null>,
    Fragmentable {
  id: () => Promise<Int>;
  menuName: () => Promise<String>;
  menuUrl: () => Promise<String>;
  menuChildrenId: () => Promise<String>;
  roleGroupId: <T = ChongduRoleGroupPromise>() => T;
}

export interface ChongduDiscussEdge {
  node: ChongduDiscuss;
  cursor: String;
}

export interface ChongduDiscussEdgePromise
  extends Promise<ChongduDiscussEdge>,
    Fragmentable {
  node: <T = ChongduDiscussPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduDiscussEdgeSubscription
  extends Promise<AsyncIterator<ChongduDiscussEdge>>,
    Fragmentable {
  node: <T = ChongduDiscussSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAdminRoleConnection {
  pageInfo: PageInfo;
  edges: ChongduAdminRoleEdge[];
}

export interface ChongduAdminRoleConnectionPromise
  extends Promise<ChongduAdminRoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAdminRoleEdge>>() => T;
  aggregate: <T = AggregateChongduAdminRolePromise>() => T;
}

export interface ChongduAdminRoleConnectionSubscription
  extends Promise<AsyncIterator<ChongduAdminRoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAdminRoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAdminRoleSubscription>() => T;
}

export interface ChongduRecommendSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRecommend;
  updatedFields: String[];
  previousValues: ChongduRecommendPreviousValues;
}

export interface ChongduRecommendSubscriptionPayloadPromise
  extends Promise<ChongduRecommendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRecommendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRecommendPreviousValuesPromise>() => T;
}

export interface ChongduRecommendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRecommendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRecommendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRecommendPreviousValuesSubscription>() => T;
}

export interface ChongduAdminRoleEdge {
  node: ChongduAdminRole;
  cursor: String;
}

export interface ChongduAdminRoleEdgePromise
  extends Promise<ChongduAdminRoleEdge>,
    Fragmentable {
  node: <T = ChongduAdminRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAdminRoleEdgeSubscription
  extends Promise<AsyncIterator<ChongduAdminRoleEdge>>,
    Fragmentable {
  node: <T = ChongduAdminRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRecommendPreviousValues {
  id: Int;
  cityCode?: String;
  ct?: String;
  d?: Int;
  deviceId?: String;
  deviceName?: String;
  deviceType?: Int;
  endTime?: String;
  mt?: String;
  name?: String;
  relateId?: String;
  relateType?: Int;
  sort?: Int;
  startTime?: String;
  status?: Int;
  type?: Int;
  userName?: String;
}

export interface ChongduRecommendPreviousValuesPromise
  extends Promise<ChongduRecommendPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  cityCode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  deviceId: () => Promise<String>;
  deviceName: () => Promise<String>;
  deviceType: () => Promise<Int>;
  endTime: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  sort: () => Promise<Int>;
  startTime: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userName: () => Promise<String>;
}

export interface ChongduRecommendPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRecommendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceId: () => Promise<AsyncIterator<String>>;
  deviceName: () => Promise<AsyncIterator<String>>;
  deviceType: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  relateId: () => Promise<AsyncIterator<String>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  startTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userName: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleAuthConnection {
  pageInfo: PageInfo;
  edges: ChongduRoleAuthEdge[];
}

export interface ChongduRoleAuthConnectionPromise
  extends Promise<ChongduRoleAuthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRoleAuthEdge>>() => T;
  aggregate: <T = AggregateChongduRoleAuthPromise>() => T;
}

export interface ChongduRoleAuthConnectionSubscription
  extends Promise<AsyncIterator<ChongduRoleAuthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRoleAuthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRoleAuthSubscription>() => T;
}

export interface ChongduDiscussConnection {
  pageInfo: PageInfo;
  edges: ChongduDiscussEdge[];
}

export interface ChongduDiscussConnectionPromise
  extends Promise<ChongduDiscussConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduDiscussEdge>>() => T;
  aggregate: <T = AggregateChongduDiscussPromise>() => T;
}

export interface ChongduDiscussConnectionSubscription
  extends Promise<AsyncIterator<ChongduDiscussConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduDiscussEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduDiscussSubscription>() => T;
}

export interface ChongduRoleEdge {
  node: ChongduRole;
  cursor: String;
}

export interface ChongduRoleEdgePromise
  extends Promise<ChongduRoleEdge>,
    Fragmentable {
  node: <T = ChongduRolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRoleEdgeSubscription
  extends Promise<AsyncIterator<ChongduRoleEdge>>,
    Fragmentable {
  node: <T = ChongduRoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRefreshSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRefresh;
  updatedFields: String[];
  previousValues: ChongduRefreshPreviousValues;
}

export interface ChongduRefreshSubscriptionPayloadPromise
  extends Promise<ChongduRefreshSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRefreshPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRefreshPreviousValuesPromise>() => T;
}

export interface ChongduRefreshSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRefreshSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRefreshSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRefreshPreviousValuesSubscription>() => T;
}

export interface ChongduRepellentEdge {
  node: ChongduRepellent;
  cursor: String;
}

export interface ChongduRepellentEdgePromise
  extends Promise<ChongduRepellentEdge>,
    Fragmentable {
  node: <T = ChongduRepellentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRepellentEdgeSubscription
  extends Promise<AsyncIterator<ChongduRepellentEdge>>,
    Fragmentable {
  node: <T = ChongduRepellentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRefreshPreviousValues {
  id: Int;
  businessId?: Int;
  ct?: String;
  petId?: String;
  productId?: String;
  refreshType?: Int;
  serviceId?: Int;
  type?: Int;
}

export interface ChongduRefreshPreviousValuesPromise
  extends Promise<ChongduRefreshPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  businessId: () => Promise<Int>;
  ct: () => Promise<String>;
  petId: () => Promise<String>;
  productId: () => Promise<String>;
  refreshType: () => Promise<Int>;
  serviceId: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduRefreshPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRefreshPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  businessId: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  refreshType: () => Promise<AsyncIterator<Int>>;
  serviceId: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduRefresh {
  count: Int;
}

export interface AggregateChongduRefreshPromise
  extends Promise<AggregateChongduRefresh>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRefreshSubscription
  extends Promise<AsyncIterator<AggregateChongduRefresh>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduComment {
  id: Int;
  anonymity?: Int;
  brower?: Int;
  commentType?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  isAdd?: Int;
  likedNum?: Int;
  productId?: String;
  replyNum?: Int;
  serviceId?: String;
  shareNum?: Int;
  starNum?: Float;
  userId?: String;
  video?: String;
  orderSn?: String;
}

export interface ChongduCommentPromise
  extends Promise<ChongduComment>,
    Fragmentable {
  id: () => Promise<Int>;
  anonymity: () => Promise<Int>;
  brower: () => Promise<Int>;
  commentType: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  isAdd: () => Promise<Int>;
  likedNum: () => Promise<Int>;
  productId: () => Promise<String>;
  replyNum: () => Promise<Int>;
  serviceId: () => Promise<String>;
  shareNum: () => Promise<Int>;
  starNum: () => Promise<Float>;
  userId: () => Promise<String>;
  video: () => Promise<String>;
  orderSn: () => Promise<String>;
}

export interface ChongduCommentSubscription
  extends Promise<AsyncIterator<ChongduComment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  anonymity: () => Promise<AsyncIterator<Int>>;
  brower: () => Promise<AsyncIterator<Int>>;
  commentType: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  isAdd: () => Promise<AsyncIterator<Int>>;
  likedNum: () => Promise<AsyncIterator<Int>>;
  productId: () => Promise<AsyncIterator<String>>;
  replyNum: () => Promise<AsyncIterator<Int>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  shareNum: () => Promise<AsyncIterator<Int>>;
  starNum: () => Promise<AsyncIterator<Float>>;
  userId: () => Promise<AsyncIterator<String>>;
  video: () => Promise<AsyncIterator<String>>;
  orderSn: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentNullablePromise
  extends Promise<ChongduComment | null>,
    Fragmentable {
  id: () => Promise<Int>;
  anonymity: () => Promise<Int>;
  brower: () => Promise<Int>;
  commentType: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  isAdd: () => Promise<Int>;
  likedNum: () => Promise<Int>;
  productId: () => Promise<String>;
  replyNum: () => Promise<Int>;
  serviceId: () => Promise<String>;
  shareNum: () => Promise<Int>;
  starNum: () => Promise<Float>;
  userId: () => Promise<String>;
  video: () => Promise<String>;
  orderSn: () => Promise<String>;
}

export interface AggregateChongduRecommend {
  count: Int;
}

export interface AggregateChongduRecommendPromise
  extends Promise<AggregateChongduRecommend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRecommendSubscription
  extends Promise<AsyncIterator<AggregateChongduRecommend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRepellentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRepellent;
  updatedFields: String[];
  previousValues: ChongduRepellentPreviousValues;
}

export interface ChongduRepellentSubscriptionPayloadPromise
  extends Promise<ChongduRepellentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRepellentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRepellentPreviousValuesPromise>() => T;
}

export interface ChongduRepellentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRepellentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRepellentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRepellentPreviousValuesSubscription>() => T;
}

export interface ChongduRecommend {
  id: Int;
  cityCode?: String;
  ct?: String;
  d?: Int;
  deviceId?: String;
  deviceName?: String;
  deviceType?: Int;
  endTime?: String;
  mt?: String;
  name?: String;
  relateId?: String;
  relateType?: Int;
  sort?: Int;
  startTime?: String;
  status?: Int;
  type?: Int;
  userName?: String;
}

export interface ChongduRecommendPromise
  extends Promise<ChongduRecommend>,
    Fragmentable {
  id: () => Promise<Int>;
  cityCode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: <T = ChongduAdminPromise>() => T;
  d: () => Promise<Int>;
  deviceId: () => Promise<String>;
  deviceName: () => Promise<String>;
  deviceType: () => Promise<Int>;
  endTime: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: <T = ChongduAdminPromise>() => T;
  name: () => Promise<String>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  sort: () => Promise<Int>;
  startTime: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
  userName: () => Promise<String>;
}

export interface ChongduRecommendSubscription
  extends Promise<AsyncIterator<ChongduRecommend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: <T = ChongduAdminSubscription>() => T;
  d: () => Promise<AsyncIterator<Int>>;
  deviceId: () => Promise<AsyncIterator<String>>;
  deviceName: () => Promise<AsyncIterator<String>>;
  deviceType: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: <T = ChongduAdminSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  relateId: () => Promise<AsyncIterator<String>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  startTime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: <T = ChongduUserSubscription>() => T;
  userName: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRecommendNullablePromise
  extends Promise<ChongduRecommend | null>,
    Fragmentable {
  id: () => Promise<Int>;
  cityCode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: <T = ChongduAdminPromise>() => T;
  d: () => Promise<Int>;
  deviceId: () => Promise<String>;
  deviceName: () => Promise<String>;
  deviceType: () => Promise<Int>;
  endTime: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: <T = ChongduAdminPromise>() => T;
  name: () => Promise<String>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  sort: () => Promise<Int>;
  startTime: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
  userName: () => Promise<String>;
}

export interface ChongduRepellentPreviousValues {
  id: Int;
  brandId?: Int;
  cityCode?: String;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  indexNum?: Int;
  mt?: String;
  petId?: String;
  status?: Int;
  street?: String;
  time?: String;
  userId?: String;
}

export interface ChongduRepellentPreviousValuesPromise
  extends Promise<ChongduRepellentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  brandId: () => Promise<Int>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  indexNum: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  street: () => Promise<String>;
  time: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduRepellentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRepellentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  brandId: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  indexNum: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  street: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAdvertisementEdge {
  node: ChongduAdvertisement;
  cursor: String;
}

export interface ChongduAdvertisementEdgePromise
  extends Promise<ChongduAdvertisementEdge>,
    Fragmentable {
  node: <T = ChongduAdvertisementPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAdvertisementEdgeSubscription
  extends Promise<AsyncIterator<ChongduAdvertisementEdge>>,
    Fragmentable {
  node: <T = ChongduAdvertisementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduDiscuss {
  id: Int;
  content?: String;
  ct?: String;
  d?: Int;
  pSComId?: Int;
  replyType?: Int;
  userId?: String;
}

export interface ChongduDiscussPromise
  extends Promise<ChongduDiscuss>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  pSComId: () => Promise<Int>;
  replyType: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduDiscussSubscription
  extends Promise<AsyncIterator<ChongduDiscuss>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  pSComId: () => Promise<AsyncIterator<Int>>;
  replyType: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduDiscussNullablePromise
  extends Promise<ChongduDiscuss | null>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  pSComId: () => Promise<Int>;
  replyType: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduProductTypeConnection {
  pageInfo: PageInfo;
  edges: ChongduProductTypeEdge[];
}

export interface ChongduProductTypeConnectionPromise
  extends Promise<ChongduProductTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductTypeEdge>>() => T;
  aggregate: <T = AggregateChongduProductTypePromise>() => T;
}

export interface ChongduProductTypeConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduProductTypeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduProductTypeSubscription>() => T;
}

export interface ChongduRoleSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRole;
  updatedFields: String[];
  previousValues: ChongduRolePreviousValues;
}

export interface ChongduRoleSubscriptionPayloadPromise
  extends Promise<ChongduRoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRolePreviousValuesPromise>() => T;
}

export interface ChongduRoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRolePreviousValuesSubscription>() => T;
}

export interface ChongduProductSkuConnection {
  pageInfo: PageInfo;
  edges: ChongduProductSkuEdge[];
}

export interface ChongduProductSkuConnectionPromise
  extends Promise<ChongduProductSkuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductSkuEdge>>() => T;
  aggregate: <T = AggregateChongduProductSkuPromise>() => T;
}

export interface ChongduProductSkuConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductSkuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduProductSkuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduProductSkuSubscription>() => T;
}

export interface ChongduRolePreviousValues {
  id: ID_Output;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  status?: Int;
}

export interface ChongduRolePreviousValuesPromise
  extends Promise<ChongduRolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduRolePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductRecommendConnection {
  pageInfo: PageInfo;
  edges: ChongduProductRecommendEdge[];
}

export interface ChongduProductRecommendConnectionPromise
  extends Promise<ChongduProductRecommendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductRecommendEdge>>() => T;
  aggregate: <T = AggregateChongduProductRecommendPromise>() => T;
}

export interface ChongduProductRecommendConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductRecommendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduProductRecommendEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduProductRecommendSubscription>() => T;
}

export interface AggregateChongduDataVersion {
  count: Int;
}

export interface AggregateChongduDataVersionPromise
  extends Promise<AggregateChongduDataVersion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduDataVersionSubscription
  extends Promise<AsyncIterator<AggregateChongduDataVersion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductPettypeEdge {
  node: ChongduProductPettype;
  cursor: String;
}

export interface ChongduProductPettypeEdgePromise
  extends Promise<ChongduProductPettypeEdge>,
    Fragmentable {
  node: <T = ChongduProductPettypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductPettypeEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductPettypeEdge>>,
    Fragmentable {
  node: <T = ChongduProductPettypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleAuthSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRoleAuth;
  updatedFields: String[];
  previousValues: ChongduRoleAuthPreviousValues;
}

export interface ChongduRoleAuthSubscriptionPayloadPromise
  extends Promise<ChongduRoleAuthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRoleAuthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRoleAuthPreviousValuesPromise>() => T;
}

export interface ChongduRoleAuthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRoleAuthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRoleAuthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRoleAuthPreviousValuesSubscription>() => T;
}

export interface ChongduProductImgEdge {
  node: ChongduProductImg;
  cursor: String;
}

export interface ChongduProductImgEdgePromise
  extends Promise<ChongduProductImgEdge>,
    Fragmentable {
  node: <T = ChongduProductImgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductImgEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductImgEdge>>,
    Fragmentable {
  node: <T = ChongduProductImgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleAuthPreviousValues {
  id: Int;
  userId?: String;
  action?: String;
  method?: String;
  operationName?: String;
}

export interface ChongduRoleAuthPreviousValuesPromise
  extends Promise<ChongduRoleAuthPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  userId: () => Promise<String>;
  action: () => Promise<String>;
  method: () => Promise<String>;
  operationName: () => Promise<String>;
}

export interface ChongduRoleAuthPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRoleAuthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  action: () => Promise<AsyncIterator<String>>;
  method: () => Promise<AsyncIterator<String>>;
  operationName: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduProductBrand {
  count: Int;
}

export interface AggregateChongduProductBrandPromise
  extends Promise<AggregateChongduProductBrand>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductBrandSubscription
  extends Promise<AsyncIterator<AggregateChongduProductBrand>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduDataVersionEdge {
  node: ChongduDataVersion;
  cursor: String;
}

export interface ChongduDataVersionEdgePromise
  extends Promise<ChongduDataVersionEdge>,
    Fragmentable {
  node: <T = ChongduDataVersionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduDataVersionEdgeSubscription
  extends Promise<AsyncIterator<ChongduDataVersionEdge>>,
    Fragmentable {
  node: <T = ChongduDataVersionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduProductAuthentdetail {
  count: Int;
}

export interface AggregateChongduProductAuthentdetailPromise
  extends Promise<AggregateChongduProductAuthentdetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductAuthentdetailSubscription
  extends Promise<AsyncIterator<AggregateChongduProductAuthentdetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleDetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRoleDetail;
  updatedFields: String[];
  previousValues: ChongduRoleDetailPreviousValues;
}

export interface ChongduRoleDetailSubscriptionPayloadPromise
  extends Promise<ChongduRoleDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRoleDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRoleDetailPreviousValuesPromise>() => T;
}

export interface ChongduRoleDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRoleDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRoleDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRoleDetailPreviousValuesSubscription>() => T;
}

export interface ChongduProductAuthentdetail {
  id: Int;
  audit?: Int;
  audittime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  mt?: String;
  muserid?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
}

export interface ChongduProductAuthentdetailPromise
  extends Promise<ChongduProductAuthentdetail>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  productId: <T = ChongduProductPromise>() => T;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: <T = ChongduUserPromise>() => T;
}

export interface ChongduProductAuthentdetailSubscription
  extends Promise<AsyncIterator<ChongduProductAuthentdetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audit: () => Promise<AsyncIterator<Int>>;
  audittime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  productId: <T = ChongduProductSubscription>() => T;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: <T = ChongduUserSubscription>() => T;
}

export interface ChongduProductAuthentdetailNullablePromise
  extends Promise<ChongduProductAuthentdetail | null>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  productId: <T = ChongduProductPromise>() => T;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: <T = ChongduUserPromise>() => T;
}

export interface ChongduRoleDetailPreviousValues {
  id: ID_Output;
  ct?: String;
  cuserId?: String;
  d?: Int;
  modeldetailId?: String;
  mt?: String;
  muserId?: String;
  roleId?: String;
  status?: Int;
}

export interface ChongduRoleDetailPreviousValuesPromise
  extends Promise<ChongduRoleDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  modeldetailId: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  roleId: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduRoleDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRoleDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  modeldetailId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  roleId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductType {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  img?: String;
  level?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  pettypeId?: String;
  pid?: Int;
  sort?: Int;
  status?: Int;
}

export interface ChongduProductTypePromise
  extends Promise<ChongduProductType>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  level: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  pettypeId: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduProductTypeSubscription
  extends Promise<AsyncIterator<ChongduProductType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  img: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pettypeId: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduProductTypeNullablePromise
  extends Promise<ChongduProductType | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  level: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  pettypeId: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduDataVersionConnection {
  pageInfo: PageInfo;
  edges: ChongduDataVersionEdge[];
}

export interface ChongduDataVersionConnectionPromise
  extends Promise<ChongduDataVersionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduDataVersionEdge>>() => T;
  aggregate: <T = AggregateChongduDataVersionPromise>() => T;
}

export interface ChongduDataVersionConnectionSubscription
  extends Promise<AsyncIterator<ChongduDataVersionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduDataVersionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduDataVersionSubscription>() => T;
}

export interface ChongduPlatformExecuteEdge {
  node: ChongduPlatformExecute;
  cursor: String;
}

export interface ChongduPlatformExecuteEdgePromise
  extends Promise<ChongduPlatformExecuteEdge>,
    Fragmentable {
  node: <T = ChongduPlatformExecutePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPlatformExecuteEdgeSubscription
  extends Promise<AsyncIterator<ChongduPlatformExecuteEdge>>,
    Fragmentable {
  node: <T = ChongduPlatformExecuteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleGroupSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRoleGroup;
  updatedFields: String[];
  previousValues: ChongduRoleGroupPreviousValues;
}

export interface ChongduRoleGroupSubscriptionPayloadPromise
  extends Promise<ChongduRoleGroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRoleGroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRoleGroupPreviousValuesPromise>() => T;
}

export interface ChongduRoleGroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRoleGroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRoleGroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRoleGroupPreviousValuesSubscription>() => T;
}

export interface AggregateChongduPlatformBusiness {
  count: Int;
}

export interface AggregateChongduPlatformBusinessPromise
  extends Promise<AggregateChongduPlatformBusiness>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPlatformBusinessSubscription
  extends Promise<AsyncIterator<AggregateChongduPlatformBusiness>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleGroupPreviousValues {
  id: Int;
  userId?: String;
  roleName?: String;
  cuserId?: String;
  muserId?: String;
}

export interface ChongduRoleGroupPreviousValuesPromise
  extends Promise<ChongduRoleGroupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  userId: () => Promise<String>;
  roleName: () => Promise<String>;
  cuserId: () => Promise<String>;
  muserId: () => Promise<String>;
}

export interface ChongduRoleGroupPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRoleGroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  roleName: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPetauthentdetail {
  count: Int;
}

export interface AggregateChongduPetauthentdetailPromise
  extends Promise<AggregateChongduPetauthentdetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetauthentdetailSubscription
  extends Promise<AsyncIterator<AggregateChongduPetauthentdetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduDataVersion {
  id: Int;
  ip?: String;
  mac?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  type?: Int;
  versionCode?: String;
}

export interface ChongduDataVersionPromise
  extends Promise<ChongduDataVersion>,
    Fragmentable {
  id: () => Promise<Int>;
  ip: () => Promise<String>;
  mac: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  type: () => Promise<Int>;
  versionCode: () => Promise<String>;
}

export interface ChongduDataVersionSubscription
  extends Promise<AsyncIterator<ChongduDataVersion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mac: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  versionCode: () => Promise<AsyncIterator<String>>;
}

export interface ChongduDataVersionNullablePromise
  extends Promise<ChongduDataVersion | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ip: () => Promise<String>;
  mac: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  type: () => Promise<Int>;
  versionCode: () => Promise<String>;
}

export interface ChongduPetauthentdetail {
  id: Int;
  audit?: Int;
  authtime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  mt?: String;
  muserid?: String;
  sort?: Int;
  status?: Int;
  title?: String;
}

export interface ChongduPetauthentdetailPromise
  extends Promise<ChongduPetauthentdetail>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  authtime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  petid: <T = ChongduPetPromise>() => T;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  userid: <T = ChongduUserPromise>() => T;
}

export interface ChongduPetauthentdetailSubscription
  extends Promise<AsyncIterator<ChongduPetauthentdetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audit: () => Promise<AsyncIterator<Int>>;
  authtime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  petid: <T = ChongduPetSubscription>() => T;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  userid: <T = ChongduUserSubscription>() => T;
}

export interface ChongduPetauthentdetailNullablePromise
  extends Promise<ChongduPetauthentdetail | null>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  authtime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  petid: <T = ChongduPetPromise>() => T;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  userid: <T = ChongduUserPromise>() => T;
}

export interface ChongduRoleMenuSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRoleMenu;
  updatedFields: String[];
  previousValues: ChongduRoleMenuPreviousValues;
}

export interface ChongduRoleMenuSubscriptionPayloadPromise
  extends Promise<ChongduRoleMenuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRoleMenuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRoleMenuPreviousValuesPromise>() => T;
}

export interface ChongduRoleMenuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRoleMenuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduRoleMenuPreviousValuesSubscription>() => T;
}

export interface ChongduAgentEdge {
  node: ChongduAgent;
  cursor: String;
}

export interface ChongduAgentEdgePromise
  extends Promise<ChongduAgentEdge>,
    Fragmentable {
  node: <T = ChongduAgentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAgentEdgeSubscription
  extends Promise<AsyncIterator<ChongduAgentEdge>>,
    Fragmentable {
  node: <T = ChongduAgentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleMenuPreviousValues {
  id: Int;
  menuName?: String;
  menuUrl?: String;
  menuChildrenId?: String;
}

export interface ChongduRoleMenuPreviousValuesPromise
  extends Promise<ChongduRoleMenuPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  menuName: () => Promise<String>;
  menuUrl: () => Promise<String>;
  menuChildrenId: () => Promise<String>;
}

export interface ChongduRoleMenuPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  menuName: () => Promise<AsyncIterator<String>>;
  menuUrl: () => Promise<AsyncIterator<String>>;
  menuChildrenId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetTypeConnection {
  pageInfo: PageInfo;
  edges: ChongduPetTypeEdge[];
}

export interface ChongduPetTypeConnectionPromise
  extends Promise<ChongduPetTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetTypeEdge>>() => T;
  aggregate: <T = AggregateChongduPetTypePromise>() => T;
}

export interface ChongduPetTypeConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduPetTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduPetTypeSubscription>() => T;
}

export interface AggregateChongduCorrelation {
  count: Int;
}

export interface AggregateChongduCorrelationPromise
  extends Promise<AggregateChongduCorrelation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCorrelationSubscription
  extends Promise<AsyncIterator<AggregateChongduCorrelation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetRecommendConnection {
  pageInfo: PageInfo;
  edges: ChongduPetRecommendEdge[];
}

export interface ChongduPetRecommendConnectionPromise
  extends Promise<ChongduPetRecommendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetRecommendEdge>>() => T;
  aggregate: <T = AggregateChongduPetRecommendPromise>() => T;
}

export interface ChongduPetRecommendConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetRecommendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduPetRecommendEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduPetRecommendSubscription>() => T;
}

export interface ChongduRoleMenuChildrenSubscriptionPayload {
  mutation: MutationType;
  node: ChongduRoleMenuChildren;
  updatedFields: String[];
  previousValues: ChongduRoleMenuChildrenPreviousValues;
}

export interface ChongduRoleMenuChildrenSubscriptionPayloadPromise
  extends Promise<ChongduRoleMenuChildrenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduRoleMenuChildrenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduRoleMenuChildrenPreviousValuesPromise>() => T;
}

export interface ChongduRoleMenuChildrenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuChildrenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduRoleMenuChildrenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduRoleMenuChildrenPreviousValuesSubscription
  >() => T;
}

export interface ChongduPetImgConnection {
  pageInfo: PageInfo;
  edges: ChongduPetImgEdge[];
}

export interface ChongduPetImgConnectionPromise
  extends Promise<ChongduPetImgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetImgEdge>>() => T;
  aggregate: <T = AggregateChongduPetImgPromise>() => T;
}

export interface ChongduPetImgConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetImgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduPetImgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduPetImgSubscription>() => T;
}

export interface ChongduRoleMenuChildrenPreviousValues {
  id: Int;
  action?: String;
  authName?: String;
  menuUrlName?: String;
}

export interface ChongduRoleMenuChildrenPreviousValuesPromise
  extends Promise<ChongduRoleMenuChildrenPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  action: () => Promise<String>;
  authName: () => Promise<String>;
  menuUrlName: () => Promise<String>;
}

export interface ChongduRoleMenuChildrenPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuChildrenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  action: () => Promise<AsyncIterator<String>>;
  authName: () => Promise<AsyncIterator<String>>;
  menuUrlName: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetCardEdge {
  node: ChongduPetCard;
  cursor: String;
}

export interface ChongduPetCardEdgePromise
  extends Promise<ChongduPetCardEdge>,
    Fragmentable {
  node: <T = ChongduPetCardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetCardEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetCardEdge>>,
    Fragmentable {
  node: <T = ChongduPetCardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCorrelationEdge {
  node: ChongduCorrelation;
  cursor: String;
}

export interface ChongduCorrelationEdgePromise
  extends Promise<ChongduCorrelationEdge>,
    Fragmentable {
  node: <T = ChongduCorrelationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCorrelationEdgeSubscription
  extends Promise<AsyncIterator<ChongduCorrelationEdge>>,
    Fragmentable {
  node: <T = ChongduCorrelationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetEdge {
  node: ChongduPet;
  cursor: String;
}

export interface ChongduPetEdgePromise
  extends Promise<ChongduPetEdge>,
    Fragmentable {
  node: <T = ChongduPetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetEdge>>,
    Fragmentable {
  node: <T = ChongduPetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduSearchthinkSubscriptionPayload {
  mutation: MutationType;
  node: ChongduSearchthink;
  updatedFields: String[];
  previousValues: ChongduSearchthinkPreviousValues;
}

export interface ChongduSearchthinkSubscriptionPayloadPromise
  extends Promise<ChongduSearchthinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduSearchthinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduSearchthinkPreviousValuesPromise>() => T;
}

export interface ChongduSearchthinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduSearchthinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduSearchthinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduSearchthinkPreviousValuesSubscription>() => T;
}

export interface ChongduPet {
  id: ID_Output;
  addressId?: Int;
  birthday?: String;
  browser?: Int;
  citycode?: String;
  code?: String;
  color?: String;
  content?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  isMeet?: Int;
  level?: Int;
  merchantId?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  price?: Float;
  pType?: Int;
  sex?: Int;
  shareCount?: Int;
  status?: Int;
  title?: String;
}

export interface ChongduPetPromise extends Promise<ChongduPet>, Fragmentable {
  id: () => Promise<ID_Output>;
  addressId: () => Promise<Int>;
  birthday: () => Promise<String>;
  browser: () => Promise<Int>;
  citycode: () => Promise<String>;
  code: () => Promise<String>;
  color: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  isMeet: () => Promise<Int>;
  level: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  pType: () => Promise<Int>;
  sex: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  typeId: <T = ChongduPetTypePromise>() => T;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduPetSubscription
  extends Promise<AsyncIterator<ChongduPet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addressId: () => Promise<AsyncIterator<Int>>;
  birthday: () => Promise<AsyncIterator<String>>;
  browser: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  isMeet: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  pType: () => Promise<AsyncIterator<Int>>;
  sex: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  typeId: <T = ChongduPetTypeSubscription>() => T;
  userId: <T = ChongduUserSubscription>() => T;
}

export interface ChongduPetNullablePromise
  extends Promise<ChongduPet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addressId: () => Promise<Int>;
  birthday: () => Promise<String>;
  browser: () => Promise<Int>;
  citycode: () => Promise<String>;
  code: () => Promise<String>;
  color: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  isMeet: () => Promise<Int>;
  level: () => Promise<Int>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  pType: () => Promise<Int>;
  sex: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  typeId: <T = ChongduPetTypePromise>() => T;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduSearchthinkPreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  hot?: Int;
  mt?: String;
  name?: String;
  sort?: Int;
  status?: Int;
}

export interface ChongduSearchthinkPreviousValuesPromise
  extends Promise<ChongduSearchthinkPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  hot: () => Promise<Int>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduSearchthinkPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduSearchthinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  hot: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAppVersionEdge {
  node: ChongduAppVersion;
  cursor: String;
}

export interface ChongduAppVersionEdgePromise
  extends Promise<ChongduAppVersionEdge>,
    Fragmentable {
  node: <T = ChongduAppVersionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAppVersionEdgeSubscription
  extends Promise<AsyncIterator<ChongduAppVersionEdge>>,
    Fragmentable {
  node: <T = ChongduAppVersionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCorrelationConnection {
  pageInfo: PageInfo;
  edges: ChongduCorrelationEdge[];
}

export interface ChongduCorrelationConnectionPromise
  extends Promise<ChongduCorrelationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCorrelationEdge>>() => T;
  aggregate: <T = AggregateChongduCorrelationPromise>() => T;
}

export interface ChongduCorrelationConnectionSubscription
  extends Promise<AsyncIterator<ChongduCorrelationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCorrelationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCorrelationSubscription>() => T;
}

export interface ChongduPayInfoConnection {
  pageInfo: PageInfo;
  edges: ChongduPayInfoEdge[];
}

export interface ChongduPayInfoConnectionPromise
  extends Promise<ChongduPayInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPayInfoEdge>>() => T;
  aggregate: <T = AggregateChongduPayInfoPromise>() => T;
}

export interface ChongduPayInfoConnectionSubscription
  extends Promise<AsyncIterator<ChongduPayInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduPayInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduPayInfoSubscription>() => T;
}

export interface ChongduServiceSubscriptionPayload {
  mutation: MutationType;
  node: ChongduService;
  updatedFields: String[];
  previousValues: ChongduServicePreviousValues;
}

export interface ChongduServiceSubscriptionPayloadPromise
  extends Promise<ChongduServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServicePreviousValuesPromise>() => T;
}

export interface ChongduServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduServicePreviousValuesSubscription>() => T;
}

export interface ChongduOrderstatisticEdge {
  node: ChongduOrderstatistic;
  cursor: String;
}

export interface ChongduOrderstatisticEdgePromise
  extends Promise<ChongduOrderstatisticEdge>,
    Fragmentable {
  node: <T = ChongduOrderstatisticPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduOrderstatisticEdgeSubscription
  extends Promise<AsyncIterator<ChongduOrderstatisticEdge>>,
    Fragmentable {
  node: <T = ChongduOrderstatisticSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServicePreviousValues {
  id: ID_Output;
  area?: String;
  browser?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  endtime?: String;
  icon?: String;
  mt?: String;
  name?: String;
  price?: Float;
  sale?: Int;
  shareCount?: Int;
  starttime?: String;
  status?: Int;
  title?: String;
}

export interface ChongduServicePreviousValuesPromise
  extends Promise<ChongduServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  area: () => Promise<String>;
  browser: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endtime: () => Promise<String>;
  icon: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  sale: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
}

export interface ChongduServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  area: () => Promise<AsyncIterator<String>>;
  browser: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  sale: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderserialEdge {
  node: ChongduOrderserial;
  cursor: String;
}

export interface ChongduOrderserialEdgePromise
  extends Promise<ChongduOrderserialEdge>,
    Fragmentable {
  node: <T = ChongduOrderserialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduOrderserialEdgeSubscription
  extends Promise<AsyncIterator<ChongduOrderserialEdge>>,
    Fragmentable {
  node: <T = ChongduOrderserialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentConnection {
  pageInfo: PageInfo;
  edges: ChongduCommentEdge[];
}

export interface ChongduCommentConnectionPromise
  extends Promise<ChongduCommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCommentEdge>>() => T;
  aggregate: <T = AggregateChongduCommentPromise>() => T;
}

export interface ChongduCommentConnectionSubscription
  extends Promise<AsyncIterator<ChongduCommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduCommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduCommentSubscription>() => T;
}

export interface AggregateChongduOrderinvoicedetail {
  count: Int;
}

export interface AggregateChongduOrderinvoicedetailPromise
  extends Promise<AggregateChongduOrderinvoicedetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduOrderinvoicedetailSubscription
  extends Promise<AsyncIterator<AggregateChongduOrderinvoicedetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceAuthentdetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduServiceAuthentdetail;
  updatedFields: String[];
  previousValues: ChongduServiceAuthentdetailPreviousValues;
}

export interface ChongduServiceAuthentdetailSubscriptionPayloadPromise
  extends Promise<ChongduServiceAuthentdetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServiceAuthentdetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServiceAuthentdetailPreviousValuesPromise>() => T;
}

export interface ChongduServiceAuthentdetailSubscriptionPayloadSubscription
  extends Promise<
      AsyncIterator<ChongduServiceAuthentdetailSubscriptionPayload>
    >,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServiceAuthentdetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduServiceAuthentdetailPreviousValuesSubscription
  >() => T;
}

export interface AggregateChongduOrderinvoice {
  count: Int;
}

export interface AggregateChongduOrderinvoicePromise
  extends Promise<AggregateChongduOrderinvoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduOrderinvoiceSubscription
  extends Promise<AsyncIterator<AggregateChongduOrderinvoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceAuthentdetailPreviousValues {
  id: Int;
  audit?: Int;
  audittime?: String;
  content?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  mt?: String;
  muserid?: String;
  serviceId?: String;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  userid?: String;
}

export interface ChongduServiceAuthentdetailPreviousValuesPromise
  extends Promise<ChongduServiceAuthentdetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  audit: () => Promise<Int>;
  audittime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
}

export interface ChongduServiceAuthentdetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServiceAuthentdetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audit: () => Promise<AsyncIterator<Int>>;
  audittime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderinvoice {
  id: Int;
  accountnum?: String;
  addressid?: Int;
  ct?: String;
  cuserid?: String;
  d?: Int;
  head?: String;
  invoicename?: String;
  money?: Float;
  mt?: String;
  muserid?: String;
  name?: String;
  nature?: Int;
  orderid?: String;
  phone?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  userid?: String;
  username?: String;
  usernum?: String;
}

export interface ChongduOrderinvoicePromise
  extends Promise<ChongduOrderinvoice>,
    Fragmentable {
  id: () => Promise<Int>;
  accountnum: () => Promise<String>;
  addressid: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  head: () => Promise<String>;
  invoicename: () => Promise<String>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  nature: () => Promise<Int>;
  orderid: () => Promise<String>;
  phone: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
  usernum: () => Promise<String>;
}

export interface ChongduOrderinvoiceSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  accountnum: () => Promise<AsyncIterator<String>>;
  addressid: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  head: () => Promise<AsyncIterator<String>>;
  invoicename: () => Promise<AsyncIterator<String>>;
  money: () => Promise<AsyncIterator<Float>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nature: () => Promise<AsyncIterator<Int>>;
  orderid: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  usernum: () => Promise<AsyncIterator<String>>;
}

export interface ChongduOrderinvoiceNullablePromise
  extends Promise<ChongduOrderinvoice | null>,
    Fragmentable {
  id: () => Promise<Int>;
  accountnum: () => Promise<String>;
  addressid: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  head: () => Promise<String>;
  invoicename: () => Promise<String>;
  money: () => Promise<Float>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  nature: () => Promise<Int>;
  orderid: () => Promise<String>;
  phone: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
  usernum: () => Promise<String>;
}

export interface ChongduCorrelation {
  id: ID_Output;
  ct?: String;
  d?: Int;
  petLevelId?: Int;
  petTypeId?: Int;
  productId?: String;
  serviceId?: String;
  type?: Int;
}

export interface ChongduCorrelationPromise
  extends Promise<ChongduCorrelation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petLevelId: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  productId: () => Promise<String>;
  serviceId: () => Promise<String>;
  type: () => Promise<Int>;
}

export interface ChongduCorrelationSubscription
  extends Promise<AsyncIterator<ChongduCorrelation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  petLevelId: () => Promise<AsyncIterator<Int>>;
  petTypeId: () => Promise<AsyncIterator<Int>>;
  productId: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCorrelationNullablePromise
  extends Promise<ChongduCorrelation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petLevelId: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  productId: () => Promise<String>;
  serviceId: () => Promise<String>;
  type: () => Promise<Int>;
}

export interface ChongduAppointmentEdge {
  node: ChongduAppointment;
  cursor: String;
}

export interface ChongduAppointmentEdgePromise
  extends Promise<ChongduAppointmentEdge>,
    Fragmentable {
  node: <T = ChongduAppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduAppointmentEdgeSubscription
  extends Promise<AsyncIterator<ChongduAppointmentEdge>>,
    Fragmentable {
  node: <T = ChongduAppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceImgSubscriptionPayload {
  mutation: MutationType;
  node: ChongduServiceImg;
  updatedFields: String[];
  previousValues: ChongduServiceImgPreviousValues;
}

export interface ChongduServiceImgSubscriptionPayloadPromise
  extends Promise<ChongduServiceImgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServiceImgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServiceImgPreviousValuesPromise>() => T;
}

export interface ChongduServiceImgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduServiceImgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServiceImgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduServiceImgPreviousValuesSubscription>() => T;
}

export interface ChongduOrderConnection {
  pageInfo: PageInfo;
  edges: ChongduOrderEdge[];
}

export interface ChongduOrderConnectionPromise
  extends Promise<ChongduOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduOrderEdge>>() => T;
  aggregate: <T = AggregateChongduOrderPromise>() => T;
}

export interface ChongduOrderConnectionSubscription
  extends Promise<AsyncIterator<ChongduOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduOrderSubscription>() => T;
}

export interface ChongduServiceImgPreviousValues {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  mt?: String;
  serviceId?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduServiceImgPreviousValuesPromise
  extends Promise<ChongduServiceImgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  serviceId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduServiceImgPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServiceImgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduWorldLike {
  count: Int;
}

export interface AggregateChongduWorldLikePromise
  extends Promise<AggregateChongduWorldLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduWorldLikeSubscription
  extends Promise<AsyncIterator<AggregateChongduWorldLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduCompanyrecommend {
  count: Int;
}

export interface AggregateChongduCompanyrecommendPromise
  extends Promise<AggregateChongduCompanyrecommend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCompanyrecommendSubscription
  extends Promise<AsyncIterator<AggregateChongduCompanyrecommend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldJoin {
  id: Int;
  ct?: String;
  d?: Int;
  type?: Int;
  userId?: String;
  worldId?: Int;
}

export interface ChongduWorldJoinPromise
  extends Promise<ChongduWorldJoin>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduWorldJoinSubscription
  extends Promise<AsyncIterator<ChongduWorldJoin>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldJoinNullablePromise
  extends Promise<ChongduWorldJoin | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduServicePettypeSubscriptionPayload {
  mutation: MutationType;
  node: ChongduServicePettype;
  updatedFields: String[];
  previousValues: ChongduServicePettypePreviousValues;
}

export interface ChongduServicePettypeSubscriptionPayloadPromise
  extends Promise<ChongduServicePettypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServicePettypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServicePettypePreviousValuesPromise>() => T;
}

export interface ChongduServicePettypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduServicePettypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServicePettypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduServicePettypePreviousValuesSubscription>() => T;
}

export interface ChongduWorldConnection {
  pageInfo: PageInfo;
  edges: ChongduWorldEdge[];
}

export interface ChongduWorldConnectionPromise
  extends Promise<ChongduWorldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduWorldEdge>>() => T;
  aggregate: <T = AggregateChongduWorldPromise>() => T;
}

export interface ChongduWorldConnectionSubscription
  extends Promise<AsyncIterator<ChongduWorldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduWorldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduWorldSubscription>() => T;
}

export interface ChongduServicePettypePreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  level?: Int;
  petTypeId?: Int;
  petTypeName?: String;
  serviceId?: String;
}

export interface ChongduServicePettypePreviousValuesPromise
  extends Promise<ChongduServicePettypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  level: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  petTypeName: () => Promise<String>;
  serviceId: () => Promise<String>;
}

export interface ChongduServicePettypePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServicePettypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  petTypeId: () => Promise<AsyncIterator<Int>>;
  petTypeName: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduVersion {
  count: Int;
}

export interface AggregateChongduVersionPromise
  extends Promise<AggregateChongduVersion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduVersionSubscription
  extends Promise<AsyncIterator<AggregateChongduVersion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCompanyrecommendEdge {
  node: ChongduCompanyrecommend;
  cursor: String;
}

export interface ChongduCompanyrecommendEdgePromise
  extends Promise<ChongduCompanyrecommendEdge>,
    Fragmentable {
  node: <T = ChongduCompanyrecommendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCompanyrecommendEdgeSubscription
  extends Promise<AsyncIterator<ChongduCompanyrecommendEdge>>,
    Fragmentable {
  node: <T = ChongduCompanyrecommendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduValidate {
  id: Int;
  code?: String;
  ct?: String;
  d?: Int;
  mt?: String;
  phone?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
}

export interface ChongduValidatePromise
  extends Promise<ChongduValidate>,
    Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  phone: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduValidateSubscription
  extends Promise<AsyncIterator<ChongduValidate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduValidateNullablePromise
  extends Promise<ChongduValidate | null>,
    Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  phone: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduServiceRecommendSubscriptionPayload {
  mutation: MutationType;
  node: ChongduServiceRecommend;
  updatedFields: String[];
  previousValues: ChongduServiceRecommendPreviousValues;
}

export interface ChongduServiceRecommendSubscriptionPayloadPromise
  extends Promise<ChongduServiceRecommendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServiceRecommendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServiceRecommendPreviousValuesPromise>() => T;
}

export interface ChongduServiceRecommendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduServiceRecommendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServiceRecommendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduServiceRecommendPreviousValuesSubscription
  >() => T;
}

export interface ChongduVaccineConnection {
  pageInfo: PageInfo;
  edges: ChongduVaccineEdge[];
}

export interface ChongduVaccineConnectionPromise
  extends Promise<ChongduVaccineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduVaccineEdge>>() => T;
  aggregate: <T = AggregateChongduVaccinePromise>() => T;
}

export interface ChongduVaccineConnectionSubscription
  extends Promise<AsyncIterator<ChongduVaccineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduVaccineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduVaccineSubscription>() => T;
}

export interface ChongduServiceRecommendPreviousValues {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  endtime?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  s?: Int;
  serviceId?: String;
  sort?: Int;
  starttime?: String;
  userid?: String;
  username?: String;
}

export interface ChongduServiceRecommendPreviousValuesPromise
  extends Promise<ChongduServiceRecommendPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  s: () => Promise<Int>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduServiceRecommendPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServiceRecommendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  s: () => Promise<AsyncIterator<Int>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserdetailEdge {
  node: ChongduUserdetail;
  cursor: String;
}

export interface ChongduUserdetailEdgePromise
  extends Promise<ChongduUserdetailEdge>,
    Fragmentable {
  node: <T = ChongduUserdetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduUserdetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduUserdetailEdge>>,
    Fragmentable {
  node: <T = ChongduUserdetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCompanyrecommendConnection {
  pageInfo: PageInfo;
  edges: ChongduCompanyrecommendEdge[];
}

export interface ChongduCompanyrecommendConnectionPromise
  extends Promise<ChongduCompanyrecommendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCompanyrecommendEdge>>() => T;
  aggregate: <T = AggregateChongduCompanyrecommendPromise>() => T;
}

export interface ChongduCompanyrecommendConnectionSubscription
  extends Promise<AsyncIterator<ChongduCompanyrecommendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCompanyrecommendEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCompanyrecommendSubscription>() => T;
}

export interface ChongduUserbind {
  id: Int;
  bindtime?: String;
  content?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mail?: String;
  mt?: String;
  muserId?: String;
  sort?: Int;
  status?: Int;
  tel?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduUserbindPromise
  extends Promise<ChongduUserbind>,
    Fragmentable {
  id: () => Promise<Int>;
  bindtime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserbindSubscription
  extends Promise<AsyncIterator<ChongduUserbind>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  bindtime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mail: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserbindNullablePromise
  extends Promise<ChongduUserbind | null>,
    Fragmentable {
  id: () => Promise<Int>;
  bindtime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduServiceTypeSubscriptionPayload {
  mutation: MutationType;
  node: ChongduServiceType;
  updatedFields: String[];
  previousValues: ChongduServiceTypePreviousValues;
}

export interface ChongduServiceTypeSubscriptionPayloadPromise
  extends Promise<ChongduServiceTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServiceTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServiceTypePreviousValuesPromise>() => T;
}

export interface ChongduServiceTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduServiceTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServiceTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduServiceTypePreviousValuesSubscription>() => T;
}

export interface ChongduAddressRelation {
  id: Int;
  city?: String;
  code?: String;
  country?: String;
  ct?: String;
  d?: Int;
  detailAdd?: String;
  mt?: String;
  name?: String;
  province?: String;
  region?: String;
  sort?: Int;
  status?: Int;
  tel?: String;
  userId?: String;
}

export interface ChongduAddressRelationPromise
  extends Promise<ChongduAddressRelation>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  country: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  detailAdd: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  province: () => Promise<String>;
  region: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduAddressRelationSubscription
  extends Promise<AsyncIterator<ChongduAddressRelation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  detailAdd: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAddressRelationNullablePromise
  extends Promise<ChongduAddressRelation | null>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  country: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  detailAdd: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  province: () => Promise<String>;
  region: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduServiceTypePreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  img?: String;
  level?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  pid?: Int;
  sort?: Int;
  status?: Int;
}

export interface ChongduServiceTypePreviousValuesPromise
  extends Promise<ChongduServiceTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  level: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduServiceTypePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServiceTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  img: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserConnection {
  pageInfo: PageInfo;
  edges: ChongduUserEdge[];
}

export interface ChongduUserConnectionPromise
  extends Promise<ChongduUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserEdge>>() => T;
  aggregate: <T = AggregateChongduUserPromise>() => T;
}

export interface ChongduUserConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduUserSubscription>() => T;
}

export interface ChongduCommentEdge {
  node: ChongduComment;
  cursor: String;
}

export interface ChongduCommentEdgePromise
  extends Promise<ChongduCommentEdge>,
    Fragmentable {
  node: <T = ChongduCommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCommentEdgeSubscription
  extends Promise<AsyncIterator<ChongduCommentEdge>>,
    Fragmentable {
  node: <T = ChongduCommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTagDetailEdge {
  node: ChongduTagDetail;
  cursor: String;
}

export interface ChongduTagDetailEdgePromise
  extends Promise<ChongduTagDetailEdge>,
    Fragmentable {
  node: <T = ChongduTagDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduTagDetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduTagDetailEdge>>,
    Fragmentable {
  node: <T = ChongduTagDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduServiceauthentLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduServiceauthentLog;
  updatedFields: String[];
  previousValues: ChongduServiceauthentLogPreviousValues;
}

export interface ChongduServiceauthentLogSubscriptionPayloadPromise
  extends Promise<ChongduServiceauthentLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduServiceauthentLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduServiceauthentLogPreviousValuesPromise>() => T;
}

export interface ChongduServiceauthentLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduServiceauthentLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduServiceauthentLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = ChongduServiceauthentLogPreviousValuesSubscription
  >() => T;
}

export interface AggregateChongduStat {
  count: Int;
}

export interface AggregateChongduStatPromise
  extends Promise<AggregateChongduStat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduStatSubscription
  extends Promise<AsyncIterator<AggregateChongduStat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceauthentLogPreviousValues {
  id: Int;
  serviceauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduServiceauthentLogPreviousValuesPromise
  extends Promise<ChongduServiceauthentLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  serviceauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduServiceauthentLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduServiceauthentLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serviceauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAdmin {
  id: ID_Output;
  agentAdminId?: String;
  agentId?: String;
  cityCode?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  ip?: String;
  isAuth?: Int;
  lastLoginTime?: String;
  level?: Int;
  mac?: String;
  mail?: String;
  mt?: String;
  name?: String;
  nickname?: String;
  pwd?: String;
  realName?: String;
  rt?: Int;
  sort?: Int;
  status?: Int;
  tel?: String;
  type?: Int;
}

export interface ChongduAdminPromise
  extends Promise<ChongduAdmin>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  agentAdminId: () => Promise<String>;
  agentId: () => Promise<String>;
  cityCode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  ip: () => Promise<String>;
  isAuth: () => Promise<Int>;
  lastLoginTime: () => Promise<String>;
  level: () => Promise<Int>;
  mac: () => Promise<String>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  pwd: () => Promise<String>;
  realName: () => Promise<String>;
  rt: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  type: () => Promise<Int>;
  groupId: <T = ChongduRoleGroupPromise>() => T;
}

export interface ChongduAdminSubscription
  extends Promise<AsyncIterator<ChongduAdmin>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  agentAdminId: () => Promise<AsyncIterator<String>>;
  agentId: () => Promise<AsyncIterator<String>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  isAuth: () => Promise<AsyncIterator<Int>>;
  lastLoginTime: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  mac: () => Promise<AsyncIterator<String>>;
  mail: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  pwd: () => Promise<AsyncIterator<String>>;
  realName: () => Promise<AsyncIterator<String>>;
  rt: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  groupId: <T = ChongduRoleGroupSubscription>() => T;
}

export interface ChongduAdminNullablePromise
  extends Promise<ChongduAdmin | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  agentAdminId: () => Promise<String>;
  agentId: () => Promise<String>;
  cityCode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  ip: () => Promise<String>;
  isAuth: () => Promise<Int>;
  lastLoginTime: () => Promise<String>;
  level: () => Promise<Int>;
  mac: () => Promise<String>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  nickname: () => Promise<String>;
  pwd: () => Promise<String>;
  realName: () => Promise<String>;
  rt: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  type: () => Promise<Int>;
  groupId: <T = ChongduRoleGroupPromise>() => T;
}

export interface ChongduCommentReply {
  id: Int;
  commentId?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  praiseCount?: Int;
  replyuserId?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduCommentReplyPromise
  extends Promise<ChongduCommentReply>,
    Fragmentable {
  id: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  replyuserId: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduCommentReplySubscription
  extends Promise<AsyncIterator<ChongduCommentReply>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  commentId: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  replyuserId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentReplyNullablePromise
  extends Promise<ChongduCommentReply | null>,
    Fragmentable {
  id: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  replyuserId: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduServiceRecommendConnection {
  pageInfo: PageInfo;
  edges: ChongduServiceRecommendEdge[];
}

export interface ChongduServiceRecommendConnectionPromise
  extends Promise<ChongduServiceRecommendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServiceRecommendEdge>>() => T;
  aggregate: <T = AggregateChongduServiceRecommendPromise>() => T;
}

export interface ChongduServiceRecommendConnectionSubscription
  extends Promise<AsyncIterator<ChongduServiceRecommendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduServiceRecommendEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduServiceRecommendSubscription>() => T;
}

export interface ChongduStatSubscriptionPayload {
  mutation: MutationType;
  node: ChongduStat;
  updatedFields: String[];
  previousValues: ChongduStatPreviousValues;
}

export interface ChongduStatSubscriptionPayloadPromise
  extends Promise<ChongduStatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduStatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduStatPreviousValuesPromise>() => T;
}

export interface ChongduStatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduStatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduStatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduStatPreviousValuesSubscription>() => T;
}

export interface ChongduServiceImgConnection {
  pageInfo: PageInfo;
  edges: ChongduServiceImgEdge[];
}

export interface ChongduServiceImgConnectionPromise
  extends Promise<ChongduServiceImgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServiceImgEdge>>() => T;
  aggregate: <T = AggregateChongduServiceImgPromise>() => T;
}

export interface ChongduServiceImgConnectionSubscription
  extends Promise<AsyncIterator<ChongduServiceImgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduServiceImgEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduServiceImgSubscription>() => T;
}

export interface ChongduStatPreviousValues {
  id: ID_Output;
  agentId?: String;
  citycode?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  num?: Int;
  satus?: Int;
  sort?: Int;
  type?: Int;
}

export interface ChongduStatPreviousValuesPromise
  extends Promise<ChongduStatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  agentId: () => Promise<String>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  num: () => Promise<Int>;
  satus: () => Promise<Int>;
  sort: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduStatPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduStatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  agentId: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  num: () => Promise<AsyncIterator<Int>>;
  satus: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduService {
  count: Int;
}

export interface AggregateChongduServicePromise
  extends Promise<AggregateChongduService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduServiceSubscription
  extends Promise<AsyncIterator<AggregateChongduService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCompanyrecommend {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: Int;
  endtime?: DateTimeOutput;
  fullname?: String;
  merchantId?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  sort?: Int;
  starttime?: DateTimeOutput;
  status?: Int;
}

export interface ChongduCompanyrecommendPromise
  extends Promise<ChongduCompanyrecommend>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  fullname: () => Promise<String>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
}

export interface ChongduCompanyrecommendSubscription
  extends Promise<AsyncIterator<ChongduCompanyrecommend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<DateTimeOutput>>;
  fullname: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCompanyrecommendNullablePromise
  extends Promise<ChongduCompanyrecommend | null>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<Int>;
  endtime: () => Promise<DateTimeOutput>;
  fullname: () => Promise<String>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
}

export interface ChongduSearchthinkConnection {
  pageInfo: PageInfo;
  edges: ChongduSearchthinkEdge[];
}

export interface ChongduSearchthinkConnectionPromise
  extends Promise<ChongduSearchthinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduSearchthinkEdge>>() => T;
  aggregate: <T = AggregateChongduSearchthinkPromise>() => T;
}

export interface ChongduSearchthinkConnectionSubscription
  extends Promise<AsyncIterator<ChongduSearchthinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduSearchthinkEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduSearchthinkSubscription>() => T;
}

export interface ChongduTagSubscriptionPayload {
  mutation: MutationType;
  node: ChongduTag;
  updatedFields: String[];
  previousValues: ChongduTagPreviousValues;
}

export interface ChongduTagSubscriptionPayloadPromise
  extends Promise<ChongduTagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduTagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduTagPreviousValuesPromise>() => T;
}

export interface ChongduTagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduTagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduTagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduTagPreviousValuesSubscription>() => T;
}

export interface ChongduRoleMenuEdge {
  node: ChongduRoleMenu;
  cursor: String;
}

export interface ChongduRoleMenuEdgePromise
  extends Promise<ChongduRoleMenuEdge>,
    Fragmentable {
  node: <T = ChongduRoleMenuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRoleMenuEdgeSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuEdge>>,
    Fragmentable {
  node: <T = ChongduRoleMenuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTagPreviousValues {
  id: Int;
  content?: String;
  ct?: String;
  d?: Int;
  petCardId?: Int;
  type?: Int;
  userId?: String;
  worldId?: Int;
}

export interface ChongduTagPreviousValuesPromise
  extends Promise<ChongduTagPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petCardId: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduTagPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduTagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  petCardId: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleDetailEdge {
  node: ChongduRoleDetail;
  cursor: String;
}

export interface ChongduRoleDetailEdgePromise
  extends Promise<ChongduRoleDetailEdge>,
    Fragmentable {
  node: <T = ChongduRoleDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRoleDetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduRoleDetailEdge>>,
    Fragmentable {
  node: <T = ChongduRoleDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduCompanyauthentLog {
  count: Int;
}

export interface AggregateChongduCompanyauthentLogPromise
  extends Promise<AggregateChongduCompanyauthentLog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCompanyauthentLogSubscription
  extends Promise<AsyncIterator<AggregateChongduCompanyauthentLog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleAuth {
  id: Int;
  userId?: String;
  action?: String;
  method?: String;
  operationName?: String;
}

export interface ChongduRoleAuthPromise
  extends Promise<ChongduRoleAuth>,
    Fragmentable {
  id: () => Promise<Int>;
  userId: () => Promise<String>;
  action: () => Promise<String>;
  method: () => Promise<String>;
  operationName: () => Promise<String>;
}

export interface ChongduRoleAuthSubscription
  extends Promise<AsyncIterator<ChongduRoleAuth>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  action: () => Promise<AsyncIterator<String>>;
  method: () => Promise<AsyncIterator<String>>;
  operationName: () => Promise<AsyncIterator<String>>;
}

export interface ChongduRoleAuthNullablePromise
  extends Promise<ChongduRoleAuth | null>,
    Fragmentable {
  id: () => Promise<Int>;
  userId: () => Promise<String>;
  action: () => Promise<String>;
  method: () => Promise<String>;
  operationName: () => Promise<String>;
}

export interface ChongduTagDetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduTagDetail;
  updatedFields: String[];
  previousValues: ChongduTagDetailPreviousValues;
}

export interface ChongduTagDetailSubscriptionPayloadPromise
  extends Promise<ChongduTagDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduTagDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduTagDetailPreviousValuesPromise>() => T;
}

export interface ChongduTagDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduTagDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduTagDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduTagDetailPreviousValuesSubscription>() => T;
}

export interface ChongduAdvertisement {
  id: Int;
  adminId?: String;
  agentId?: String;
  cityCode?: String;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  mt?: String;
  relateId?: String;
  relateType?: Int;
  sort?: Int;
  status?: Int;
  title?: String;
  type?: Int;
  url?: String;
}

export interface ChongduAdvertisementPromise
  extends Promise<ChongduAdvertisement>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  agentId: () => Promise<String>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  mt: () => Promise<String>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduAdvertisementSubscription
  extends Promise<AsyncIterator<ChongduAdvertisement>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  adminId: () => Promise<AsyncIterator<String>>;
  agentId: () => Promise<AsyncIterator<String>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  relateId: () => Promise<AsyncIterator<String>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAdvertisementNullablePromise
  extends Promise<ChongduAdvertisement | null>,
    Fragmentable {
  id: () => Promise<Int>;
  adminId: () => Promise<String>;
  agentId: () => Promise<String>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  mt: () => Promise<String>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  title: () => Promise<String>;
  type: () => Promise<Int>;
  url: () => Promise<String>;
}

export interface ChongduTagDetailPreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  petCardId?: Int;
  tagId?: Int;
  worldId?: Int;
}

export interface ChongduTagDetailPreviousValuesPromise
  extends Promise<ChongduTagDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  petCardId: () => Promise<Int>;
  tagId: () => Promise<Int>;
  worldId: () => Promise<Int>;
}

export interface ChongduTagDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduTagDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  petCardId: () => Promise<AsyncIterator<Int>>;
  tagId: () => Promise<AsyncIterator<Int>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRecommendConnection {
  pageInfo: PageInfo;
  edges: ChongduRecommendEdge[];
}

export interface ChongduRecommendConnectionPromise
  extends Promise<ChongduRecommendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRecommendEdge>>() => T;
  aggregate: <T = AggregateChongduRecommendPromise>() => T;
}

export interface ChongduRecommendConnectionSubscription
  extends Promise<AsyncIterator<ChongduRecommendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRecommendEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRecommendSubscription>() => T;
}

export interface ChongduCompanyauthentLogEdge {
  node: ChongduCompanyauthentLog;
  cursor: String;
}

export interface ChongduCompanyauthentLogEdgePromise
  extends Promise<ChongduCompanyauthentLogEdge>,
    Fragmentable {
  node: <T = ChongduCompanyauthentLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCompanyauthentLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentLogEdge>>,
    Fragmentable {
  node: <T = ChongduCompanyauthentLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduProductType {
  count: Int;
}

export interface AggregateChongduProductTypePromise
  extends Promise<AggregateChongduProductType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductTypeSubscription
  extends Promise<AsyncIterator<AggregateChongduProductType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduTradingAreaSubscriptionPayload {
  mutation: MutationType;
  node: ChongduTradingArea;
  updatedFields: String[];
  previousValues: ChongduTradingAreaPreviousValues;
}

export interface ChongduTradingAreaSubscriptionPayloadPromise
  extends Promise<ChongduTradingAreaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduTradingAreaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduTradingAreaPreviousValuesPromise>() => T;
}

export interface ChongduTradingAreaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduTradingAreaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduTradingAreaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduTradingAreaPreviousValuesSubscription>() => T;
}

export interface AggregateChongduProductRecommend {
  count: Int;
}

export interface AggregateChongduProductRecommendPromise
  extends Promise<AggregateChongduProductRecommend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductRecommendSubscription
  extends Promise<AsyncIterator<AggregateChongduProductRecommend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduTradingAreaPreviousValues {
  id: Int;
  pCityCode?: Int;
  cityCode?: String;
  cityName?: String;
  tradingAreaName?: String;
  latitude?: String;
  longitude?: String;
  distance?: Float;
  cuserId?: String;
  muserId?: String;
  ct?: String;
  mt?: String;
}

export interface ChongduTradingAreaPreviousValuesPromise
  extends Promise<ChongduTradingAreaPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  pCityCode: () => Promise<Int>;
  cityCode: () => Promise<String>;
  cityName: () => Promise<String>;
  tradingAreaName: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  distance: () => Promise<Float>;
  cuserId: () => Promise<String>;
  muserId: () => Promise<String>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
}

export interface ChongduTradingAreaPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduTradingAreaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  pCityCode: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  cityName: () => Promise<AsyncIterator<String>>;
  tradingAreaName: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  distance: () => Promise<AsyncIterator<Float>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductPettype {
  id: Int;
  ct?: String;
  d?: Int;
  level?: Int;
  petTypeId?: Int;
  petTypeName?: String;
  productId?: String;
}

export interface ChongduProductPettypePromise
  extends Promise<ChongduProductPettype>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  level: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  petTypeName: () => Promise<String>;
  productId: () => Promise<String>;
}

export interface ChongduProductPettypeSubscription
  extends Promise<AsyncIterator<ChongduProductPettype>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  petTypeId: () => Promise<AsyncIterator<Int>>;
  petTypeName: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductPettypeNullablePromise
  extends Promise<ChongduProductPettype | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  level: () => Promise<Int>;
  petTypeId: () => Promise<Int>;
  petTypeName: () => Promise<String>;
  productId: () => Promise<String>;
}

export interface ChongduCompanyauthentLogConnection {
  pageInfo: PageInfo;
  edges: ChongduCompanyauthentLogEdge[];
}

export interface ChongduCompanyauthentLogConnectionPromise
  extends Promise<ChongduCompanyauthentLogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCompanyauthentLogEdge>>() => T;
  aggregate: <T = AggregateChongduCompanyauthentLogPromise>() => T;
}

export interface ChongduCompanyauthentLogConnectionSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentLogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCompanyauthentLogEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCompanyauthentLogSubscription>() => T;
}

export interface ChongduProductBrandConnection {
  pageInfo: PageInfo;
  edges: ChongduProductBrandEdge[];
}

export interface ChongduProductBrandConnectionPromise
  extends Promise<ChongduProductBrandConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductBrandEdge>>() => T;
  aggregate: <T = AggregateChongduProductBrandPromise>() => T;
}

export interface ChongduProductBrandConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductBrandConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduProductBrandEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduProductBrandSubscription>() => T;
}

export interface ChongduUserSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUser;
  updatedFields: String[];
  previousValues: ChongduUserPreviousValues;
}

export interface ChongduUserSubscriptionPayloadPromise
  extends Promise<ChongduUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserPreviousValuesPromise>() => T;
}

export interface ChongduUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserPreviousValuesSubscription>() => T;
}

export interface ChongduProductEdge {
  node: ChongduProduct;
  cursor: String;
}

export interface ChongduProductEdgePromise
  extends Promise<ChongduProductEdge>,
    Fragmentable {
  node: <T = ChongduProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductEdge>>,
    Fragmentable {
  node: <T = ChongduProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserPreviousValues {
  id: ID_Output;
  balance?: Float;
  ct?: String;
  d?: Int;
  hash?: String;
  icon?: String;
  ip?: String;
  isaudit?: Int;
  isauthent?: Int;
  lastlogintime?: String;
  mail?: String;
  mt?: String;
  nickname?: String;
  openidDy?: String;
  openidQq?: String;
  openidWx?: String;
  phone?: String;
  regeistType?: Int;
  regtime?: String;
  salt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  updateBy?: String;
  username?: String;
  vip?: Int;
}

export interface ChongduUserPreviousValuesPromise
  extends Promise<ChongduUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  balance: () => Promise<Float>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  hash: () => Promise<String>;
  icon: () => Promise<String>;
  ip: () => Promise<String>;
  isaudit: () => Promise<Int>;
  isauthent: () => Promise<Int>;
  lastlogintime: () => Promise<String>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  nickname: () => Promise<String>;
  openidDy: () => Promise<String>;
  openidQq: () => Promise<String>;
  openidWx: () => Promise<String>;
  phone: () => Promise<String>;
  regeistType: () => Promise<Int>;
  regtime: () => Promise<String>;
  salt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  updateBy: () => Promise<String>;
  username: () => Promise<String>;
  vip: () => Promise<Int>;
}

export interface ChongduUserPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  balance: () => Promise<AsyncIterator<Float>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  hash: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  isaudit: () => Promise<AsyncIterator<Int>>;
  isauthent: () => Promise<AsyncIterator<Int>>;
  lastlogintime: () => Promise<AsyncIterator<String>>;
  mail: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  openidDy: () => Promise<AsyncIterator<String>>;
  openidQq: () => Promise<AsyncIterator<String>>;
  openidWx: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  regeistType: () => Promise<AsyncIterator<Int>>;
  regtime: () => Promise<AsyncIterator<String>>;
  salt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  updateBy: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  vip: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAgent {
  id: ID_Output;
  type?: Int;
}

export interface ChongduAgentPromise
  extends Promise<ChongduAgent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
}

export interface ChongduAgentSubscription
  extends Promise<AsyncIterator<ChongduAgent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAgentNullablePromise
  extends Promise<ChongduAgent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
}

export interface AggregateChongduComment {
  count: Int;
}

export interface AggregateChongduCommentPromise
  extends Promise<AggregateChongduComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCommentSubscription
  extends Promise<AsyncIterator<AggregateChongduComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetauthentdetailConnection {
  pageInfo: PageInfo;
  edges: ChongduPetauthentdetailEdge[];
}

export interface ChongduPetauthentdetailConnectionPromise
  extends Promise<ChongduPetauthentdetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPetauthentdetailEdge>>() => T;
  aggregate: <T = AggregateChongduPetauthentdetailPromise>() => T;
}

export interface ChongduPetauthentdetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduPetauthentdetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduPetauthentdetailEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduPetauthentdetailSubscription>() => T;
}

export interface ChongduUserFavouriteSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUserFavourite;
  updatedFields: String[];
  previousValues: ChongduUserFavouritePreviousValues;
}

export interface ChongduUserFavouriteSubscriptionPayloadPromise
  extends Promise<ChongduUserFavouriteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserFavouritePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserFavouritePreviousValuesPromise>() => T;
}

export interface ChongduUserFavouriteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserFavouriteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserFavouriteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserFavouritePreviousValuesSubscription>() => T;
}

export interface AggregateChongduPetType {
  count: Int;
}

export interface AggregateChongduPetTypePromise
  extends Promise<AggregateChongduPetType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetTypeSubscription
  extends Promise<AsyncIterator<AggregateChongduPetType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserFavouritePreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  relateId?: String;
  relateType?: Int;
  status?: Int;
  userId?: String;
}

export interface ChongduUserFavouritePreviousValuesPromise
  extends Promise<ChongduUserFavouritePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<String>;
  relateType: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserFavouritePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserFavouritePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  relateId: () => Promise<AsyncIterator<String>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPetImg {
  count: Int;
}

export interface AggregateChongduPetImgPromise
  extends Promise<AggregateChongduPetImg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetImgSubscription
  extends Promise<AsyncIterator<AggregateChongduPetImg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCompanyauthentLog {
  id: Int;
  companyauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduCompanyauthentLogPromise
  extends Promise<ChongduCompanyauthentLog>,
    Fragmentable {
  id: () => Promise<Int>;
  companyauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduCompanyauthentLogSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  companyauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  cadminId: <T = ChongduAdminSubscription>() => T;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCompanyauthentLogNullablePromise
  extends Promise<ChongduCompanyauthentLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  companyauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduPetCard {
  id: Int;
  birthday?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  isSteriliz?: Int;
  name?: String;
  petType?: Int;
  praiseCount?: Int;
  sex?: Int;
  userId?: String;
  weight?: String;
}

export interface ChongduPetCardPromise
  extends Promise<ChongduPetCard>,
    Fragmentable {
  id: () => Promise<Int>;
  birthday: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  isSteriliz: () => Promise<Int>;
  name: () => Promise<String>;
  petType: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  sex: () => Promise<Int>;
  userId: () => Promise<String>;
  weight: () => Promise<String>;
}

export interface ChongduPetCardSubscription
  extends Promise<AsyncIterator<ChongduPetCard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  birthday: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  isSteriliz: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  petType: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  sex: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  weight: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetCardNullablePromise
  extends Promise<ChongduPetCard | null>,
    Fragmentable {
  id: () => Promise<Int>;
  birthday: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  isSteriliz: () => Promise<Int>;
  name: () => Promise<String>;
  petType: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  sex: () => Promise<Int>;
  userId: () => Promise<String>;
  weight: () => Promise<String>;
}

export interface ChongduUserauthentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUserauthent;
  updatedFields: String[];
  previousValues: ChongduUserauthentPreviousValues;
}

export interface ChongduUserauthentSubscriptionPayloadPromise
  extends Promise<ChongduUserauthentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserauthentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserauthentPreviousValuesPromise>() => T;
}

export interface ChongduUserauthentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserauthentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserauthentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserauthentPreviousValuesSubscription>() => T;
}

export interface ChongduPermissionEdge {
  node: ChongduPermission;
  cursor: String;
}

export interface ChongduPermissionEdgePromise
  extends Promise<ChongduPermissionEdge>,
    Fragmentable {
  node: <T = ChongduPermissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPermissionEdgeSubscription
  extends Promise<AsyncIterator<ChongduPermissionEdge>>,
    Fragmentable {
  node: <T = ChongduPermissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserauthentPreviousValues {
  id: ID_Output;
  authtime?: String;
  backPhoto?: String;
  beginTime?: String;
  birthday?: String;
  cardAddress?: String;
  cardNum?: String;
  citycode?: String;
  ct?: String;
  d?: Int;
  endTime?: String;
  frontPhoto?: String;
  handPhoto?: String;
  nation?: String;
  realName?: String;
  sex?: Int;
  signFrom?: String;
  status?: Int;
}

export interface ChongduUserauthentPreviousValuesPromise
  extends Promise<ChongduUserauthentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authtime: () => Promise<String>;
  backPhoto: () => Promise<String>;
  beginTime: () => Promise<String>;
  birthday: () => Promise<String>;
  cardAddress: () => Promise<String>;
  cardNum: () => Promise<String>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  endTime: () => Promise<String>;
  frontPhoto: () => Promise<String>;
  handPhoto: () => Promise<String>;
  nation: () => Promise<String>;
  realName: () => Promise<String>;
  sex: () => Promise<Int>;
  signFrom: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduUserauthentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserauthentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authtime: () => Promise<AsyncIterator<String>>;
  backPhoto: () => Promise<AsyncIterator<String>>;
  beginTime: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  cardAddress: () => Promise<AsyncIterator<String>>;
  cardNum: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<String>>;
  frontPhoto: () => Promise<AsyncIterator<String>>;
  handPhoto: () => Promise<AsyncIterator<String>>;
  nation: () => Promise<AsyncIterator<String>>;
  realName: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<Int>>;
  signFrom: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPayInfo {
  id: Int;
  ct?: String;
  mt?: String;
  orderNo?: String;
  payNo?: String;
  payPlatform?: String;
  status?: Int;
  userId?: String;
}

export interface ChongduPayInfoPromise
  extends Promise<ChongduPayInfo>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  payNo: () => Promise<String>;
  payPlatform: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduPayInfoSubscription
  extends Promise<AsyncIterator<ChongduPayInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  orderNo: () => Promise<AsyncIterator<String>>;
  payNo: () => Promise<AsyncIterator<String>>;
  payPlatform: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPayInfoNullablePromise
  extends Promise<ChongduPayInfo | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  mt: () => Promise<String>;
  orderNo: () => Promise<String>;
  payNo: () => Promise<String>;
  payPlatform: () => Promise<String>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface AggregateChongduCompanyauthent {
  count: Int;
}

export interface AggregateChongduCompanyauthentPromise
  extends Promise<AggregateChongduCompanyauthent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCompanyauthentSubscription
  extends Promise<AsyncIterator<AggregateChongduCompanyauthent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAppointment {
  id: Int;
  ct?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  isOk?: Int;
  levelmessage?: String;
  mark?: String;
  merchantId?: String;
  mt?: String;
  serviceId?: String;
  sort?: Int;
  state?: Int;
  subtype?: Int;
  time?: String;
  timebegin?: String;
  timeend?: String;
  type?: Int;
  userId?: String;
  orderSn?: String;
}

export interface ChongduAppointmentPromise
  extends Promise<ChongduAppointment>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  isOk: () => Promise<Int>;
  levelmessage: () => Promise<String>;
  mark: () => Promise<String>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  state: () => Promise<Int>;
  subtype: () => Promise<Int>;
  time: () => Promise<String>;
  timebegin: () => Promise<String>;
  timeend: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  orderSn: () => Promise<String>;
}

export interface ChongduAppointmentSubscription
  extends Promise<AsyncIterator<ChongduAppointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  isOk: () => Promise<AsyncIterator<Int>>;
  levelmessage: () => Promise<AsyncIterator<String>>;
  mark: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  serviceId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<Int>>;
  subtype: () => Promise<AsyncIterator<Int>>;
  time: () => Promise<AsyncIterator<String>>;
  timebegin: () => Promise<AsyncIterator<String>>;
  timeend: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  orderSn: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAppointmentNullablePromise
  extends Promise<ChongduAppointment | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  isOk: () => Promise<Int>;
  levelmessage: () => Promise<String>;
  mark: () => Promise<String>;
  merchantId: () => Promise<String>;
  mt: () => Promise<String>;
  serviceId: () => Promise<String>;
  sort: () => Promise<Int>;
  state: () => Promise<Int>;
  subtype: () => Promise<Int>;
  time: () => Promise<String>;
  timebegin: () => Promise<String>;
  timeend: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  orderSn: () => Promise<String>;
}

export interface ChongduUserauthentLogSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUserauthentLog;
  updatedFields: String[];
  previousValues: ChongduUserauthentLogPreviousValues;
}

export interface ChongduUserauthentLogSubscriptionPayloadPromise
  extends Promise<ChongduUserauthentLogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserauthentLogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserauthentLogPreviousValuesPromise>() => T;
}

export interface ChongduUserauthentLogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserauthentLogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserauthentLogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserauthentLogPreviousValuesSubscription>() => T;
}

export interface ChongduOrderinvoiceConnection {
  pageInfo: PageInfo;
  edges: ChongduOrderinvoiceEdge[];
}

export interface ChongduOrderinvoiceConnectionPromise
  extends Promise<ChongduOrderinvoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduOrderinvoiceEdge>>() => T;
  aggregate: <T = AggregateChongduOrderinvoicePromise>() => T;
}

export interface ChongduOrderinvoiceConnectionSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduOrderinvoiceEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduOrderinvoiceSubscription>() => T;
}

export interface ChongduUserauthentLogPreviousValues {
  id: Int;
  userauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduUserauthentLogPreviousValuesPromise
  extends Promise<ChongduUserauthentLogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  userauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduUserauthentLogPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserauthentLogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  userauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduOrder {
  count: Int;
}

export interface AggregateChongduOrderPromise
  extends Promise<AggregateChongduOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduOrderSubscription
  extends Promise<AsyncIterator<AggregateChongduOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduCompanyauthentEdge {
  node: ChongduCompanyauthent;
  cursor: String;
}

export interface ChongduCompanyauthentEdgePromise
  extends Promise<ChongduCompanyauthentEdge>,
    Fragmentable {
  node: <T = ChongduCompanyauthentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCompanyauthentEdgeSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentEdge>>,
    Fragmentable {
  node: <T = ChongduCompanyauthentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduWorldJoin {
  count: Int;
}

export interface AggregateChongduWorldJoinPromise
  extends Promise<AggregateChongduWorldJoin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduWorldJoinSubscription
  extends Promise<AsyncIterator<AggregateChongduWorldJoin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserbindSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUserbind;
  updatedFields: String[];
  previousValues: ChongduUserbindPreviousValues;
}

export interface ChongduUserbindSubscriptionPayloadPromise
  extends Promise<ChongduUserbindSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserbindPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserbindPreviousValuesPromise>() => T;
}

export interface ChongduUserbindSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserbindSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserbindSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserbindPreviousValuesSubscription>() => T;
}

export interface ChongduViewcountEdge {
  node: ChongduViewcount;
  cursor: String;
}

export interface ChongduViewcountEdgePromise
  extends Promise<ChongduViewcountEdge>,
    Fragmentable {
  node: <T = ChongduViewcountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduViewcountEdgeSubscription
  extends Promise<AsyncIterator<ChongduViewcountEdge>>,
    Fragmentable {
  node: <T = ChongduViewcountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserbindPreviousValues {
  id: Int;
  bindtime?: String;
  content?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mail?: String;
  mt?: String;
  muserId?: String;
  sort?: Int;
  status?: Int;
  tel?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduUserbindPreviousValuesPromise
  extends Promise<ChongduUserbindPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  bindtime: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserbindPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserbindPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  bindtime: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mail: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAddress {
  id: Int;
  city?: String;
  code?: String;
  country?: String;
  ct?: String;
  d?: Int;
  detailAdd?: String;
  mt?: String;
  name?: String;
  province?: String;
  region?: String;
  sort?: Int;
  status?: Int;
  tel?: String;
  userId?: String;
}

export interface ChongduAddressPromise
  extends Promise<ChongduAddress>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  country: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  detailAdd: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  province: () => Promise<String>;
  region: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduAddressSubscription
  extends Promise<AsyncIterator<ChongduAddress>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  detailAdd: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  region: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  tel: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduAddressNullablePromise
  extends Promise<ChongduAddress | null>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  country: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  detailAdd: () => Promise<String>;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  province: () => Promise<String>;
  region: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  tel: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduCompanyauthentConnection {
  pageInfo: PageInfo;
  edges: ChongduCompanyauthentEdge[];
}

export interface ChongduCompanyauthentConnectionPromise
  extends Promise<ChongduCompanyauthentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCompanyauthentEdge>>() => T;
  aggregate: <T = AggregateChongduCompanyauthentPromise>() => T;
}

export interface ChongduCompanyauthentConnectionSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCompanyauthentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCompanyauthentSubscription>() => T;
}

export interface AggregateChongduUserbind {
  count: Int;
}

export interface AggregateChongduUserbindPromise
  extends Promise<AggregateChongduUserbind>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduUserbindSubscription
  extends Promise<AsyncIterator<AggregateChongduUserbind>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserdetailSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUserdetail;
  updatedFields: String[];
  previousValues: ChongduUserdetailPreviousValues;
}

export interface ChongduUserdetailSubscriptionPayloadPromise
  extends Promise<ChongduUserdetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserdetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserdetailPreviousValuesPromise>() => T;
}

export interface ChongduUserdetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserdetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserdetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserdetailPreviousValuesSubscription>() => T;
}

export interface ChongduUserFavouriteConnection {
  pageInfo: PageInfo;
  edges: ChongduUserFavouriteEdge[];
}

export interface ChongduUserFavouriteConnectionPromise
  extends Promise<ChongduUserFavouriteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserFavouriteEdge>>() => T;
  aggregate: <T = AggregateChongduUserFavouritePromise>() => T;
}

export interface ChongduUserFavouriteConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserFavouriteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduUserFavouriteEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduUserFavouriteSubscription>() => T;
}

export interface ChongduUserdetailPreviousValues {
  id: Int;
  deviceCode?: String;
  deviceName?: String;
  type?: Int;
  userId?: String;
}

export interface ChongduUserdetailPreviousValuesPromise
  extends Promise<ChongduUserdetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  deviceCode: () => Promise<String>;
  deviceName: () => Promise<String>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduUserdetailPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserdetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  deviceCode: () => Promise<AsyncIterator<String>>;
  deviceName: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduTag {
  count: Int;
}

export interface AggregateChongduTagPromise
  extends Promise<AggregateChongduTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduTagSubscription
  extends Promise<AsyncIterator<AggregateChongduTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUser {
  id: ID_Output;
  balance?: Float;
  ct?: String;
  d?: Int;
  hash?: String;
  icon?: String;
  ip?: String;
  isaudit?: Int;
  isauthent?: Int;
  lastlogintime?: String;
  mail?: String;
  mt?: String;
  nickname?: String;
  openidDy?: String;
  openidQq?: String;
  openidWx?: String;
  phone?: String;
  regeistType?: Int;
  regtime?: String;
  salt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  updateBy?: String;
  username?: String;
  vip?: Int;
}

export interface ChongduUserPromise extends Promise<ChongduUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  balance: () => Promise<Float>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  hash: () => Promise<String>;
  icon: () => Promise<String>;
  ip: () => Promise<String>;
  isaudit: () => Promise<Int>;
  isauthent: () => Promise<Int>;
  lastlogintime: () => Promise<String>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  nickname: () => Promise<String>;
  openidDy: () => Promise<String>;
  openidQq: () => Promise<String>;
  openidWx: () => Promise<String>;
  phone: () => Promise<String>;
  regeistType: () => Promise<Int>;
  regtime: () => Promise<String>;
  salt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  updateBy: () => Promise<String>;
  username: () => Promise<String>;
  vip: () => Promise<Int>;
}

export interface ChongduUserSubscription
  extends Promise<AsyncIterator<ChongduUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  balance: () => Promise<AsyncIterator<Float>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  hash: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  isaudit: () => Promise<AsyncIterator<Int>>;
  isauthent: () => Promise<AsyncIterator<Int>>;
  lastlogintime: () => Promise<AsyncIterator<String>>;
  mail: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  openidDy: () => Promise<AsyncIterator<String>>;
  openidQq: () => Promise<AsyncIterator<String>>;
  openidWx: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  regeistType: () => Promise<AsyncIterator<Int>>;
  regtime: () => Promise<AsyncIterator<String>>;
  salt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  updateBy: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  vip: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserNullablePromise
  extends Promise<ChongduUser | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  balance: () => Promise<Float>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  hash: () => Promise<String>;
  icon: () => Promise<String>;
  ip: () => Promise<String>;
  isaudit: () => Promise<Int>;
  isauthent: () => Promise<Int>;
  lastlogintime: () => Promise<String>;
  mail: () => Promise<String>;
  mt: () => Promise<String>;
  nickname: () => Promise<String>;
  openidDy: () => Promise<String>;
  openidQq: () => Promise<String>;
  openidWx: () => Promise<String>;
  phone: () => Promise<String>;
  regeistType: () => Promise<Int>;
  regtime: () => Promise<String>;
  salt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  updateBy: () => Promise<String>;
  username: () => Promise<String>;
  vip: () => Promise<Int>;
}

export interface ChongduServiceTypeConnection {
  pageInfo: PageInfo;
  edges: ChongduServiceTypeEdge[];
}

export interface ChongduServiceTypeConnectionPromise
  extends Promise<ChongduServiceTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServiceTypeEdge>>() => T;
  aggregate: <T = AggregateChongduServiceTypePromise>() => T;
}

export interface ChongduServiceTypeConnectionSubscription
  extends Promise<AsyncIterator<ChongduServiceTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduServiceTypeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduServiceTypeSubscription>() => T;
}

export interface ChongduUserstatisticSubscriptionPayload {
  mutation: MutationType;
  node: ChongduUserstatistic;
  updatedFields: String[];
  previousValues: ChongduUserstatisticPreviousValues;
}

export interface ChongduUserstatisticSubscriptionPayloadPromise
  extends Promise<ChongduUserstatisticSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduUserstatisticPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduUserstatisticPreviousValuesPromise>() => T;
}

export interface ChongduUserstatisticSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduUserstatisticSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduUserstatisticSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduUserstatisticPreviousValuesSubscription>() => T;
}

export interface ChongduServiceAuthentdetailEdge {
  node: ChongduServiceAuthentdetail;
  cursor: String;
}

export interface ChongduServiceAuthentdetailEdgePromise
  extends Promise<ChongduServiceAuthentdetailEdge>,
    Fragmentable {
  node: <T = ChongduServiceAuthentdetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduServiceAuthentdetailEdgeSubscription
  extends Promise<AsyncIterator<ChongduServiceAuthentdetailEdge>>,
    Fragmentable {
  node: <T = ChongduServiceAuthentdetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserstatisticPreviousValues {
  id: Int;
  count?: Int;
  ct?: String;
  d?: Int;
  day?: Int;
  hour?: Int;
  month?: Int;
  mt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  year?: Int;
}

export interface ChongduUserstatisticPreviousValuesPromise
  extends Promise<ChongduUserstatisticPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduUserstatisticPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduUserstatisticPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleMenuChildrenConnection {
  pageInfo: PageInfo;
  edges: ChongduRoleMenuChildrenEdge[];
}

export interface ChongduRoleMenuChildrenConnectionPromise
  extends Promise<ChongduRoleMenuChildrenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRoleMenuChildrenEdge>>() => T;
  aggregate: <T = AggregateChongduRoleMenuChildrenPromise>() => T;
}

export interface ChongduRoleMenuChildrenConnectionSubscription
  extends Promise<AsyncIterator<ChongduRoleMenuChildrenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduRoleMenuChildrenEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduRoleMenuChildrenSubscription>() => T;
}

export interface ChongduCompanyauthent {
  id: ID_Output;
  authType?: String;
  backPhoto?: String;
  bisDate?: String;
  bisPhoto?: String;
  city?: String;
  citycode?: String;
  companyAddress?: String;
  ct?: String;
  d?: Int;
  discription?: String;
  frontPhoto?: String;
  handPhoto?: String;
  headPhoto?: String;
  isSame?: Int;
  latitude?: String;
  legalDi?: String;
  legalName?: String;
  legalTel?: String;
  longitude?: String;
  merchantId?: String;
  name?: String;
  nowAddress?: String;
  otherPhoto?: String;
  registMoney?: String;
  setupDate?: String;
  socialCode?: String;
  status?: Int;
}

export interface ChongduCompanyauthentPromise
  extends Promise<ChongduCompanyauthent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authType: () => Promise<String>;
  backPhoto: () => Promise<String>;
  bisDate: () => Promise<String>;
  bisPhoto: () => Promise<String>;
  city: () => Promise<String>;
  citycode: () => Promise<String>;
  companyAddress: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  discription: () => Promise<String>;
  frontPhoto: () => Promise<String>;
  handPhoto: () => Promise<String>;
  headPhoto: () => Promise<String>;
  isSame: () => Promise<Int>;
  latitude: () => Promise<String>;
  legalDi: () => Promise<String>;
  legalName: () => Promise<String>;
  legalTel: () => Promise<String>;
  longitude: () => Promise<String>;
  merchantId: () => Promise<String>;
  name: () => Promise<String>;
  nowAddress: () => Promise<String>;
  otherPhoto: () => Promise<String>;
  registMoney: () => Promise<String>;
  setupDate: () => Promise<String>;
  socialCode: () => Promise<String>;
  status: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
}

export interface ChongduCompanyauthentSubscription
  extends Promise<AsyncIterator<ChongduCompanyauthent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authType: () => Promise<AsyncIterator<String>>;
  backPhoto: () => Promise<AsyncIterator<String>>;
  bisDate: () => Promise<AsyncIterator<String>>;
  bisPhoto: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  companyAddress: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  discription: () => Promise<AsyncIterator<String>>;
  frontPhoto: () => Promise<AsyncIterator<String>>;
  handPhoto: () => Promise<AsyncIterator<String>>;
  headPhoto: () => Promise<AsyncIterator<String>>;
  isSame: () => Promise<AsyncIterator<Int>>;
  latitude: () => Promise<AsyncIterator<String>>;
  legalDi: () => Promise<AsyncIterator<String>>;
  legalName: () => Promise<AsyncIterator<String>>;
  legalTel: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  merchantId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nowAddress: () => Promise<AsyncIterator<String>>;
  otherPhoto: () => Promise<AsyncIterator<String>>;
  registMoney: () => Promise<AsyncIterator<String>>;
  setupDate: () => Promise<AsyncIterator<String>>;
  socialCode: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: <T = ChongduUserSubscription>() => T;
}

export interface ChongduCompanyauthentNullablePromise
  extends Promise<ChongduCompanyauthent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authType: () => Promise<String>;
  backPhoto: () => Promise<String>;
  bisDate: () => Promise<String>;
  bisPhoto: () => Promise<String>;
  city: () => Promise<String>;
  citycode: () => Promise<String>;
  companyAddress: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  discription: () => Promise<String>;
  frontPhoto: () => Promise<String>;
  handPhoto: () => Promise<String>;
  headPhoto: () => Promise<String>;
  isSame: () => Promise<Int>;
  latitude: () => Promise<String>;
  legalDi: () => Promise<String>;
  legalName: () => Promise<String>;
  legalTel: () => Promise<String>;
  longitude: () => Promise<String>;
  merchantId: () => Promise<String>;
  name: () => Promise<String>;
  nowAddress: () => Promise<String>;
  otherPhoto: () => Promise<String>;
  registMoney: () => Promise<String>;
  setupDate: () => Promise<String>;
  socialCode: () => Promise<String>;
  status: () => Promise<Int>;
  userId: <T = ChongduUserPromise>() => T;
}

export interface AggregateChongduRoleAuth {
  count: Int;
}

export interface AggregateChongduRoleAuthPromise
  extends Promise<AggregateChongduRoleAuth>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduRoleAuthSubscription
  extends Promise<AsyncIterator<AggregateChongduRoleAuth>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduVaccineSubscriptionPayload {
  mutation: MutationType;
  node: ChongduVaccine;
  updatedFields: String[];
  previousValues: ChongduVaccinePreviousValues;
}

export interface ChongduVaccineSubscriptionPayloadPromise
  extends Promise<ChongduVaccineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduVaccinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduVaccinePreviousValuesPromise>() => T;
}

export interface ChongduVaccineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduVaccineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduVaccineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduVaccinePreviousValuesSubscription>() => T;
}

export interface ChongduRefreshConnection {
  pageInfo: PageInfo;
  edges: ChongduRefreshEdge[];
}

export interface ChongduRefreshConnectionPromise
  extends Promise<ChongduRefreshConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduRefreshEdge>>() => T;
  aggregate: <T = AggregateChongduRefreshPromise>() => T;
}

export interface ChongduRefreshConnectionSubscription
  extends Promise<AsyncIterator<ChongduRefreshConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduRefreshEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduRefreshSubscription>() => T;
}

export interface ChongduVaccinePreviousValues {
  id: Int;
  brandId?: Int;
  cityCode?: String;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  indexNum?: Int;
  mt?: String;
  petId?: String;
  status?: Int;
  street?: String;
  time?: String;
  userId?: String;
}

export interface ChongduVaccinePreviousValuesPromise
  extends Promise<ChongduVaccinePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  brandId: () => Promise<Int>;
  cityCode: () => Promise<String>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  indexNum: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  street: () => Promise<String>;
  time: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface ChongduVaccinePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduVaccinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  brandId: () => Promise<AsyncIterator<Int>>;
  cityCode: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  indexNum: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  street: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduProductSku {
  count: Int;
}

export interface AggregateChongduProductSkuPromise
  extends Promise<AggregateChongduProductSku>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduProductSkuSubscription
  extends Promise<AsyncIterator<AggregateChongduProductSku>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateChongduCommentReview {
  count: Int;
}

export interface AggregateChongduCommentReviewPromise
  extends Promise<AggregateChongduCommentReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCommentReviewSubscription
  extends Promise<AsyncIterator<AggregateChongduCommentReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduAdviceConnection {
  pageInfo: PageInfo;
  edges: ChongduAdviceEdge[];
}

export interface ChongduAdviceConnectionPromise
  extends Promise<ChongduAdviceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAdviceEdge>>() => T;
  aggregate: <T = AggregateChongduAdvicePromise>() => T;
}

export interface ChongduAdviceConnectionSubscription
  extends Promise<AsyncIterator<ChongduAdviceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAdviceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAdviceSubscription>() => T;
}

export interface ChongduVaccineBrandSubscriptionPayload {
  mutation: MutationType;
  node: ChongduVaccineBrand;
  updatedFields: String[];
  previousValues: ChongduVaccineBrandPreviousValues;
}

export interface ChongduVaccineBrandSubscriptionPayloadPromise
  extends Promise<ChongduVaccineBrandSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduVaccineBrandPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduVaccineBrandPreviousValuesPromise>() => T;
}

export interface ChongduVaccineBrandSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduVaccineBrandSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduVaccineBrandSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduVaccineBrandPreviousValuesSubscription>() => T;
}

export interface ChongduProduct {
  id: ID_Output;
  browser?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  icon?: String;
  mt?: String;
  name?: String;
  price?: Float;
  promotionPrice?: Float;
  sale?: Int;
  shareCount?: Int;
  status?: Int;
  stock?: Int;
  title?: String;
  userId?: String;
}

export interface ChongduProductPromise
  extends Promise<ChongduProduct>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  brandId: <T = ChongduProductBrandPromise>() => T;
  browser: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  merchantId: <T = ChongduMerchantPromise>() => T;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  promotionPrice: () => Promise<Float>;
  sale: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  status: () => Promise<Int>;
  stock: () => Promise<Int>;
  title: () => Promise<String>;
  typeId: <T = ChongduProductTypePromise>() => T;
  userId: () => Promise<String>;
}

export interface ChongduProductSubscription
  extends Promise<AsyncIterator<ChongduProduct>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  brandId: <T = ChongduProductBrandSubscription>() => T;
  browser: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  icon: () => Promise<AsyncIterator<String>>;
  merchantId: <T = ChongduMerchantSubscription>() => T;
  mt: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  promotionPrice: () => Promise<AsyncIterator<Float>>;
  sale: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  stock: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  typeId: <T = ChongduProductTypeSubscription>() => T;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductNullablePromise
  extends Promise<ChongduProduct | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  brandId: <T = ChongduProductBrandPromise>() => T;
  browser: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  icon: () => Promise<String>;
  merchantId: <T = ChongduMerchantPromise>() => T;
  mt: () => Promise<String>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
  promotionPrice: () => Promise<Float>;
  sale: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  status: () => Promise<Int>;
  stock: () => Promise<Int>;
  title: () => Promise<String>;
  typeId: <T = ChongduProductTypePromise>() => T;
  userId: () => Promise<String>;
}

export interface ChongduVaccineBrandPreviousValues {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  description?: String;
  image?: String;
  name?: String;
  sort?: Int;
  type?: Int;
}

export interface ChongduVaccineBrandPreviousValuesPromise
  extends Promise<ChongduVaccineBrandPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  sort: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduVaccineBrandPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduVaccineBrandPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduPetauthentLogEdge {
  node: ChongduPetauthentLog;
  cursor: String;
}

export interface ChongduPetauthentLogEdgePromise
  extends Promise<ChongduPetauthentLogEdge>,
    Fragmentable {
  node: <T = ChongduPetauthentLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduPetauthentLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduPetauthentLogEdge>>,
    Fragmentable {
  node: <T = ChongduPetauthentLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentReviewEdge {
  node: ChongduCommentReview;
  cursor: String;
}

export interface ChongduCommentReviewEdgePromise
  extends Promise<ChongduCommentReviewEdge>,
    Fragmentable {
  node: <T = ChongduCommentReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCommentReviewEdgeSubscription
  extends Promise<AsyncIterator<ChongduCommentReviewEdge>>,
    Fragmentable {
  node: <T = ChongduCommentReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetImg {
  id: ID_Output;
  addr?: String;
  ct?: String;
  d?: Int;
  imgType?: Int;
  mt?: String;
  petId?: String;
  status?: Int;
  type?: Int;
  userId?: String;
}

export interface ChongduPetImgPromise
  extends Promise<ChongduPetImg>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduPetImgSubscription
  extends Promise<AsyncIterator<ChongduPetImg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addr: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  imgType: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  petId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduPetImgNullablePromise
  extends Promise<ChongduPetImg | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  addr: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  imgType: () => Promise<Int>;
  mt: () => Promise<String>;
  petId: () => Promise<String>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduValidateSubscriptionPayload {
  mutation: MutationType;
  node: ChongduValidate;
  updatedFields: String[];
  previousValues: ChongduValidatePreviousValues;
}

export interface ChongduValidateSubscriptionPayloadPromise
  extends Promise<ChongduValidateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduValidatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduValidatePreviousValuesPromise>() => T;
}

export interface ChongduValidateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduValidateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduValidateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduValidatePreviousValuesSubscription>() => T;
}

export interface AggregateChongduPayInfo {
  count: Int;
}

export interface AggregateChongduPayInfoPromise
  extends Promise<AggregateChongduPayInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPayInfoSubscription
  extends Promise<AsyncIterator<AggregateChongduPayInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduValidatePreviousValues {
  id: Int;
  code?: String;
  ct?: String;
  d?: Int;
  mt?: String;
  phone?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
}

export interface ChongduValidatePreviousValuesPromise
  extends Promise<ChongduValidatePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  code: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  phone: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduValidatePreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduValidatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  code: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderinvoicedetailConnection {
  pageInfo: PageInfo;
  edges: ChongduOrderinvoicedetailEdge[];
}

export interface ChongduOrderinvoicedetailConnectionPromise
  extends Promise<ChongduOrderinvoicedetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduOrderinvoicedetailEdge>>() => T;
  aggregate: <T = AggregateChongduOrderinvoicedetailPromise>() => T;
}

export interface ChongduOrderinvoicedetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduOrderinvoicedetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduOrderinvoicedetailEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduOrderinvoicedetailSubscription>() => T;
}

export interface ChongduCommentReviewConnection {
  pageInfo: PageInfo;
  edges: ChongduCommentReviewEdge[];
}

export interface ChongduCommentReviewConnectionPromise
  extends Promise<ChongduCommentReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCommentReviewEdge>>() => T;
  aggregate: <T = AggregateChongduCommentReviewPromise>() => T;
}

export interface ChongduCommentReviewConnectionSubscription
  extends Promise<AsyncIterator<ChongduCommentReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCommentReviewEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCommentReviewSubscription>() => T;
}

export interface ChongduWorldShieldEdge {
  node: ChongduWorldShield;
  cursor: String;
}

export interface ChongduWorldShieldEdgePromise
  extends Promise<ChongduWorldShieldEdge>,
    Fragmentable {
  node: <T = ChongduWorldShieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduWorldShieldEdgeSubscription
  extends Promise<AsyncIterator<ChongduWorldShieldEdge>>,
    Fragmentable {
  node: <T = ChongduWorldShieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduVersionSubscriptionPayload {
  mutation: MutationType;
  node: ChongduVersion;
  updatedFields: String[];
  previousValues: ChongduVersionPreviousValues;
}

export interface ChongduVersionSubscriptionPayloadPromise
  extends Promise<ChongduVersionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduVersionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduVersionPreviousValuesPromise>() => T;
}

export interface ChongduVersionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduVersionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduVersionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduVersionPreviousValuesSubscription>() => T;
}

export interface ChongduVersion {
  id: Int;
  ip?: String;
  mac?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  tyep?: Int;
  versionCode?: String;
}

export interface ChongduVersionPromise
  extends Promise<ChongduVersion>,
    Fragmentable {
  id: () => Promise<Int>;
  ip: () => Promise<String>;
  mac: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  tyep: () => Promise<Int>;
  versionCode: () => Promise<String>;
}

export interface ChongduVersionSubscription
  extends Promise<AsyncIterator<ChongduVersion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mac: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tyep: () => Promise<AsyncIterator<Int>>;
  versionCode: () => Promise<AsyncIterator<String>>;
}

export interface ChongduVersionNullablePromise
  extends Promise<ChongduVersion | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ip: () => Promise<String>;
  mac: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  tyep: () => Promise<Int>;
  versionCode: () => Promise<String>;
}

export interface ChongduVersionPreviousValues {
  id: Int;
  ip?: String;
  mac?: String;
  mt?: String;
  muserId?: String;
  name?: String;
  tyep?: Int;
  versionCode?: String;
}

export interface ChongduVersionPreviousValuesPromise
  extends Promise<ChongduVersionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ip: () => Promise<String>;
  mac: () => Promise<String>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  tyep: () => Promise<Int>;
  versionCode: () => Promise<String>;
}

export interface ChongduVersionPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduVersionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mac: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  tyep: () => Promise<AsyncIterator<Int>>;
  versionCode: () => Promise<AsyncIterator<String>>;
}

export interface ChongduUserauthentLog {
  id: Int;
  userauthentId?: String;
  status?: Int;
  remark?: String;
  ct?: String;
  d?: Int;
}

export interface ChongduUserauthentLogPromise
  extends Promise<ChongduUserauthentLog>,
    Fragmentable {
  id: () => Promise<Int>;
  userauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduUserauthentLogSubscription
  extends Promise<AsyncIterator<ChongduUserauthentLog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  userauthentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  remark: () => Promise<AsyncIterator<String>>;
  cadminId: <T = ChongduAdminSubscription>() => T;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduUserauthentLogNullablePromise
  extends Promise<ChongduUserauthentLog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  userauthentId: () => Promise<String>;
  status: () => Promise<Int>;
  remark: () => Promise<String>;
  cadminId: <T = ChongduAdminPromise>() => T;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
}

export interface ChongduCommentPraise {
  id: Int;
  ct?: String;
  d?: Int;
  relateId?: Int;
  relateType?: Int;
  status?: Int;
  userId?: String;
}

export interface ChongduCommentPraisePromise
  extends Promise<ChongduCommentPraise>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<Int>;
  relateType: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduCommentPraiseSubscription
  extends Promise<AsyncIterator<ChongduCommentPraise>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  relateId: () => Promise<AsyncIterator<Int>>;
  relateType: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentPraiseNullablePromise
  extends Promise<ChongduCommentPraise | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  relateId: () => Promise<Int>;
  relateType: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
}

export interface ChongduStat {
  id: ID_Output;
  agentId?: String;
  citycode?: String;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  num?: Int;
  satus?: Int;
  sort?: Int;
  type?: Int;
}

export interface ChongduStatPromise extends Promise<ChongduStat>, Fragmentable {
  id: () => Promise<ID_Output>;
  agentId: () => Promise<String>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  num: () => Promise<Int>;
  satus: () => Promise<Int>;
  sort: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduStatSubscription
  extends Promise<AsyncIterator<ChongduStat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  agentId: () => Promise<AsyncIterator<String>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  num: () => Promise<AsyncIterator<Int>>;
  satus: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduStatNullablePromise
  extends Promise<ChongduStat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  agentId: () => Promise<String>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  num: () => Promise<Int>;
  satus: () => Promise<Int>;
  sort: () => Promise<Int>;
  type: () => Promise<Int>;
}

export interface ChongduViewcountSubscriptionPayload {
  mutation: MutationType;
  node: ChongduViewcount;
  updatedFields: String[];
  previousValues: ChongduViewcountPreviousValues;
}

export interface ChongduViewcountSubscriptionPayloadPromise
  extends Promise<ChongduViewcountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduViewcountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduViewcountPreviousValuesPromise>() => T;
}

export interface ChongduViewcountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduViewcountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduViewcountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduViewcountPreviousValuesSubscription>() => T;
}

export interface ChongduServiceType {
  id: Int;
  ct?: String;
  cuserId?: String;
  d?: Int;
  img?: String;
  level?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  pid?: Int;
  sort?: Int;
  status?: Int;
}

export interface ChongduServiceTypePromise
  extends Promise<ChongduServiceType>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  level: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduServiceTypeSubscription
  extends Promise<AsyncIterator<ChongduServiceType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  img: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServiceTypeNullablePromise
  extends Promise<ChongduServiceType | null>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  img: () => Promise<String>;
  level: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  pid: () => Promise<Int>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface ChongduViewcountPreviousValues {
  id: Int;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  ip?: String;
  mt?: String;
  muserid?: String;
  pid?: String;
  s?: Int;
  type?: Int;
  userid?: String;
  xu?: Int;
}

export interface ChongduViewcountPreviousValuesPromise
  extends Promise<ChongduViewcountPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  ip: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  pid: () => Promise<String>;
  s: () => Promise<Int>;
  type: () => Promise<Int>;
  userid: () => Promise<String>;
  xu: () => Promise<Int>;
}

export interface ChongduViewcountPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduViewcountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  ip: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<String>>;
  s: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  xu: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRole {
  id: ID_Output;
  ct?: String;
  cuserId?: String;
  d?: Int;
  mt?: String;
  muserId?: String;
  name?: String;
  status?: Int;
}

export interface ChongduRolePromise extends Promise<ChongduRole>, Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduRoleSubscription
  extends Promise<AsyncIterator<ChongduRole>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserId: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduRoleNullablePromise
  extends Promise<ChongduRole | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ct: () => Promise<String>;
  cuserId: () => Promise<String>;
  d: () => Promise<Int>;
  mt: () => Promise<String>;
  muserId: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Int>;
}

export interface ChongduCommentReview {
  id: Int;
  brower?: Int;
  commentId?: Int;
  content?: String;
  ct?: String;
  d?: Int;
  image?: String;
  likedNum?: Int;
  replyNum?: Int;
  userId?: String;
  video?: String;
}

export interface ChongduCommentReviewPromise
  extends Promise<ChongduCommentReview>,
    Fragmentable {
  id: () => Promise<Int>;
  brower: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  likedNum: () => Promise<Int>;
  replyNum: () => Promise<Int>;
  userId: () => Promise<String>;
  video: () => Promise<String>;
}

export interface ChongduCommentReviewSubscription
  extends Promise<AsyncIterator<ChongduCommentReview>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  brower: () => Promise<AsyncIterator<Int>>;
  commentId: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  likedNum: () => Promise<AsyncIterator<Int>>;
  replyNum: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  video: () => Promise<AsyncIterator<String>>;
}

export interface ChongduCommentReviewNullablePromise
  extends Promise<ChongduCommentReview | null>,
    Fragmentable {
  id: () => Promise<Int>;
  brower: () => Promise<Int>;
  commentId: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  image: () => Promise<String>;
  likedNum: () => Promise<Int>;
  replyNum: () => Promise<Int>;
  userId: () => Promise<String>;
  video: () => Promise<String>;
}

export interface ChongduProductRecommend {
  id: Int;
  citycode?: String;
  ct?: String;
  cuserid?: String;
  d?: Int;
  deviceid?: String;
  devicename?: String;
  devicetype?: Int;
  endtime?: String;
  mt?: String;
  muserid?: String;
  name?: String;
  productId?: String;
  sort?: Int;
  starttime?: String;
  status?: Int;
  userid?: String;
  username?: String;
}

export interface ChongduProductRecommendPromise
  extends Promise<ChongduProductRecommend>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  productId: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduProductRecommendSubscription
  extends Promise<AsyncIterator<ChongduProductRecommend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  citycode: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  cuserid: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  deviceid: () => Promise<AsyncIterator<String>>;
  devicename: () => Promise<AsyncIterator<String>>;
  devicetype: () => Promise<AsyncIterator<Int>>;
  endtime: () => Promise<AsyncIterator<String>>;
  mt: () => Promise<AsyncIterator<String>>;
  muserid: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  starttime: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  userid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductRecommendNullablePromise
  extends Promise<ChongduProductRecommend | null>,
    Fragmentable {
  id: () => Promise<Int>;
  citycode: () => Promise<String>;
  ct: () => Promise<String>;
  cuserid: () => Promise<String>;
  d: () => Promise<Int>;
  deviceid: () => Promise<String>;
  devicename: () => Promise<String>;
  devicetype: () => Promise<Int>;
  endtime: () => Promise<String>;
  mt: () => Promise<String>;
  muserid: () => Promise<String>;
  name: () => Promise<String>;
  productId: () => Promise<String>;
  sort: () => Promise<Int>;
  starttime: () => Promise<String>;
  status: () => Promise<Int>;
  userid: () => Promise<String>;
  username: () => Promise<String>;
}

export interface ChongduWorldSubscriptionPayload {
  mutation: MutationType;
  node: ChongduWorld;
  updatedFields: String[];
  previousValues: ChongduWorldPreviousValues;
}

export interface ChongduWorldSubscriptionPayloadPromise
  extends Promise<ChongduWorldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduWorldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduWorldPreviousValuesPromise>() => T;
}

export interface ChongduWorldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduWorldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduWorldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduWorldPreviousValuesSubscription>() => T;
}

export interface ChongduPlatformBusinessConnection {
  pageInfo: PageInfo;
  edges: ChongduPlatformBusinessEdge[];
}

export interface ChongduPlatformBusinessConnectionPromise
  extends Promise<ChongduPlatformBusinessConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduPlatformBusinessEdge>>() => T;
  aggregate: <T = AggregateChongduPlatformBusinessPromise>() => T;
}

export interface ChongduPlatformBusinessConnectionSubscription
  extends Promise<AsyncIterator<ChongduPlatformBusinessConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduPlatformBusinessEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduPlatformBusinessSubscription>() => T;
}

export interface ChongduWorldPreviousValues {
  id: Int;
  activityName?: String;
  commentStatus?: Int;
  ct?: String;
  d?: Int;
  description?: String;
  gif?: String;
  height?: Float;
  image?: String;
  joinCount?: Int;
  latitude?: String;
  longitude?: String;
  praiseCount?: Int;
  shareCount?: Int;
  type?: Int;
  video?: String;
  viewCount?: Int;
  width?: Float;
}

export interface ChongduWorldPreviousValuesPromise
  extends Promise<ChongduWorldPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  activityName: () => Promise<String>;
  commentStatus: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  description: () => Promise<String>;
  gif: () => Promise<String>;
  height: () => Promise<Float>;
  image: () => Promise<String>;
  joinCount: () => Promise<Int>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  praiseCount: () => Promise<Int>;
  shareCount: () => Promise<Int>;
  type: () => Promise<Int>;
  video: () => Promise<String>;
  viewCount: () => Promise<Int>;
  width: () => Promise<Float>;
}

export interface ChongduWorldPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduWorldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  activityName: () => Promise<AsyncIterator<String>>;
  commentStatus: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  gif: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<Float>>;
  image: () => Promise<AsyncIterator<String>>;
  joinCount: () => Promise<AsyncIterator<Int>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  shareCount: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  video: () => Promise<AsyncIterator<String>>;
  viewCount: () => Promise<AsyncIterator<Int>>;
  width: () => Promise<AsyncIterator<Float>>;
}

export interface ChongduAppVersionConnection {
  pageInfo: PageInfo;
  edges: ChongduAppVersionEdge[];
}

export interface ChongduAppVersionConnectionPromise
  extends Promise<ChongduAppVersionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduAppVersionEdge>>() => T;
  aggregate: <T = AggregateChongduAppVersionPromise>() => T;
}

export interface ChongduAppVersionConnectionSubscription
  extends Promise<AsyncIterator<ChongduAppVersionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChongduAppVersionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChongduAppVersionSubscription>() => T;
}

export interface AggregateChongduCommentReply {
  count: Int;
}

export interface AggregateChongduCommentReplyPromise
  extends Promise<AggregateChongduCommentReply>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduCommentReplySubscription
  extends Promise<AsyncIterator<AggregateChongduCommentReply>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderItemEdge {
  node: ChongduOrderItem;
  cursor: String;
}

export interface ChongduOrderItemEdgePromise
  extends Promise<ChongduOrderItemEdge>,
    Fragmentable {
  node: <T = ChongduOrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduOrderItemEdgeSubscription
  extends Promise<AsyncIterator<ChongduOrderItemEdge>>,
    Fragmentable {
  node: <T = ChongduOrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduWorldCommentSubscriptionPayload {
  mutation: MutationType;
  node: ChongduWorldComment;
  updatedFields: String[];
  previousValues: ChongduWorldCommentPreviousValues;
}

export interface ChongduWorldCommentSubscriptionPayloadPromise
  extends Promise<ChongduWorldCommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduWorldCommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduWorldCommentPreviousValuesPromise>() => T;
}

export interface ChongduWorldCommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduWorldCommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduWorldCommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduWorldCommentPreviousValuesSubscription>() => T;
}

export interface ChongduUserstatisticConnection {
  pageInfo: PageInfo;
  edges: ChongduUserstatisticEdge[];
}

export interface ChongduUserstatisticConnectionPromise
  extends Promise<ChongduUserstatisticConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduUserstatisticEdge>>() => T;
  aggregate: <T = AggregateChongduUserstatisticPromise>() => T;
}

export interface ChongduUserstatisticConnectionSubscription
  extends Promise<AsyncIterator<ChongduUserstatisticConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduUserstatisticEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduUserstatisticSubscription>() => T;
}

export interface ChongduWorldCommentPreviousValues {
  id: Int;
  content?: String;
  ct?: String;
  d?: Int;
  praiseCount?: Int;
  status?: Int;
  userId?: String;
  worldId?: Int;
}

export interface ChongduWorldCommentPreviousValuesPromise
  extends Promise<ChongduWorldCommentPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  content: () => Promise<String>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  praiseCount: () => Promise<Int>;
  status: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduWorldCommentPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduWorldCommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  praiseCount: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduServicePettypeConnection {
  pageInfo: PageInfo;
  edges: ChongduServicePettypeEdge[];
}

export interface ChongduServicePettypeConnectionPromise
  extends Promise<ChongduServicePettypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduServicePettypeEdge>>() => T;
  aggregate: <T = AggregateChongduServicePettypePromise>() => T;
}

export interface ChongduServicePettypeConnectionSubscription
  extends Promise<AsyncIterator<ChongduServicePettypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduServicePettypeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduServicePettypeSubscription>() => T;
}

export interface ChongduCommentReplyEdge {
  node: ChongduCommentReply;
  cursor: String;
}

export interface ChongduCommentReplyEdgePromise
  extends Promise<ChongduCommentReplyEdge>,
    Fragmentable {
  node: <T = ChongduCommentReplyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduCommentReplyEdgeSubscription
  extends Promise<AsyncIterator<ChongduCommentReplyEdge>>,
    Fragmentable {
  node: <T = ChongduCommentReplySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduProductauthentLogEdge {
  node: ChongduProductauthentLog;
  cursor: String;
}

export interface ChongduProductauthentLogEdgePromise
  extends Promise<ChongduProductauthentLogEdge>,
    Fragmentable {
  node: <T = ChongduProductauthentLogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduProductauthentLogEdgeSubscription
  extends Promise<AsyncIterator<ChongduProductauthentLogEdge>>,
    Fragmentable {
  node: <T = ChongduProductauthentLogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChongduPetRecommend {
  count: Int;
}

export interface AggregateChongduPetRecommendPromise
  extends Promise<AggregateChongduPetRecommend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChongduPetRecommendSubscription
  extends Promise<AsyncIterator<AggregateChongduPetRecommend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldLikeSubscriptionPayload {
  mutation: MutationType;
  node: ChongduWorldLike;
  updatedFields: String[];
  previousValues: ChongduWorldLikePreviousValues;
}

export interface ChongduWorldLikeSubscriptionPayloadPromise
  extends Promise<ChongduWorldLikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduWorldLikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduWorldLikePreviousValuesPromise>() => T;
}

export interface ChongduWorldLikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduWorldLikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduWorldLikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduWorldLikePreviousValuesSubscription>() => T;
}

export interface ChongduCommentReplyConnection {
  pageInfo: PageInfo;
  edges: ChongduCommentReplyEdge[];
}

export interface ChongduCommentReplyConnectionPromise
  extends Promise<ChongduCommentReplyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduCommentReplyEdge>>() => T;
  aggregate: <T = AggregateChongduCommentReplyPromise>() => T;
}

export interface ChongduCommentReplyConnectionSubscription
  extends Promise<AsyncIterator<ChongduCommentReplyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduCommentReplyEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduCommentReplySubscription>() => T;
}

export interface ChongduWorldJoinPreviousValues {
  id: Int;
  ct?: String;
  d?: Int;
  type?: Int;
  userId?: String;
  worldId?: Int;
}

export interface ChongduWorldJoinPreviousValuesPromise
  extends Promise<ChongduWorldJoinPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  type: () => Promise<Int>;
  userId: () => Promise<String>;
  worldId: () => Promise<Int>;
}

export interface ChongduWorldJoinPreviousValuesSubscription
  extends Promise<AsyncIterator<ChongduWorldJoinPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  worldId: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduWorldJoinSubscriptionPayload {
  mutation: MutationType;
  node: ChongduWorldJoin;
  updatedFields: String[];
  previousValues: ChongduWorldJoinPreviousValues;
}

export interface ChongduWorldJoinSubscriptionPayloadPromise
  extends Promise<ChongduWorldJoinSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChongduWorldJoinPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChongduWorldJoinPreviousValuesPromise>() => T;
}

export interface ChongduWorldJoinSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChongduWorldJoinSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChongduWorldJoinSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChongduWorldJoinPreviousValuesSubscription>() => T;
}

export interface ChongduOrderstatistic {
  id: Int;
  count?: Int;
  ct?: String;
  d?: Int;
  day?: Int;
  hour?: Int;
  month?: Int;
  mt?: String;
  sort?: Int;
  status?: Int;
  type?: Int;
  year?: Int;
}

export interface ChongduOrderstatisticPromise
  extends Promise<ChongduOrderstatistic>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduOrderstatisticSubscription
  extends Promise<AsyncIterator<ChongduOrderstatistic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  ct: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<Int>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  mt: () => Promise<AsyncIterator<String>>;
  sort: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface ChongduOrderstatisticNullablePromise
  extends Promise<ChongduOrderstatistic | null>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  ct: () => Promise<String>;
  d: () => Promise<Int>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  month: () => Promise<Int>;
  mt: () => Promise<String>;
  sort: () => Promise<Int>;
  status: () => Promise<Int>;
  type: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface ChongduProductAuthentdetailConnection {
  pageInfo: PageInfo;
  edges: ChongduProductAuthentdetailEdge[];
}

export interface ChongduProductAuthentdetailConnectionPromise
  extends Promise<ChongduProductAuthentdetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduProductAuthentdetailEdge>>() => T;
  aggregate: <T = AggregateChongduProductAuthentdetailPromise>() => T;
}

export interface ChongduProductAuthentdetailConnectionSubscription
  extends Promise<AsyncIterator<ChongduProductAuthentdetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduProductAuthentdetailEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduProductAuthentdetailSubscription>() => T;
}

export interface ChongduRoleGroupEdge {
  node: ChongduRoleGroup;
  cursor: String;
}

export interface ChongduRoleGroupEdgePromise
  extends Promise<ChongduRoleGroupEdge>,
    Fragmentable {
  node: <T = ChongduRoleGroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChongduRoleGroupEdgeSubscription
  extends Promise<AsyncIterator<ChongduRoleGroupEdge>>,
    Fragmentable {
  node: <T = ChongduRoleGroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChongduTradingAreaConnection {
  pageInfo: PageInfo;
  edges: ChongduTradingAreaEdge[];
}

export interface ChongduTradingAreaConnectionPromise
  extends Promise<ChongduTradingAreaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChongduTradingAreaEdge>>() => T;
  aggregate: <T = AggregateChongduTradingAreaPromise>() => T;
}

export interface ChongduTradingAreaConnectionSubscription
  extends Promise<AsyncIterator<ChongduTradingAreaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ChongduTradingAreaEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateChongduTradingAreaSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ChongduAccount",
    embedded: false
  },
  {
    name: "ChongduAddress",
    embedded: false
  },
  {
    name: "ChongduAddressRelation",
    embedded: false
  },
  {
    name: "ChongduAdmin",
    embedded: false
  },
  {
    name: "ChongduAdminRole",
    embedded: false
  },
  {
    name: "ChongduAdvertisement",
    embedded: false
  },
  {
    name: "ChongduAdvice",
    embedded: false
  },
  {
    name: "ChongduAgent",
    embedded: false
  },
  {
    name: "ChongduAppVersion",
    embedded: false
  },
  {
    name: "ChongduAppointment",
    embedded: false
  },
  {
    name: "ChongduCart",
    embedded: false
  },
  {
    name: "ChongduCity",
    embedded: false
  },
  {
    name: "ChongduComment",
    embedded: false
  },
  {
    name: "ChongduCommentPraise",
    embedded: false
  },
  {
    name: "ChongduCommentReply",
    embedded: false
  },
  {
    name: "ChongduCommentReview",
    embedded: false
  },
  {
    name: "ChongduCompanyauthent",
    embedded: false
  },
  {
    name: "ChongduCompanyrecommend",
    embedded: false
  },
  {
    name: "ChongduCorrelation",
    embedded: false
  },
  {
    name: "ChongduDataVersion",
    embedded: false
  },
  {
    name: "ChongduDiscuss",
    embedded: false
  },
  {
    name: "ChongduFilemanage",
    embedded: false
  },
  {
    name: "ChongduFocusing",
    embedded: false
  },
  {
    name: "ChongduLock",
    embedded: false
  },
  {
    name: "ChongduLog",
    embedded: false
  },
  {
    name: "ChongduLoginLog",
    embedded: false
  },
  {
    name: "ChongduMenu",
    embedded: false
  },
  {
    name: "ChongduMerchant",
    embedded: false
  },
  {
    name: "ChongduMerchantImg",
    embedded: false
  },
  {
    name: "ChongduMerchantstatistic",
    embedded: false
  },
  {
    name: "ChongduMessage",
    embedded: false
  },
  {
    name: "ChongduModel",
    embedded: false
  },
  {
    name: "ChongduModeldetail",
    embedded: false
  },
  {
    name: "ChongduOrder",
    embedded: false
  },
  {
    name: "ChongduOrderItem",
    embedded: false
  },
  {
    name: "ChongduOrderinvoice",
    embedded: false
  },
  {
    name: "ChongduOrderinvoicedetail",
    embedded: false
  },
  {
    name: "ChongduOrderserial",
    embedded: false
  },
  {
    name: "ChongduOrderstatistic",
    embedded: false
  },
  {
    name: "ChongduPayInfo",
    embedded: false
  },
  {
    name: "ChongduPermission",
    embedded: false
  },
  {
    name: "ChongduPet",
    embedded: false
  },
  {
    name: "ChongduPetCard",
    embedded: false
  },
  {
    name: "ChongduPetImg",
    embedded: false
  },
  {
    name: "ChongduPetRecommend",
    embedded: false
  },
  {
    name: "ChongduPetType",
    embedded: false
  },
  {
    name: "ChongduPetauthentdetail",
    embedded: false
  },
  {
    name: "ChongduPlatformBusiness",
    embedded: false
  },
  {
    name: "ChongduPlatformExecute",
    embedded: false
  },
  {
    name: "ChongduProduct",
    embedded: false
  },
  {
    name: "ChongduProductAuthentdetail",
    embedded: false
  },
  {
    name: "ChongduProductBrand",
    embedded: false
  },
  {
    name: "ChongduProductImg",
    embedded: false
  },
  {
    name: "ChongduProductPettype",
    embedded: false
  },
  {
    name: "ChongduProductRecommend",
    embedded: false
  },
  {
    name: "ChongduProductSku",
    embedded: false
  },
  {
    name: "ChongduProductType",
    embedded: false
  },
  {
    name: "ChongduRecommend",
    embedded: false
  },
  {
    name: "ChongduRefresh",
    embedded: false
  },
  {
    name: "ChongduRepellent",
    embedded: false
  },
  {
    name: "ChongduRole",
    embedded: false
  },
  {
    name: "ChongduRoleDetail",
    embedded: false
  },
  {
    name: "ChongduSearchthink",
    embedded: false
  },
  {
    name: "ChongduService",
    embedded: false
  },
  {
    name: "ChongduServiceAuthentdetail",
    embedded: false
  },
  {
    name: "ChongduServiceImg",
    embedded: false
  },
  {
    name: "ChongduServicePettype",
    embedded: false
  },
  {
    name: "ChongduServiceRecommend",
    embedded: false
  },
  {
    name: "ChongduServiceType",
    embedded: false
  },
  {
    name: "ChongduStat",
    embedded: false
  },
  {
    name: "ChongduTag",
    embedded: false
  },
  {
    name: "ChongduTagDetail",
    embedded: false
  },
  {
    name: "ChongduUser",
    embedded: false
  },
  {
    name: "ChongduUserFavourite",
    embedded: false
  },
  {
    name: "ChongduUserauthent",
    embedded: false
  },
  {
    name: "ChongduUserbind",
    embedded: false
  },
  {
    name: "ChongduUserdetail",
    embedded: false
  },
  {
    name: "ChongduUserstatistic",
    embedded: false
  },
  {
    name: "ChongduVaccine",
    embedded: false
  },
  {
    name: "ChongduVaccineBrand",
    embedded: false
  },
  {
    name: "ChongduValidate",
    embedded: false
  },
  {
    name: "ChongduVersion",
    embedded: false
  },
  {
    name: "ChongduViewcount",
    embedded: false
  },
  {
    name: "ChongduWorld",
    embedded: false
  },
  {
    name: "ChongduWorldComment",
    embedded: false
  },
  {
    name: "ChongduWorldJoin",
    embedded: false
  },
  {
    name: "ChongduWorldLike",
    embedded: false
  },
  {
    name: "ChongduWorldReply",
    embedded: false
  },
  {
    name: "ChongduRoleGroup",
    embedded: false
  },
  {
    name: "ChongduRoleAuth",
    embedded: false
  },
  {
    name: "ChongduRoleMenu",
    embedded: false
  },
  {
    name: "ChongduRoleMenuChildren",
    embedded: false
  },
  {
    name: "ChongduCompanyauthentLog",
    embedded: false
  },
  {
    name: "ChongduPetauthentLog",
    embedded: false
  },
  {
    name: "ChongduProductauthentLog",
    embedded: false
  },
  {
    name: "ChongduUserauthentLog",
    embedded: false
  },
  {
    name: "ChongduServiceauthentLog",
    embedded: false
  },
  {
    name: "ChongduTradingArea",
    embedded: false
  },
  {
    name: "ChongduWorldShield",
    embedded: false
  },
  {
    name: "ChongduInform",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4467`
});
export const prisma = new Prisma();
